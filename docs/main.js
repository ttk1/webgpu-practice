(()=>{"use strict";const e=1e3;const t=1e3;const n=5e4;const r=4194304;class a{constructor(e,t,n){if(this.m=e,this.n=t,null!=n){if(n.length!=e*t)throw new Error("サイズの不一致");this.matrix=[];for(let r=0;r<e;r++){this.matrix[r]=[];for(let a=0;a<t;a++)this.matrix[r][a]=n[r+e*a]}}else{this.matrix=[];for(let n=0;n<e;n++){this.matrix[n]=[];for(let e=0;e<t;e++)this.matrix[n][e]=0}}}setValue(e,t,n){if(e<0||e>=this.m||t<0||t>=this.n)throw new Error("範囲外");this.matrix[e][t]=n}getValue(e,t){if(e<0||e>=this.m||t<0||t>=this.n)throw new Error("範囲外");return this.matrix[e][t]}mul(e){if(this.n!=e.m)throw new Error("サイズの不一致");const t=new a(this.m,e.n);for(let n=0;n<this.m;n++)for(let r=0;r<e.n;r++){let a=0;for(let t=0;t<this.n;t++)a+=this.getValue(n,t)*e.getValue(t,r);t.setValue(n,r,a)}return t}toArray(){const e=[];for(let t=0;t<this.m;t++)for(let n=0;n<this.n;n++)e[t+this.m*n]=this.getValue(t,n);return e}}class o{constructor(e,t,n){if(this.m=e,this.n=t,null!=n){if(n.length!=e*t)throw new Error("サイズの不一致");this.matrix=[];for(let r=0;r<e;r++){this.matrix[r]=[];for(let a=0;a<t;a++)this.matrix[r][a]=n[r+e*a]}}else{this.matrix=[];for(let n=0;n<e;n++){this.matrix[n]=[];for(let e=0;e<t;e++)this.matrix[n][e]=0}}}setValue(e,t,n){if(e<0||e>=this.m||t<0||t>=this.n)throw new Error("範囲外");this.matrix[e][t]=n}getValue(e,t){if(e<0||e>=this.m||t<0||t>=this.n)throw new Error("範囲外");return this.matrix[e][t]}mul(e){if(this.n!=e.m)throw new Error("サイズの不一致");const t=new o(this.m,e.n);for(let n=0;n<this.m;n++)for(let r=0;r<e.n;r++){let a=0;for(let t=0;t<this.n;t++)a+=this.getValue(n,t)*e.getValue(t,r);t.setValue(n,r,a)}return t}toArray(){const e=[];for(let t=0;t<this.m;t++)for(let n=0;n<this.n;n++)e[t+this.m*n]=this.getValue(t,n);return e}}function i(e){return new Promise(((t,n)=>{const r=new Image;r.onload=()=>t(r),r.onerror=e=>n(e),r.src=e}))}const u={basic_render_pipeline:()=>{return e=void 0,t=void 0,r=function*(){console.log("hello, world!");const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const t=e.getContext("webgpu"),n=yield navigator.gpu.requestAdapter(),r=yield n.requestDevice(),a=r.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) color : vec4f\n}\n\n@vertex\nfn vertex_main(@location(0) position: vec4f,\n               @location(1) color: vec4f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = position;\n  output.color = color;\n  return output;\n}\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return fragData.color;\n}\n"});t.configure({device:r,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const o=new Float32Array([0,.6,0,1,1,0,0,1,-.5,-.6,0,1,0,1,0,1,.5,-.6,0,1,0,0,1,1]),i=r.createBuffer({size:o.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(i,0,o,0,o.length);const u={vertex:{module:a,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x4"},{shaderLocation:1,offset:16,format:"float32x4"}],arrayStride:32,stepMode:"vertex"}]},fragment:{module:a,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list"},layout:"auto"},s=r.createRenderPipeline(u),c=r.createCommandEncoder(),f={colorAttachments:[{clearValue:{r:0,g:.5,b:1,a:1},loadOp:"clear",storeOp:"store",view:t.getCurrentTexture().createView()}]},l=c.beginRenderPass(f);l.setPipeline(s),l.setVertexBuffer(0,i),l.draw(3),l.end(),r.queue.submit([c.finish()])},new((n=void 0)||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r},basic_compute_pipeline:()=>{return t=void 0,n=void 0,a=function*(){console.log("hello, world!");const t=yield navigator.gpu.requestAdapter(),n=yield t.requestDevice(),r=n.createShaderModule({code:"\n@group(0) @binding(0)\nvar<storage, read_write> output: array<f32>;\n\n@compute @workgroup_size(64)\nfn main(\n  @builtin(global_invocation_id)\n  global_id : vec3u,\n\n  @builtin(local_invocation_id)\n  local_id : vec3u,\n) {\n  // Avoid accessing the buffer out of bounds\n  if (global_id.x >= 1000) {\n    return;\n  }\n\n  output[global_id.x] =\n    f32(global_id.x) * 1000. + f32(local_id.x);\n}\n"}),a=n.createBuffer({size:e,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),o=n.createBuffer({size:e,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),i=n.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),u=n.createBindGroup({layout:i,entries:[{binding:0,resource:{buffer:a}}]}),s=n.createComputePipeline({layout:n.createPipelineLayout({bindGroupLayouts:[i]}),compute:{module:r,entryPoint:"main"}}),c=n.createCommandEncoder(),f=c.beginComputePass();f.setPipeline(s),f.setBindGroup(0,u),f.dispatchWorkgroups(Math.ceil(15.625)),f.end(),c.copyBufferToBuffer(a,0,o,0,e),n.queue.submit([c.finish()]),yield o.mapAsync(GPUMapMode.READ,0,e);const l=o.getMappedRange(0,e).slice(0);o.unmap(),console.log(new Float32Array(l))},new((r=void 0)||(r=Promise))((function(e,o){function i(e){try{s(a.next(e))}catch(e){o(e)}}function u(e){try{s(a.throw(e))}catch(e){o(e)}}function s(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(i,u)}s((a=a.apply(t,n||[])).next())}));var t,n,r,a},demo01:()=>{return e=void 0,t=void 0,r=function*(){console.log("hello, world!");const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const t=e.getContext("webgpu"),n=yield navigator.gpu.requestAdapter(),r=yield n.requestDevice(),a=r.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) color : vec4f\n}\n\n@vertex\nfn vertex_main(@location(0) position: vec4f,\n               @location(1) color: vec4f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = vec4(position.xyz * 0.5, position.w);\n  output.color = color;\n  return output;\n}\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return fragData.color;\n}\n"});t.configure({device:r,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const o=new Float32Array([0,1,0,1,1,-1,0,1,-1,-1,0,1]),i=r.createBuffer({size:o.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(i,0,o,0,o.length);const u=new Float32Array([1,0,0,1,0,1,0,1,0,0,1,1]),s=r.createBuffer({size:u.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(s,0,u,0,u.length);const c={vertex:{module:a,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x4"}],arrayStride:16,stepMode:"vertex"},{attributes:[{shaderLocation:1,offset:0,format:"float32x4"}],arrayStride:16,stepMode:"vertex"}]},fragment:{module:a,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list"},layout:"auto"},f=r.createRenderPipeline(c),l=r.createCommandEncoder(),d={colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store",view:t.getCurrentTexture().createView()}]},p=l.beginRenderPass(d);p.setPipeline(f),p.setVertexBuffer(0,i),p.setVertexBuffer(1,s),p.draw(3),p.end(),r.queue.submit([l.finish()])},new((n=void 0)||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r},demo02:()=>{return e=void 0,n=void 0,a=function*(){console.log("hello, world!");const e=yield navigator.gpu.requestAdapter(),n=yield e.requestDevice(),r=n.createBuffer({size:t,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),a=n.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),o=n.createBindGroup({layout:a,entries:[{binding:0,resource:{buffer:r}}]}),i=n.createShaderModule({code:"\n@group(0) @binding(0)\nvar<storage, read_write> output: array<f32>;\n\n// バッファを初期化\n@compute @workgroup_size(64)\nfn init(@builtin(global_invocation_id) global_id : vec3u) {\n  output[global_id.x] = f32(global_id.x) * 1000.;\n}\n\n// バッファの値を1インクリメント\n@compute @workgroup_size(64)\nfn increment(@builtin(global_invocation_id) global_id : vec3u) {\n  output[global_id.x] += 1.;\n}\n"}),u=n.createCommandEncoder(),s=n.createComputePipeline({layout:n.createPipelineLayout({bindGroupLayouts:[a]}),compute:{module:i,entryPoint:"init"}}),c=u.beginComputePass();c.setPipeline(s),c.setBindGroup(0,o),c.dispatchWorkgroups(Math.ceil(15.625)),c.end();for(let e=0;e<10;e++){const e=n.createComputePipeline({layout:n.createPipelineLayout({bindGroupLayouts:[a]}),compute:{module:i,entryPoint:"increment"}}),t=u.beginComputePass();t.setPipeline(e),t.setBindGroup(0,o),t.dispatchWorkgroups(Math.ceil(15.625)),t.end()}const f=n.createBuffer({size:t,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST});u.copyBufferToBuffer(r,0,f,0,t),n.queue.submit([u.finish()]),yield f.mapAsync(GPUMapMode.READ,0,t);const l=f.getMappedRange(0,t).slice(0);f.unmap(),console.log(new Float32Array(l))},new((r=void 0)||(r=Promise))((function(t,o){function i(e){try{s(a.next(e))}catch(e){o(e)}}function u(e){try{s(a.throw(e))}catch(e){o(e)}}function s(e){var n;e.done?t(e.value):(n=e.value,n instanceof r?n:new r((function(e){e(n)}))).then(i,u)}s((a=a.apply(e,n||[])).next())}));var e,n,r,a},demo03:()=>{return e=void 0,t=void 0,a=function*(){console.log("hello, world!");const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const t=e.getContext("webgpu"),r=yield navigator.gpu.requestAdapter(),a=yield r.requestDevice(),o=a.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) color : vec4f\n}\n\n@vertex\nfn vertex_main(@location(0) position: vec2f,\n               @location(1) velocity: vec2f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = vec4f(position, 0., 1.);\n  output.color = vec4f(1., 0., 0., 1.);\n  return output;\n}\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return fragData.color;\n}\n\nstruct Particle {\n  position : vec2f,\n  velocity : vec2f,\n}\n\n@binding(0) @group(0)\nvar<storage, read_write> particles: array<Particle>;\n\n@compute @workgroup_size(64)\nfn update(@builtin(global_invocation_id) global_id : vec3u) {\n  let g = vec2f(0., 0.);\n  let idx = global_id.x;\n  let p = particles[idx].position;\n  let v = particles[idx].velocity;\n\n  particles[idx].position = p + v * .2;\n  particles[idx].velocity = v\n    // 重力加速度\n    + ((g - p) / pow(distance(g, p) + 1., 2.)) * .05\n    // 空気抵抗\n    - v * pow(length(v), 2.) * .05;\n}\n"});t.configure({device:a,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const i=[];for(let e=0;e<n;e++)i.push(2*(Math.random()-.5)),i.push(2*(Math.random()-.5)),i.push(0),i.push(0);const u=a.createBuffer({size:Float32Array.BYTES_PER_ELEMENT*n*4,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST|GPUBufferUsage.STORAGE});a.queue.writeBuffer(u,0,new Float32Array(i),0,n);const s={vertex:{module:o,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x2"},{shaderLocation:1,offset:8,format:"float32x2"}],arrayStride:16,stepMode:"vertex"}]},fragment:{module:o,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"point-list"},layout:"auto"},c=a.createRenderPipeline(s),f={colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store",view:null}]},l=a.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),d=a.createBindGroup({layout:l,entries:[{binding:0,resource:{buffer:u}}]}),p=a.createComputePipeline({layout:a.createPipelineLayout({bindGroupLayouts:[l]}),compute:{module:o,entryPoint:"update"}}),g=()=>{const e=a.createCommandEncoder();f.colorAttachments[0].view=t.getCurrentTexture().createView();const r=e.beginRenderPass(f);r.setPipeline(c),r.setVertexBuffer(0,u),r.draw(n),r.end();const o=e.beginComputePass();o.setPipeline(p),o.setBindGroup(0,d),o.dispatchWorkgroups(Math.ceil(781.25)),o.end(),a.queue.submit([e.finish()]),requestAnimationFrame(g)};g()},new((r=void 0)||(r=Promise))((function(n,o){function i(e){try{s(a.next(e))}catch(e){o(e)}}function u(e){try{s(a.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,u)}s((a=a.apply(e,t||[])).next())}));var e,t,r,a},demo04:()=>{return e=void 0,t=void 0,r=function*(){const e=yield navigator.gpu.requestAdapter(),t=yield e.requestDevice(),n=t.createBuffer({size:16,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),r=t.createBuffer({size:16,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),a=t.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),o=t.createBindGroup({layout:a,entries:[{binding:0,resource:{buffer:n}}]}),i=t.createShaderModule({code:"\nfn F(X: u32, Y: u32, Z: u32) -> u32 {\n  return (X & Y) | (~X & Z);\n}\n\nfn G(X: u32, Y: u32, Z: u32) -> u32 {\n  return (X & Y) | (X & Z) | (Y & Z);\n}\n\nfn H(X: u32, Y: u32, Z: u32) -> u32 {\n  return X ^ Y ^ Z;\n}\n\nfn rotate(a: u32, s: u32) -> u32 {\n  return (a << s) | (a >> (32 - s));\n}\n\nfn FF(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + F(b, c, d) + x, s);\n}\n\nfn GG(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + G(b, c, d) + x + 0x5a827999u, s);\n}\n\nfn HH(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + H(b, c, d) + x + 0x6ed9eba1u, s);\n}\n\nvar<private> A = 0x67452301u;\nvar<private> B = 0xefcdab89u;\nvar<private> C = 0x98badcfeu;\nvar<private> D = 0x10325476u;\n\nfn update(X: array<u32, 16>) {\n  let AA = A;\n  let BB = B;\n  let CC = C;\n  let DD = D;\n\n  FF(&A, B, C, D, X[0], 3);\n  FF(&D, A, B, C, X[1], 7);\n  FF(&C, D, A, B, X[2], 11);\n  FF(&B, C, D, A, X[3], 19);\n  FF(&A, B, C, D, X[4], 3);\n  FF(&D, A, B, C, X[5], 7);\n  FF(&C, D, A, B, X[6], 11);\n  FF(&B, C, D, A, X[7], 19);\n  FF(&A, B, C, D, X[8], 3);\n  FF(&D, A, B, C, X[9], 7);\n  FF(&C, D, A, B, X[10], 11);\n  FF(&B, C, D, A, X[11], 19);\n  FF(&A, B, C, D, X[12], 3);\n  FF(&D, A, B, C, X[13], 7);\n  FF(&C, D, A, B, X[14], 11);\n  FF(&B, C, D, A, X[15], 19);\n\n  GG(&A, B, C, D, X[0], 3);\n  GG(&D, A, B, C, X[4], 5);\n  GG(&C, D, A, B, X[8], 9);\n  GG(&B, C, D, A, X[12], 13);\n  GG(&A, B, C, D, X[1], 3);\n  GG(&D, A, B, C, X[5], 5);\n  GG(&C, D, A, B, X[9], 9);\n  GG(&B, C, D, A, X[13], 13);\n  GG(&A, B, C, D, X[2], 3);\n  GG(&D, A, B, C, X[6], 5);\n  GG(&C, D, A, B, X[10], 9);\n  GG(&B, C, D, A, X[14], 13);\n  GG(&A, B, C, D, X[3], 3);\n  GG(&D, A, B, C, X[7], 5);\n  GG(&C, D, A, B, X[11], 9);\n  GG(&B, C, D, A, X[15], 13);\n\n  HH(&A, B, C, D, X[0], 3);\n  HH(&D, A, B, C, X[8], 9);\n  HH(&C, D, A, B, X[4], 11);\n  HH(&B, C, D, A, X[12], 15);\n  HH(&A, B, C, D, X[2], 3);\n  HH(&D, A, B, C, X[10], 9);\n  HH(&C, D, A, B, X[6], 11);\n  HH(&B, C, D, A, X[14], 15);\n  HH(&A, B, C, D, X[1], 3);\n  HH(&D, A, B, C, X[9], 9);\n  HH(&C, D, A, B, X[5], 11);\n  HH(&B, C, D, A, X[13], 15);\n  HH(&A, B, C, D, X[3], 3);\n  HH(&D, A, B, C, X[11], 9);\n  HH(&C, D, A, B, X[7], 11);\n  HH(&B, C, D, A, X[15], 15);\n\n  A += AA;\n  B += BB;\n  C += CC;\n  D += DD;\n}\n\n@group(0) @binding(0)\nvar<storage, read_write> result: vec4u;\n\n@compute @workgroup_size(1)\nfn main() {\n  // 'baaa' の md4 を計算\n  update(array<u32, 16>(\n    0x61616162u, 0x80u, 0u, 0u,\n    0u, 0u, 0u, 0u,\n    0u, 0u, 0u, 0u,\n    0u, 0u, 32u, 0u));\n  result = vec4u(A, B, C, D);\n}\n"}),u=t.createComputePipeline({layout:t.createPipelineLayout({bindGroupLayouts:[a]}),compute:{module:i,entryPoint:"main"}}),s=t.createCommandEncoder(),c=s.beginComputePass();c.setPipeline(u),c.setBindGroup(0,o),c.dispatchWorkgroups(1),c.end(),s.copyBufferToBuffer(n,0,r,0,16),t.queue.submit([s.finish()]),yield r.mapAsync(GPUMapMode.READ,0,16);const f=r.getMappedRange(0,16),l=new Uint8Array(f.slice(0));r.unmap();let d="";for(const e of l)d+=e.toString(16);console.log(d)},new((n=void 0)||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r},demo05:()=>{return e=void 0,t=void 0,a=function*(){const e=yield navigator.gpu.requestAdapter(),t=yield e.requestDevice(),n=t.createBuffer({size:r,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),a=t.createBuffer({size:r,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),o=performance.now(),i=t.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),u=t.createBindGroup({layout:i,entries:[{binding:0,resource:{buffer:n}}]}),s=t.createShaderModule({code:"\nfn F(X: u32, Y: u32, Z: u32) -> u32 {\n  return (X & Y) | (~X & Z);\n}\n\nfn G(X: u32, Y: u32, Z: u32) -> u32 {\n  return (X & Y) | (X & Z) | (Y & Z);\n}\n\nfn H(X: u32, Y: u32, Z: u32) -> u32 {\n  return X ^ Y ^ Z;\n}\n\nfn rotate(a: u32, s: u32) -> u32 {\n  return (a << s) | (a >> (32 - s));\n}\n\nfn FF(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + F(b, c, d) + x, s);\n}\n\nfn GG(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + G(b, c, d) + x + 0x5a827999u, s);\n}\n\nfn HH(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + H(b, c, d) + x + 0x6ed9eba1u, s);\n}\n\nvar<private> A: u32;\nvar<private> B: u32;\nvar<private> C: u32;\nvar<private> D: u32;\n\nfn update(X: array<u32, 16>) {\n  let AA = A;\n  let BB = B;\n  let CC = C;\n  let DD = D;\n\n  FF(&A, B, C, D, X[0], 3);\n  FF(&D, A, B, C, X[1], 7);\n  FF(&C, D, A, B, X[2], 11);\n  FF(&B, C, D, A, X[3], 19);\n  FF(&A, B, C, D, X[4], 3);\n  FF(&D, A, B, C, X[5], 7);\n  FF(&C, D, A, B, X[6], 11);\n  FF(&B, C, D, A, X[7], 19);\n  FF(&A, B, C, D, X[8], 3);\n  FF(&D, A, B, C, X[9], 7);\n  FF(&C, D, A, B, X[10], 11);\n  FF(&B, C, D, A, X[11], 19);\n  FF(&A, B, C, D, X[12], 3);\n  FF(&D, A, B, C, X[13], 7);\n  FF(&C, D, A, B, X[14], 11);\n  FF(&B, C, D, A, X[15], 19);\n\n  GG(&A, B, C, D, X[0], 3);\n  GG(&D, A, B, C, X[4], 5);\n  GG(&C, D, A, B, X[8], 9);\n  GG(&B, C, D, A, X[12], 13);\n  GG(&A, B, C, D, X[1], 3);\n  GG(&D, A, B, C, X[5], 5);\n  GG(&C, D, A, B, X[9], 9);\n  GG(&B, C, D, A, X[13], 13);\n  GG(&A, B, C, D, X[2], 3);\n  GG(&D, A, B, C, X[6], 5);\n  GG(&C, D, A, B, X[10], 9);\n  GG(&B, C, D, A, X[14], 13);\n  GG(&A, B, C, D, X[3], 3);\n  GG(&D, A, B, C, X[7], 5);\n  GG(&C, D, A, B, X[11], 9);\n  GG(&B, C, D, A, X[15], 13);\n\n  HH(&A, B, C, D, X[0], 3);\n  HH(&D, A, B, C, X[8], 9);\n  HH(&C, D, A, B, X[4], 11);\n  HH(&B, C, D, A, X[12], 15);\n  HH(&A, B, C, D, X[2], 3);\n  HH(&D, A, B, C, X[10], 9);\n  HH(&C, D, A, B, X[6], 11);\n  HH(&B, C, D, A, X[14], 15);\n  HH(&A, B, C, D, X[1], 3);\n  HH(&D, A, B, C, X[9], 9);\n  HH(&C, D, A, B, X[5], 11);\n  HH(&B, C, D, A, X[13], 15);\n  HH(&A, B, C, D, X[3], 3);\n  HH(&D, A, B, C, X[11], 9);\n  HH(&C, D, A, B, X[7], 11);\n  HH(&B, C, D, A, X[15], 15);\n\n  A += AA;\n  B += BB;\n  C += CC;\n  D += DD;\n}\n\n@group(0) @binding(0)\nvar<storage, read_write> result: array<u32>;\n\n@compute @workgroup_size(1 << 6)\nfn main(@builtin(global_invocation_id) global_id : vec3u) {\n  // ハッシュ値の先頭が 00000000 の入力を探す\n  for (var i = 0u; i < 1 << (32 - 14 - 6); i++) {\n    A = 0x67452301u;\n    B = 0xefcdab89u;\n    C = 0x98badcfeu;\n    D = 0x10325476u;\n\n    let word = (global_id.x << (32 - 14 - 6)) | i;\n    update(array<u32, 16>(\n      word, 0x80u, 0u, 0u,\n      0u, 0u, 0u, 0u,\n      0u, 0u, 0u, 0u,\n      0u, 0u, 32u, 0u));\n    if (A == 0x00000000u) {\n      result[global_id.x] = word;\n      //break;\n    }\n    //result[global_id.x] = select(result[global_id.x], word, A == 0x00000000u);\n  }\n}\n"}),c=t.createComputePipeline({layout:t.createPipelineLayout({bindGroupLayouts:[i]}),compute:{module:s,entryPoint:"main"}}),f=t.createCommandEncoder(),l=f.beginComputePass();l.setPipeline(c),l.setBindGroup(0,u),l.dispatchWorkgroups(16384),l.end(),f.copyBufferToBuffer(n,0,a,0,r),t.queue.submit([f.finish()]),yield a.mapAsync(GPUMapMode.READ,0,r);const d=a.getMappedRange(0,r),p=new Uint32Array(d.slice(0));a.unmap(),p.forEach((e=>{0!=e&&console.log(e)}));const g=performance.now();console.log(`duration: ${Math.round(g-o)} ms`),console.log(`hash rate: ${Math.round(1e3*Math.pow(2,32)/(g-o)/Math.pow(1024,3))} GH/s`)},new((n=void 0)||(n=Promise))((function(r,o){function i(e){try{s(a.next(e))}catch(e){o(e)}}function u(e){try{s(a.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((a=a.apply(e,t||[])).next())}));var e,t,n,a},demo06:()=>{return e=void 0,t=void 0,r=function*(){const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const t=e.getContext("webgpu"),n=yield navigator.gpu.requestAdapter(),r=yield n.requestDevice(),a=r.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) color : vec4f\n}\n\n@vertex\nfn vertex_main(@location(0) position: vec2f,\n               @location(1) offset: vec2f,\n               @location(2) color: vec4f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = vec4((position + offset) * 0.1, 0., 1.);\n  output.color = color;\n  return output;\n}\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return fragData.color;\n}\n"});t.configure({device:r,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const o=[];for(let e=0;e<100;e++)o.push(Math.floor(20*(Math.random()-.5)),Math.floor(20*(Math.random()-.5)));const i=new Float32Array(o),u=r.createBuffer({size:i.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(u,0,i,0,i.length);const s=new Float32Array([0,1,1,-1,-1,-1]),c=r.createBuffer({size:s.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(c,0,s,0,s.length);const f=new Float32Array([1,0,0,1,0,1,0,1,0,0,1,1]),l=r.createBuffer({size:f.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(l,0,f,0,f.length);const d={vertex:{module:a,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x2"}],arrayStride:8,stepMode:"instance"},{attributes:[{shaderLocation:1,offset:0,format:"float32x2"}],arrayStride:8,stepMode:"vertex"},{attributes:[{shaderLocation:2,offset:0,format:"float32x4"}],arrayStride:16,stepMode:"vertex"}]},fragment:{module:a,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list"},layout:"auto"},p=r.createRenderPipeline(d),g=r.createCommandEncoder(),m={colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store",view:t.getCurrentTexture().createView()}]},v=g.beginRenderPass(m);v.setPipeline(p),v.setVertexBuffer(0,u),v.setVertexBuffer(1,c),v.setVertexBuffer(2,l),v.draw(3,100),v.end(),r.queue.submit([g.finish()])},new((n=void 0)||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r},demo07:()=>{return e=void 0,t=void 0,r=function*(){const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const t=e.getContext("webgpu"),n=yield navigator.gpu.requestAdapter(),r=yield n.requestDevice(),o=r.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) uv : vec2f\n}\n\n@group(0) @binding(0) var<uniform> mvpMat: mat4x4f;\n\n@vertex\nfn vertex_main(@location(0) position: vec3f,\n               @location(1) uv: vec2f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = mvpMat * vec4(position, 1.0);\n  output.uv = uv;\n  return output;\n}\n\n@group(0) @binding(1) var mySampler: sampler;\n@group(0) @binding(2) var myTexture: texture_2d<f32>;\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return textureSample(myTexture, mySampler, fragData.uv);\n}\n"});t.configure({device:r,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const i=new Float32Array([-.5,.5,.5,.5,.5,.5,.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,-.5,.5,.5,-.5,-.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5,.5,.5,-.5,-.5,-.5,-.5,-.5,.5,.5,.5,.5,.5,-.5,.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,.5,-.5,.5,-.5,.5,.5,.5,-.5,.5,.5,.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5]),u=r.createBuffer({size:i.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(u,0,i,0,i.length);const s=new Float32Array([1/4,1/3,.5,1/3,.5,0,1/4,1/3,.5,0,1/4,0,1/4,2/3,1/4,1,.5,1,1/4,2/3,.5,1,.5,2/3,1/4,1/3,0,1/3,0,2/3,1/4,1/3,0,2/3,1/4,2/3,.5,1/3,.5,2/3,3/4,2/3,.5,1/3,3/4,2/3,3/4,1/3,1/4,1/3,1/4,2/3,.5,2/3,1/4,1/3,.5,2/3,.5,1/3,1,1/3,3/4,1/3,3/4,2/3,1,1/3,3/4,2/3,1,2/3]),c=r.createBuffer({size:s.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(c,0,s,0,s.length);const f=yield new Promise(((e,t)=>{const n=new Image;n.onload=()=>e(n),n.onerror=e=>t(e),n.src="./texture/dice.png"})),l=r.createTexture({size:[f.width,f.height,1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});r.queue.copyExternalImageToTexture({source:yield createImageBitmap(f)},{texture:l},[f.width,f.height]);const d=r.createSampler({magFilter:"linear",minFilter:"linear"}),p=r.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),g={vertex:{module:o,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x3"}],arrayStride:12,stepMode:"vertex"},{attributes:[{shaderLocation:1,offset:0,format:"float32x2"}],arrayStride:8,stepMode:"vertex"}]},fragment:{module:o,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list",cullMode:"back"},layout:"auto"},m=r.createRenderPipeline(g),v=r.createBindGroup({layout:m.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:p}},{binding:1,resource:d},{binding:2,resource:l.createView()}]}),h={r:0,g:0,b:0,a:1};let B=0,y=0;requestAnimationFrame((function n(){const o=new a(4,4,[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);B+=.01,y+=.015;const i=new a(4,4,[1,0,0,0,0,Math.cos(B),Math.sin(B),0,0,-Math.sin(B),Math.cos(B),0,0,0,0,1]),s=new a(4,4,[Math.cos(y),0,-Math.sin(y),0,0,1,0,0,Math.sin(y),0,Math.cos(y),0,0,0,0,1]),f=new a(4,4,[1,0,0,0,0,1,0,0,0,0,1,0,0,0,-2,1]),l=70/180*Math.PI,d=e.width/e.height,g=new a(4,4,[1/(d*Math.tan(l/2)),0,0,0,0,1/Math.tan(l/2),0,0,0,0,-100.5/99.5,-1,0,0,-100/99.5,0]),x=new Float32Array(g.mul(f).mul(s).mul(i).mul(o).toArray());r.queue.writeBuffer(p,0,x,0,x.length);const C={colorAttachments:[{clearValue:h,loadOp:"clear",storeOp:"store",view:t.getCurrentTexture().createView()}]},A=r.createCommandEncoder(),P=A.beginRenderPass(C);P.setPipeline(m),P.setVertexBuffer(0,u),P.setVertexBuffer(1,c),P.setBindGroup(0,v),P.draw(36),P.end(),r.queue.submit([A.finish()]),requestAnimationFrame(n)}))},new((n=void 0)||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r},demo08:()=>{return e=void 0,t=void 0,r=function*(){const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const t=e.getContext("webgpu"),n=yield navigator.gpu.requestAdapter(),r=yield n.requestDevice(),a=r.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) uv : vec2f\n}\n\n@group(0) @binding(0) var<uniform> mvpMat: mat4x4f;\n\n@vertex\nfn vertex_main(@location(0) position: vec3f,\n               @location(1) uv: vec2f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = mvpMat * vec4(position, 1.0);\n  output.uv = uv;\n  return output;\n}\n\n@group(0) @binding(1) var mySampler: sampler;\n@group(0) @binding(2) var myTexture: texture_2d_array<f32>;\n@group(0) @binding(3) var<uniform> textureId: u32;\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return textureSample(myTexture, mySampler, fragData.uv, textureId);\n}\n"});t.configure({device:r,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const u=new Float32Array([-.5,.5,.5,.5,.5,.5,.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,-.5,.5,.5,-.5,-.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5,.5,.5,-.5,-.5,-.5,-.5,-.5,.5,.5,.5,.5,.5,-.5,.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,.5,-.5,.5,-.5,.5,.5,.5,-.5,.5,.5,.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5]),s=r.createBuffer({size:u.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(s,0,u,0,u.length);const c=new Float32Array([1/4,1/3,.5,1/3,.5,0,1/4,1/3,.5,0,1/4,0,1/4,2/3,1/4,1,.5,1,1/4,2/3,.5,1,.5,2/3,1/4,1/3,0,1/3,0,2/3,1/4,1/3,0,2/3,1/4,2/3,.5,1/3,.5,2/3,3/4,2/3,.5,1/3,3/4,2/3,3/4,1/3,1/4,1/3,1/4,2/3,.5,2/3,1/4,1/3,.5,2/3,.5,1/3,1,1/3,3/4,1/3,3/4,2/3,1,1/3,3/4,2/3,1,2/3]),f=r.createBuffer({size:c.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(f,0,c,0,c.length);const l=yield i("./texture/dice.png"),d=yield i("./texture/dice2.png"),p=r.createBuffer({size:393216,usage:GPUBufferUsage.COPY_SRC,mappedAtCreation:!0}),g=new Uint8Array(p.getMappedRange()),m=document.createElement("canvas");m.width=256,m.height=192;const v=m.getContext("2d");v.drawImage(l,0,0),g.set(v.getImageData(0,0,256,192).data,0),v.drawImage(d,0,0),g.set(v.getImageData(0,0,256,192).data,196608),p.unmap();const h=r.createTexture({size:[256,192,2],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT}),B=r.createSampler({magFilter:"linear",minFilter:"linear"}),y=r.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),x=r.createBuffer({size:4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),C={vertex:{module:a,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x3"}],arrayStride:12,stepMode:"vertex"},{attributes:[{shaderLocation:1,offset:0,format:"float32x2"}],arrayStride:8,stepMode:"vertex"}]},fragment:{module:a,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list",cullMode:"back"},layout:"auto"},A=r.createRenderPipeline(C),P=r.createBindGroup({layout:A.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:y}},{binding:1,resource:B},{binding:2,resource:h.createView()},{binding:3,resource:{buffer:x}}]}),b={r:0,g:0,b:0,a:1};let w=0,G=0;const D=performance.now();requestAnimationFrame((function n(){const a=new o(4,4,[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);w+=.01,G+=.015;const i=new o(4,4,[1,0,0,0,0,Math.cos(w),Math.sin(w),0,0,-Math.sin(w),Math.cos(w),0,0,0,0,1]),u=new o(4,4,[Math.cos(G),0,-Math.sin(G),0,0,1,0,0,Math.sin(G),0,Math.cos(G),0,0,0,0,1]),c=new o(4,4,[1,0,0,0,0,1,0,0,0,0,1,0,0,0,-2,1]),l=70/180*Math.PI,d=e.width/e.height,g=new o(4,4,[1/(d*Math.tan(l/2)),0,0,0,0,1/Math.tan(l/2),0,0,0,0,-100.5/99.5,-1,0,0,-100/99.5,0]),m=new Float32Array(g.mul(c).mul(u).mul(i).mul(a).toArray());r.queue.writeBuffer(y,0,m,0,m.length);const v=(performance.now()-D)/5e3%2;r.queue.writeBuffer(x,0,new Uint32Array([v]),0,1);const B={colorAttachments:[{clearValue:b,loadOp:"clear",storeOp:"store",view:t.getCurrentTexture().createView()}]},C=r.createCommandEncoder();C.copyBufferToTexture({buffer:p,bytesPerRow:1024,rowsPerImage:192},{texture:h},{width:256,height:192,depthOrArrayLayers:2});const U=C.beginRenderPass(B);U.setPipeline(A),U.setVertexBuffer(0,s),U.setVertexBuffer(1,f),U.setBindGroup(0,P),U.draw(36),U.end(),r.queue.submit([C.finish()]),requestAnimationFrame(n)}))},new((n=void 0)||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r}};function s(){const e=document.body.appendChild(document.createElement("ul"));for(const t in u){const n=e.appendChild(document.createElement("li")).appendChild(document.createElement("a"));n.href="./index.html?page="+t,n.textContent=t}}window.onload=()=>{return e=void 0,t=void 0,r=function*(){(u[new URL(window.location.href).searchParams.get("page")]||s)()},new((n=void 0)||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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WCxJQUFNLEdBQUssSUFDWCxJQUFNLElBQU0sR0FDYixJQUFNLElBQU0sSUFDWCxJQUFNLEdBQUssR0FDWixJQUFNLElBQU0sR0FDWixJQUFNLEdBQUssSUFFVixHQUFLLEdBQUssSUFDVixHQUFLLElBQU0sSUFDWCxJQUFNLElBQU0sSUFDWixHQUFLLEdBQUssSUFDVixJQUFNLElBQU0sSUFDWixJQUFNLEdBQUssR0FFWixHQUFLLEdBQUssR0FDVixJQUFNLEdBQUssR0FDWCxJQUFNLElBQU0sR0FDWixHQUFLLEdBQUssR0FDVixJQUFNLElBQU0sR0FDWixHQUFLLElBQU0sSUFFVixHQUFLLEdBQUssSUFDVixJQUFNLEdBQUssR0FDWixJQUFNLEdBQUssSUFDVixHQUFLLEdBQUssR0FDWCxJQUFNLEdBQUssR0FDWCxHQUFLLEdBQUssSUFFVCxHQUFLLElBQU0sR0FDWixHQUFLLElBQU0sR0FDWCxJQUFNLElBQU0sSUFDWCxHQUFLLElBQU0sR0FDWixJQUFNLElBQU0sSUFDWCxJQUFNLElBQU0sS0FHVEMsRUFBZVgsRUFBT1ksYUFBYSxDQUN2Q0MsS0FBTUosRUFBU0ssV0FDZkMsTUFBT0MsZUFBZUMsT0FBU0QsZUFBZUUsV0FFaERsQixFQUFPbUIsTUFBTUMsWUFBWVQsRUFBYyxFQUFHRixFQUFVLEVBQUdBLEVBQVNqRCxRQUdoRSxNQUFNMkssRUFBSyxJQUFJekgsYUFBYSxDQUUxQixFQUFJLEVBQUcsRUFBSSxFQUNYLEdBQU8sRUFBSSxFQUNYLEdBQU8sRUFDUCxFQUFJLEVBQUcsRUFBSSxFQUNYLEdBQU8sRUFDUCxFQUFJLEVBQUcsRUFFUCxFQUFJLEVBQUcsRUFBSSxFQUNYLEVBQUksRUFBRyxFQUNQLEdBQU8sRUFDUCxFQUFJLEVBQUcsRUFBSSxFQUNYLEdBQU8sRUFDUCxHQUFPLEVBQUksRUFFWCxFQUFJLEVBQUcsRUFBSSxFQUNYLEVBQU8sRUFBSSxFQUNYLEVBQU8sRUFBSSxFQUNYLEVBQUksRUFBRyxFQUFJLEVBQ1gsRUFBTyxFQUFJLEVBQ1gsRUFBSSxFQUFHLEVBQUksRUFFWCxHQUFP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T0FBTy9NLE9BQVMsS0FBWSxPLE9BQUEsRSxPQUFBLEUsRUFBQSxhQUN6QkcsRUFBTSxJQUFJNk0sSUFBSUQsT0FBT0UsU0FBU0osTUFBTUssYUFBYUMsSUFBSSxVQUFZVCxJQUNwRSxFLFlBRjRCLEssNlFBRTNCLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AdHRrMS93ZWJncHUtcHJhY3RpY2UvLi9zcmMvYmFzaWNfcmVuZGVyX3BpcGVsaW5lL21haW4udHMiLCJ3ZWJwYWNrOi8vQHR0azEvd2ViZ3B1LXByYWN0aWNlLy4vc3JjL2Jhc2ljX2NvbXB1dGVfcGlwZWxpbmUvc2hhZGVyLndnc2wudHMiLCJ3ZWJwYWNrOi8vQHR0azEvd2ViZ3B1LXByYWN0aWNlLy4vc3JjL2RlbW8wMi9tYWluLnRzIiwid2VicGFjazovL0B0dGsxL3dlYmdwdS1wcmFjdGljZS8uL3NyYy9kZW1vMDMvbWFpbi50cyIsIndlYnBhY2s6Ly9AdHRrMS93ZWJncHUtcHJhY3RpY2UvLi9zcmMvZGVtbzA1L21haW4udHMiLCJ3ZWJwYWNrOi8vQHR0azEvd2ViZ3B1LXByYWN0aWNlLy4vc3JjL2RlbW8wNy9tYXRyaXgudHMiLCJ3ZWJwYWNrOi8vQHR0azEvd2ViZ3B1LXByYWN0aWNlLy4vc3JjL2RlbW8wOC9tYXRyaXgudHMiLCJ3ZWJwYWNrOi8vQHR0azEvd2ViZ3B1LXByYWN0aWNlLy4vc3JjL2RlbW8wOC9tYWluLnRzIiwid2VicGFjazovL0B0dGsxL3dlYmdwdS1wcmFjdGljZS8uL3NyYy9tYWluLnRzIiwid2VicGFjazovL0B0dGsxL3dlYmdwdS1wcmFjdGljZS8uL3NyYy9iYXNpY19yZW5kZXJfcGlwZWxpbmUvc2hhZGVyLndnc2wudHMiLCJ3ZWJwYWNrOi8vQHR0azEvd2ViZ3B1LXByYWN0aWNlLy4vc3JjL2Jhc2ljX2NvbXB1dGVfcGlwZWxpbmUvbWFpbi50cyIsIndlYnBhY2s6Ly9AdHRrMS93ZWJncHUtcHJhY3RpY2UvLi9zcmMvZGVtbzAxL21haW4udHMiLCJ3ZWJwYWNrOi8vQHR0azEvd2ViZ3B1LXByYWN0aWNlLy4vc3JjL2RlbW8wMS9zaGFkZXIud2dzbC50cyIsIndlYnBhY2s6Ly9AdHRrMS93ZWJncHUtcHJhY3RpY2UvLi9zcmMvZGVtbzAyL3NoYWRlci53Z3NsLnRzIiwid2VicGFjazovL0B0dGsxL3dlYmdwdS1wcmFjdGljZS8uL3NyYy9kZW1vMDMvc2hhZGVyLndnc2wudHMiLCJ3ZWJwYWNrOi8vQHR0azEvd2ViZ3B1LXByYWN0aWNlLy4vc3JjL2RlbW8wNC9tYWluLnRzIiwid2VicGFjazovL0B0dGsxL3dlYmdwdS1wcmFjdGljZS8uL3NyYy9kZW1vMDQvc2hhZGVyLndnc2wudHMiLCJ3ZWJwYWNrOi8vQHR0azEvd2ViZ3B1LXByYWN0aWNlLy4vc3JjL2RlbW8wNS9zaGFkZXIud2dzbC50cyIsIndlYnBhY2s6Ly9AdHRrMS93ZWJncHUtcHJhY3RpY2UvLi9zcmMvZGVtbzA2L21haW4udHMiLCJ3ZWJwYWNrOi8vQHR0azEvd2ViZ3B1LXByYWN0aWNlLy4vc3JjL2RlbW8wNi9zaGFkZXIud2dzbC50cyIsIndlYnBhY2s6Ly9AdHRrMS93ZWJncHUtcHJhY3RpY2UvLi9zcmMvZGVtbzA3L21haW4udHMiLCJ3ZWJwYWNrOi8vQHR0azEvd2ViZ3B1LXByYWN0aWNlLy4vc3JjL2RlbW8wNy9zaGFkZXIud2dzbC50cyIsIndlYnBhY2s6Ly9AdHRrMS93ZWJncHUtcHJhY3RpY2UvLi9zcmMvZGVtbzA4L3NoYWRlci53Z3NsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBzaGFkZXIgZnJvbSAnLi9zaGFkZXIud2dzbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jICgpID0+IHtcbiAgY29uc29sZS5sb2coJ2hlbGxvLCB3b3JsZCEnKTtcblxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2ViR1BVX0FQSSNiYXNpY19yZW5kZXJfcGlwZWxpbmVcblxuICBjb25zdCBjdnMgPSBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpKTtcbiAgY3ZzLndpZHRoID0gNTAwO1xuICBjdnMuaGVpZ2h0ID0gNTAwO1xuXG4gIGNvbnN0IGN0eCA9IGN2cy5nZXRDb250ZXh0KCd3ZWJncHUnKTtcblxuICBjb25zdCBhZGFwdGVyID0gYXdhaXQgbmF2aWdhdG9yLmdwdS5yZXF1ZXN0QWRhcHRlcigpO1xuICBjb25zdCBkZXZpY2UgPSBhd2FpdCBhZGFwdGVyLnJlcXVlc3REZXZpY2UoKTtcblxuICBjb25zdCBzaGFkZXJNb2R1bGUgPSBkZXZpY2UuY3JlYXRlU2hhZGVyTW9kdWxlKHtcbiAgICBjb2RlOiBzaGFkZXIsXG4gIH0pO1xuXG4gIGN0eC5jb25maWd1cmUoe1xuICAgIGRldmljZTogZGV2aWNlLFxuICAgIGZvcm1hdDogbmF2aWdhdG9yLmdwdS5nZXRQcmVmZXJyZWRDYW52YXNGb3JtYXQoKSxcbiAgICBhbHBoYU1vZGU6ICdwcmVtdWx0aXBsaWVkJyxcbiAgfSk7XG5cbiAgY29uc3QgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAwLjAsIDAuNiwgMCwgMSwgMSwgMCwgMCwgMSwgLTAuNSwgLTAuNiwgMCwgMSwgMCwgMSwgMCwgMSwgMC41LCAtMC42LCAwLCAxLCAwLFxuICAgIDAsIDEsIDEsXG4gIF0pO1xuXG4gIGNvbnN0IHZlcnRleEJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoe1xuICAgIHNpemU6IHZlcnRpY2VzLmJ5dGVMZW5ndGgsIC8vIG1ha2UgaXQgYmlnIGVub3VnaCB0byBzdG9yZSB2ZXJ0aWNlcyBpblxuICAgIHVzYWdlOiBHUFVCdWZmZXJVc2FnZS5WRVJURVggfCBHUFVCdWZmZXJVc2FnZS5DT1BZX0RTVCxcbiAgfSk7XG5cbiAgZGV2aWNlLnF1ZXVlLndyaXRlQnVmZmVyKHZlcnRleEJ1ZmZlciwgMCwgdmVydGljZXMsIDAsIHZlcnRpY2VzLmxlbmd0aCk7XG5cbiAgY29uc3QgdmVydGV4QnVmZmVyczogR1BVVmVydGV4QnVmZmVyTGF5b3V0W10gPSBbXG4gICAge1xuICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICB7XG4gICAgICAgICAgc2hhZGVyTG9jYXRpb246IDAsIC8vIHBvc2l0aW9uXG4gICAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICAgIGZvcm1hdDogJ2Zsb2F0MzJ4NCcsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBzaGFkZXJMb2NhdGlvbjogMSwgLy8gY29sb3JcbiAgICAgICAgICBvZmZzZXQ6IDE2LFxuICAgICAgICAgIGZvcm1hdDogJ2Zsb2F0MzJ4NCcsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgYXJyYXlTdHJpZGU6IDMyLFxuICAgICAgc3RlcE1vZGU6ICd2ZXJ0ZXgnLFxuICAgIH0sXG4gIF07XG5cbiAgY29uc3QgcGlwZWxpbmVEZXNjcmlwdG9yOiBHUFVSZW5kZXJQaXBlbGluZURlc2NyaXB0b3IgPSB7XG4gICAgdmVydGV4OiB7XG4gICAgICBtb2R1bGU6IHNoYWRlck1vZHVsZSxcbiAgICAgIGVudHJ5UG9pbnQ6ICd2ZXJ0ZXhfbWFpbicsXG4gICAgICBidWZmZXJzOiB2ZXJ0ZXhCdWZmZXJzLFxuICAgIH0sXG4gICAgZnJhZ21lbnQ6IHtcbiAgICAgIG1vZHVsZTogc2hhZGVyTW9kdWxlLFxuICAgICAgZW50cnlQb2ludDogJ2ZyYWdtZW50X21haW4nLFxuICAgICAgdGFyZ2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgZm9ybWF0OiBuYXZpZ2F0b3IuZ3B1LmdldFByZWZlcnJlZENhbnZhc0Zvcm1hdCgpLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIHByaW1pdGl2ZToge1xuICAgICAgdG9wb2xvZ3k6ICd0cmlhbmdsZS1saXN0JyxcbiAgICB9LFxuICAgIGxheW91dDogJ2F1dG8nLFxuICB9O1xuXG4gIGNvbnN0IHJlbmRlclBpcGVsaW5lID0gZGV2aWNlLmNyZWF0ZVJlbmRlclBpcGVsaW5lKHBpcGVsaW5lRGVzY3JpcHRvcik7XG5cbiAgY29uc3QgY29tbWFuZEVuY29kZXIgPSBkZXZpY2UuY3JlYXRlQ29tbWFuZEVuY29kZXIoKTtcblxuICBjb25zdCBjbGVhckNvbG9yID0geyByOiAwLjAsIGc6IDAuNSwgYjogMS4wLCBhOiAxLjAgfTtcblxuICBjb25zdCByZW5kZXJQYXNzRGVzY3JpcHRvcjogR1BVUmVuZGVyUGFzc0Rlc2NyaXB0b3IgPSB7XG4gICAgY29sb3JBdHRhY2htZW50czogW1xuICAgICAge1xuICAgICAgICBjbGVhclZhbHVlOiBjbGVhckNvbG9yLFxuICAgICAgICBsb2FkT3A6ICdjbGVhcicsXG4gICAgICAgIHN0b3JlT3A6ICdzdG9yZScsXG4gICAgICAgIHZpZXc6IGN0eC5nZXRDdXJyZW50VGV4dHVyZSgpLmNyZWF0ZVZpZXcoKSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfTtcblxuICBjb25zdCBwYXNzRW5jb2RlciA9IGNvbW1hbmRFbmNvZGVyLmJlZ2luUmVuZGVyUGFzcyhyZW5kZXJQYXNzRGVzY3JpcHRvcik7XG5cbiAgcGFzc0VuY29kZXIuc2V0UGlwZWxpbmUocmVuZGVyUGlwZWxpbmUpO1xuICBwYXNzRW5jb2Rlci5zZXRWZXJ0ZXhCdWZmZXIoMCwgdmVydGV4QnVmZmVyKTtcbiAgcGFzc0VuY29kZXIuZHJhdygzKTtcblxuICBwYXNzRW5jb2Rlci5lbmQoKTtcblxuICBkZXZpY2UucXVldWUuc3VibWl0KFtjb21tYW5kRW5jb2Rlci5maW5pc2goKV0pO1xufTtcbiIsImV4cG9ydCBjb25zdCBCVUZGRVJfU0laRSA9IDEwMDA7XG5cbmV4cG9ydCBkZWZhdWx0IGBcbkBncm91cCgwKSBAYmluZGluZygwKVxudmFyPHN0b3JhZ2UsIHJlYWRfd3JpdGU+IG91dHB1dDogYXJyYXk8ZjMyPjtcblxuQGNvbXB1dGUgQHdvcmtncm91cF9zaXplKDY0KVxuZm4gbWFpbihcbiAgQGJ1aWx0aW4oZ2xvYmFsX2ludm9jYXRpb25faWQpXG4gIGdsb2JhbF9pZCA6IHZlYzN1LFxuXG4gIEBidWlsdGluKGxvY2FsX2ludm9jYXRpb25faWQpXG4gIGxvY2FsX2lkIDogdmVjM3UsXG4pIHtcbiAgLy8gQXZvaWQgYWNjZXNzaW5nIHRoZSBidWZmZXIgb3V0IG9mIGJvdW5kc1xuICBpZiAoZ2xvYmFsX2lkLnggPj0gJHtCVUZGRVJfU0laRX0pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBvdXRwdXRbZ2xvYmFsX2lkLnhdID1cbiAgICBmMzIoZ2xvYmFsX2lkLngpICogMTAwMC4gKyBmMzIobG9jYWxfaWQueCk7XG59XG5gO1xuIiwiaW1wb3J0IHNoYWRlciBmcm9tICcuL3NoYWRlci53Z3NsJztcblxuY29uc3QgQlVGRkVSX1NJWkUgPSAxMDAwO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKCdoZWxsbywgd29ybGQhJyk7XG5cbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYkdQVV9BUEkjYmFzaWNfY29tcHV0ZV9waXBlbGluZVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhd2FpdCBuYXZpZ2F0b3IuZ3B1LnJlcXVlc3RBZGFwdGVyKCk7XG4gIGNvbnN0IGRldmljZSA9IGF3YWl0IGFkYXB0ZXIucmVxdWVzdERldmljZSgpO1xuXG5cbiAgY29uc3Qgb3V0cHV0ID0gZGV2aWNlLmNyZWF0ZUJ1ZmZlcih7XG4gICAgc2l6ZTogQlVGRkVSX1NJWkUsXG4gICAgdXNhZ2U6IEdQVUJ1ZmZlclVzYWdlLlNUT1JBR0UgfCBHUFVCdWZmZXJVc2FnZS5DT1BZX1NSQyxcbiAgfSk7XG5cbiAgY29uc3QgYmluZEdyb3VwTGF5b3V0ID0gZGV2aWNlLmNyZWF0ZUJpbmRHcm91cExheW91dCh7XG4gICAgZW50cmllczogW1xuICAgICAge1xuICAgICAgICBiaW5kaW5nOiAwLFxuICAgICAgICB2aXNpYmlsaXR5OiBHUFVTaGFkZXJTdGFnZS5DT01QVVRFLFxuICAgICAgICBidWZmZXI6IHtcbiAgICAgICAgICB0eXBlOiAnc3RvcmFnZScsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xuXG4gIGNvbnN0IGJpbmRHcm91cCA9IGRldmljZS5jcmVhdGVCaW5kR3JvdXAoe1xuICAgIGxheW91dDogYmluZEdyb3VwTGF5b3V0LFxuICAgIGVudHJpZXM6IFtcbiAgICAgIHtcbiAgICAgICAgYmluZGluZzogMCxcbiAgICAgICAgcmVzb3VyY2U6IHtcbiAgICAgICAgICBidWZmZXI6IG91dHB1dCxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSk7XG5cbiAgY29uc3Qgc2hhZGVyTW9kdWxlID0gZGV2aWNlLmNyZWF0ZVNoYWRlck1vZHVsZSh7XG4gICAgY29kZTogc2hhZGVyLFxuICB9KTtcblxuICBjb25zdCBjb21tYW5kRW5jb2RlciA9IGRldmljZS5jcmVhdGVDb21tYW5kRW5jb2RlcigpO1xuXG5cbiAgLy8g44OQ44OD44OV44Kh44Gu5Yid5pyf5YyWXG5cbiAgY29uc3QgY29tcHV0ZVBpcGVsaW5lID0gZGV2aWNlLmNyZWF0ZUNvbXB1dGVQaXBlbGluZSh7XG4gICAgbGF5b3V0OiBkZXZpY2UuY3JlYXRlUGlwZWxpbmVMYXlvdXQoe1xuICAgICAgYmluZEdyb3VwTGF5b3V0czogW2JpbmRHcm91cExheW91dF0sXG4gICAgfSksXG4gICAgY29tcHV0ZToge1xuICAgICAgbW9kdWxlOiBzaGFkZXJNb2R1bGUsXG4gICAgICBlbnRyeVBvaW50OiAnaW5pdCcsXG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3QgY29tcHV0ZVBhc3MgPSBjb21tYW5kRW5jb2Rlci5iZWdpbkNvbXB1dGVQYXNzKCk7XG4gIGNvbXB1dGVQYXNzLnNldFBpcGVsaW5lKGNvbXB1dGVQaXBlbGluZSk7XG4gIGNvbXB1dGVQYXNzLnNldEJpbmRHcm91cCgwLCBiaW5kR3JvdXApO1xuICBjb21wdXRlUGFzcy5kaXNwYXRjaFdvcmtncm91cHMoTWF0aC5jZWlsKEJVRkZFUl9TSVpFIC8gNjQpKTtcbiAgY29tcHV0ZVBhc3MuZW5kKCk7XG5cblxuICAvLyDlgKTjga7jgqTjg7Pjgq/jg6rjg6Hjg7Pjg4jlh6bnkIbjgpLlrp/ooYxcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICBjb25zdCBjb21wdXRlUGlwZWxpbmUgPSBkZXZpY2UuY3JlYXRlQ29tcHV0ZVBpcGVsaW5lKHtcbiAgICAgIGxheW91dDogZGV2aWNlLmNyZWF0ZVBpcGVsaW5lTGF5b3V0KHtcbiAgICAgICAgYmluZEdyb3VwTGF5b3V0czogW2JpbmRHcm91cExheW91dF0sXG4gICAgICB9KSxcbiAgICAgIGNvbXB1dGU6IHtcbiAgICAgICAgbW9kdWxlOiBzaGFkZXJNb2R1bGUsXG4gICAgICAgIGVudHJ5UG9pbnQ6ICdpbmNyZW1lbnQnLFxuICAgICAgfSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGNvbXB1dGVQYXNzID0gY29tbWFuZEVuY29kZXIuYmVnaW5Db21wdXRlUGFzcygpO1xuICAgIGNvbXB1dGVQYXNzLnNldFBpcGVsaW5lKGNvbXB1dGVQaXBlbGluZSk7XG4gICAgY29tcHV0ZVBhc3Muc2V0QmluZEdyb3VwKDAsIGJpbmRHcm91cCk7XG4gICAgY29tcHV0ZVBhc3MuZGlzcGF0Y2hXb3JrZ3JvdXBzKE1hdGguY2VpbChCVUZGRVJfU0laRSAvIDY0KSk7XG4gICAgY29tcHV0ZVBhc3MuZW5kKCk7XG4gIH1cblxuXG4gIC8vIOe1kOaenOOBruWPluOCiuWHuuOBl1xuXG4gIGNvbnN0IHN0YWdpbmdCdWZmZXIgPSBkZXZpY2UuY3JlYXRlQnVmZmVyKHtcbiAgICBzaXplOiBCVUZGRVJfU0laRSxcbiAgICB1c2FnZTogR1BVQnVmZmVyVXNhZ2UuTUFQX1JFQUQgfCBHUFVCdWZmZXJVc2FnZS5DT1BZX0RTVCxcbiAgfSk7XG5cbiAgLy8gQ29weSBvdXRwdXQgYnVmZmVyIHRvIHN0YWdpbmcgYnVmZmVyXG4gIGNvbW1hbmRFbmNvZGVyLmNvcHlCdWZmZXJUb0J1ZmZlcihcbiAgICBvdXRwdXQsXG4gICAgMCwgLy8gU291cmNlIG9mZnNldFxuICAgIHN0YWdpbmdCdWZmZXIsXG4gICAgMCwgLy8gRGVzdGluYXRpb24gb2Zmc2V0XG4gICAgQlVGRkVSX1NJWkVcbiAgKTtcblxuICAvLyBFbmQgZnJhbWUgYnkgcGFzc2luZyBhcnJheSBvZiBjb21tYW5kIGJ1ZmZlcnMgdG8gY29tbWFuZCBxdWV1ZSBmb3IgZXhlY3V0aW9uXG4gIGRldmljZS5xdWV1ZS5zdWJtaXQoW2NvbW1hbmRFbmNvZGVyLmZpbmlzaCgpXSk7XG5cbiAgLy8gbWFwIHN0YWdpbmcgYnVmZmVyIHRvIHJlYWQgcmVzdWx0cyBiYWNrIHRvIEpTXG4gIGF3YWl0IHN0YWdpbmdCdWZmZXIubWFwQXN5bmMoXG4gICAgR1BVTWFwTW9kZS5SRUFELFxuICAgIDAsIC8vIE9mZnNldFxuICAgIEJVRkZFUl9TSVpFIC8vIExlbmd0aFxuICApO1xuXG4gIGNvbnN0IGNvcHlBcnJheUJ1ZmZlciA9IHN0YWdpbmdCdWZmZXIuZ2V0TWFwcGVkUmFuZ2UoMCwgQlVGRkVSX1NJWkUpO1xuICBjb25zdCBkYXRhID0gY29weUFycmF5QnVmZmVyLnNsaWNlKDApO1xuICBzdGFnaW5nQnVmZmVyLnVubWFwKCk7XG4gIGNvbnNvbGUubG9nKG5ldyBGbG9hdDMyQXJyYXkoZGF0YSkpO1xufTtcbiIsImltcG9ydCBzaGFkZXIgZnJvbSAnLi9zaGFkZXIud2dzbCc7XG4vKipcbiAqIFBhcnRpY2xlXG4gKi9cbmNvbnN0IE5VTV9QQVJUSUNMRVMgPSA1MF8wMDA7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jICgpID0+IHtcbiAgY29uc29sZS5sb2coJ2hlbGxvLCB3b3JsZCEnKTtcblxuICBjb25zdCBjdnMgPSBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpKTtcbiAgY3ZzLndpZHRoID0gNTAwO1xuICBjdnMuaGVpZ2h0ID0gNTAwO1xuXG4gIGNvbnN0IGN0eCA9IGN2cy5nZXRDb250ZXh0KCd3ZWJncHUnKTtcblxuICBjb25zdCBhZGFwdGVyID0gYXdhaXQgbmF2aWdhdG9yLmdwdS5yZXF1ZXN0QWRhcHRlcigpO1xuICBjb25zdCBkZXZpY2UgPSBhd2FpdCBhZGFwdGVyLnJlcXVlc3REZXZpY2UoKTtcbiAgY29uc3Qgc2hhZGVyTW9kdWxlID0gZGV2aWNlLmNyZWF0ZVNoYWRlck1vZHVsZSh7XG4gICAgY29kZTogc2hhZGVyLFxuICB9KTtcblxuICBjdHguY29uZmlndXJlKHtcbiAgICBkZXZpY2U6IGRldmljZSxcbiAgICBmb3JtYXQ6IG5hdmlnYXRvci5ncHUuZ2V0UHJlZmVycmVkQ2FudmFzRm9ybWF0KCksXG4gICAgYWxwaGFNb2RlOiAncHJlbXVsdGlwbGllZCcsXG4gIH0pO1xuXG5cbiAgLy8g44OQ44OD44OV44Kh44Gu5Yid5pyf5YyWXG5cbiAgY29uc3QgcGFydGljbGVzOiBudW1iZXJbXSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IE5VTV9QQVJUSUNMRVM7IGkrKykge1xuICAgIC8vIHBvc2l0aW9uXG4gICAgcGFydGljbGVzLnB1c2goKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMik7XG4gICAgcGFydGljbGVzLnB1c2goKE1hdGgucmFuZG9tKCkgLSAwLjUpICogMik7XG4gICAgLy8gdmVsb2NpdHlcbiAgICBwYXJ0aWNsZXMucHVzaCgwLjApO1xuICAgIHBhcnRpY2xlcy5wdXNoKDAuMCk7XG4gIH1cblxuICBjb25zdCBwYXJ0aWNsZUJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoe1xuICAgIHNpemU6IEZsb2F0MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCAqIE5VTV9QQVJUSUNMRVMgKiA0LFxuICAgIHVzYWdlOiBHUFVCdWZmZXJVc2FnZS5WRVJURVggfCBHUFVCdWZmZXJVc2FnZS5DT1BZX0RTVCB8IEdQVUJ1ZmZlclVzYWdlLlNUT1JBR0UsXG4gIH0pO1xuICBkZXZpY2UucXVldWUud3JpdGVCdWZmZXIocGFydGljbGVCdWZmZXIsIDAsIG5ldyBGbG9hdDMyQXJyYXkocGFydGljbGVzKSwgMCwgTlVNX1BBUlRJQ0xFUyk7XG5cblxuICAvLyByZW5kZXIgcGlwZWxpbmUg44Gu6Kit5a6aXG5cbiAgY29uc3QgcGFydGljbGVCdWZmZXJMYXlvdXQ6IEdQVVZlcnRleEJ1ZmZlckxheW91dFtdID0gW1xuICAgIHtcbiAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIC8vIHBvc2l0aW9uXG4gICAgICAgICAgc2hhZGVyTG9jYXRpb246IDAsXG4gICAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICAgIGZvcm1hdDogJ2Zsb2F0MzJ4MicsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAvLyB2ZWxvY2l0eVxuICAgICAgICAgIHNoYWRlckxvY2F0aW9uOiAxLFxuICAgICAgICAgIG9mZnNldDogOCxcbiAgICAgICAgICBmb3JtYXQ6ICdmbG9hdDMyeDInLFxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgYXJyYXlTdHJpZGU6IDE2LFxuICAgICAgc3RlcE1vZGU6ICd2ZXJ0ZXgnLFxuICAgIH0sXG4gIF07XG5cbiAgY29uc3QgcGlwZWxpbmVEZXNjcmlwdG9yOiBHUFVSZW5kZXJQaXBlbGluZURlc2NyaXB0b3IgPSB7XG4gICAgdmVydGV4OiB7XG4gICAgICBtb2R1bGU6IHNoYWRlck1vZHVsZSxcbiAgICAgIGVudHJ5UG9pbnQ6ICd2ZXJ0ZXhfbWFpbicsXG4gICAgICBidWZmZXJzOiBwYXJ0aWNsZUJ1ZmZlckxheW91dCxcbiAgICB9LFxuICAgIGZyYWdtZW50OiB7XG4gICAgICBtb2R1bGU6IHNoYWRlck1vZHVsZSxcbiAgICAgIGVudHJ5UG9pbnQ6ICdmcmFnbWVudF9tYWluJyxcbiAgICAgIHRhcmdldHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGZvcm1hdDogbmF2aWdhdG9yLmdwdS5nZXRQcmVmZXJyZWRDYW52YXNGb3JtYXQoKSxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgfSxcbiAgICBwcmltaXRpdmU6IHtcbiAgICAgIHRvcG9sb2d5OiAncG9pbnQtbGlzdCcsXG4gICAgfSxcbiAgICBsYXlvdXQ6ICdhdXRvJyxcbiAgfTtcblxuICBjb25zdCByZW5kZXJQaXBlbGluZSA9IGRldmljZS5jcmVhdGVSZW5kZXJQaXBlbGluZShwaXBlbGluZURlc2NyaXB0b3IpO1xuICBjb25zdCBjbGVhckNvbG9yID0geyByOiAwLjAsIGc6IDAuMCwgYjogMC4wLCBhOiAxLjAgfTtcbiAgY29uc3QgcmVuZGVyUGFzc0Rlc2NyaXB0b3I6IEdQVVJlbmRlclBhc3NEZXNjcmlwdG9yID0ge1xuICAgIGNvbG9yQXR0YWNobWVudHM6IFtcbiAgICAgIHtcbiAgICAgICAgY2xlYXJWYWx1ZTogY2xlYXJDb2xvcixcbiAgICAgICAgbG9hZE9wOiAnY2xlYXInLFxuICAgICAgICBzdG9yZU9wOiAnc3RvcmUnLFxuICAgICAgICB2aWV3OiBudWxsLFxuICAgICAgfSxcbiAgICBdLFxuICB9O1xuXG5cbiAgLy8gY29tcHV0ZSBwaXBlbGluZSDjga7oqK3lrppcblxuICBjb25zdCBiaW5kR3JvdXBMYXlvdXQgPSBkZXZpY2UuY3JlYXRlQmluZEdyb3VwTGF5b3V0KHtcbiAgICBlbnRyaWVzOiBbXG4gICAgICB7XG4gICAgICAgIGJpbmRpbmc6IDAsXG4gICAgICAgIHZpc2liaWxpdHk6IEdQVVNoYWRlclN0YWdlLkNPTVBVVEUsXG4gICAgICAgIGJ1ZmZlcjoge1xuICAgICAgICAgIHR5cGU6ICdzdG9yYWdlJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSk7XG5cbiAgY29uc3QgYmluZEdyb3VwID0gZGV2aWNlLmNyZWF0ZUJpbmRHcm91cCh7XG4gICAgbGF5b3V0OiBiaW5kR3JvdXBMYXlvdXQsXG4gICAgZW50cmllczogW1xuICAgICAge1xuICAgICAgICBiaW5kaW5nOiAwLFxuICAgICAgICByZXNvdXJjZToge1xuICAgICAgICAgIGJ1ZmZlcjogcGFydGljbGVCdWZmZXIsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xuXG4gIGNvbnN0IGNvbXB1dGVQaXBlbGluZSA9IGRldmljZS5jcmVhdGVDb21wdXRlUGlwZWxpbmUoe1xuICAgIGxheW91dDogZGV2aWNlLmNyZWF0ZVBpcGVsaW5lTGF5b3V0KHtcbiAgICAgIGJpbmRHcm91cExheW91dHM6IFtiaW5kR3JvdXBMYXlvdXRdLFxuICAgIH0pLFxuICAgIGNvbXB1dGU6IHtcbiAgICAgIG1vZHVsZTogc2hhZGVyTW9kdWxlLFxuICAgICAgZW50cnlQb2ludDogJ3VwZGF0ZScsXG4gICAgfSxcbiAgfSk7XG5cbiAgY29uc3Qgc3RlcCA9ICgpID0+IHtcbiAgICBjb25zdCBjb21tYW5kRW5jb2RlciA9IGRldmljZS5jcmVhdGVDb21tYW5kRW5jb2RlcigpO1xuXG4gICAgcmVuZGVyUGFzc0Rlc2NyaXB0b3IuY29sb3JBdHRhY2htZW50c1swXS52aWV3ID0gY3R4LmdldEN1cnJlbnRUZXh0dXJlKCkuY3JlYXRlVmlldygpO1xuXG4gICAgY29uc3QgcmVuZGVyUGFzcyA9IGNvbW1hbmRFbmNvZGVyLmJlZ2luUmVuZGVyUGFzcyhyZW5kZXJQYXNzRGVzY3JpcHRvcik7XG4gICAgcmVuZGVyUGFzcy5zZXRQaXBlbGluZShyZW5kZXJQaXBlbGluZSk7XG4gICAgcmVuZGVyUGFzcy5zZXRWZXJ0ZXhCdWZmZXIoMCwgcGFydGljbGVCdWZmZXIpO1xuICAgIHJlbmRlclBhc3MuZHJhdyhOVU1fUEFSVElDTEVTKTtcbiAgICByZW5kZXJQYXNzLmVuZCgpO1xuXG4gICAgY29uc3QgY29tcHV0ZVBhc3MgPSBjb21tYW5kRW5jb2Rlci5iZWdpbkNvbXB1dGVQYXNzKCk7XG4gICAgY29tcHV0ZVBhc3Muc2V0UGlwZWxpbmUoY29tcHV0ZVBpcGVsaW5lKTtcbiAgICBjb21wdXRlUGFzcy5zZXRCaW5kR3JvdXAoMCwgYmluZEdyb3VwKTtcbiAgICBjb21wdXRlUGFzcy5kaXNwYXRjaFdvcmtncm91cHMoTWF0aC5jZWlsKE5VTV9QQVJUSUNMRVMgLyA2NCkpO1xuICAgIGNvbXB1dGVQYXNzLmVuZCgpO1xuXG4gICAgZGV2aWNlLnF1ZXVlLnN1Ym1pdChbY29tbWFuZEVuY29kZXIuZmluaXNoKCldKTtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XG4gIH07XG4gIHN0ZXAoKTtcbn07XG4iLCJpbXBvcnQgc2hhZGVyLCB7IFdPUktHUk9VUF9DT1VOVF9CSVRTLCBXT1JLR1JPVVBfU0laRV9CSVRTIH0gZnJvbSAnLi9zaGFkZXIud2dzbCc7XG4vKipcbiAqIE1ENCDkuKbliJflrp/ooYxcbiAqL1xuY29uc3QgV09SS0dST1VQX0NPVU5UID0gMSA8PCBXT1JLR1JPVVBfQ09VTlRfQklUUztcbmNvbnN0IFdPUktHUk9VUF9TSVpFID0gMSA8PCBXT1JLR1JPVVBfU0laRV9CSVRTO1xuLy8g57WQ5p6c44KS5L+d5a2Y44GZ44KL44OQ44OD44OV44Kh44Gu44K144Kk44K6XG5jb25zdCBCVUZGRVJfU0laRSA9IFdPUktHUk9VUF9DT1VOVCAqIFdPUktHUk9VUF9TSVpFICogNDtcblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBhZGFwdGVyID0gYXdhaXQgbmF2aWdhdG9yLmdwdS5yZXF1ZXN0QWRhcHRlcigpO1xuICBjb25zdCBkZXZpY2UgPSBhd2FpdCBhZGFwdGVyLnJlcXVlc3REZXZpY2UoKTtcblxuICAvLyDoqIjnrpfntZDmnpzjga7kv53lrZjlhYjjga7jg5Djg4Pjg5XjgqFcbiAgY29uc3QgcmVzdWx0QnVmZmVyID0gZGV2aWNlLmNyZWF0ZUJ1ZmZlcih7XG4gICAgc2l6ZTogQlVGRkVSX1NJWkUsXG4gICAgdXNhZ2U6IEdQVUJ1ZmZlclVzYWdlLlNUT1JBR0UgfCBHUFVCdWZmZXJVc2FnZS5DT1BZX1NSQyxcbiAgfSk7XG5cbiAgLy8g57WQ5p6c5Y+W44KK5Ye644GX55So44Gu44K544OG44O844K444Oz44Kw44OQ44OD44OV44KhXG4gIGNvbnN0IHN0YWdpbmdCdWZmZXIgPSBkZXZpY2UuY3JlYXRlQnVmZmVyKHtcbiAgICBzaXplOiBCVUZGRVJfU0laRSxcbiAgICB1c2FnZTogR1BVQnVmZmVyVXNhZ2UuTUFQX1JFQUQgfCBHUFVCdWZmZXJVc2FnZS5DT1BZX0RTVCxcbiAgfSk7XG5cbiAgY29uc3Qgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcblxuICAvLyBjb21wdXRlIHBpcGVsaW5lIOOBruWun+ihjFxuICBjb25zdCBiaW5kR3JvdXBMYXlvdXQgPSBkZXZpY2UuY3JlYXRlQmluZEdyb3VwTGF5b3V0KHtcbiAgICBlbnRyaWVzOiBbXG4gICAgICB7XG4gICAgICAgIGJpbmRpbmc6IDAsXG4gICAgICAgIHZpc2liaWxpdHk6IEdQVVNoYWRlclN0YWdlLkNPTVBVVEUsXG4gICAgICAgIGJ1ZmZlcjoge1xuICAgICAgICAgIHR5cGU6ICdzdG9yYWdlJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSk7XG5cbiAgY29uc3QgYmluZEdyb3VwID0gZGV2aWNlLmNyZWF0ZUJpbmRHcm91cCh7XG4gICAgbGF5b3V0OiBiaW5kR3JvdXBMYXlvdXQsXG4gICAgZW50cmllczogW1xuICAgICAge1xuICAgICAgICBiaW5kaW5nOiAwLFxuICAgICAgICByZXNvdXJjZToge1xuICAgICAgICAgIGJ1ZmZlcjogcmVzdWx0QnVmZmVyLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICBdLFxuICB9KTtcblxuICBjb25zdCBzaGFkZXJNb2R1bGUgPSBkZXZpY2UuY3JlYXRlU2hhZGVyTW9kdWxlKHtcbiAgICBjb2RlOiBzaGFkZXIsXG4gIH0pO1xuXG4gIGNvbnN0IGNvbXB1dGVQaXBlbGluZSA9IGRldmljZS5jcmVhdGVDb21wdXRlUGlwZWxpbmUoe1xuICAgIGxheW91dDogZGV2aWNlLmNyZWF0ZVBpcGVsaW5lTGF5b3V0KHtcbiAgICAgIGJpbmRHcm91cExheW91dHM6IFtiaW5kR3JvdXBMYXlvdXRdLFxuICAgIH0pLFxuICAgIGNvbXB1dGU6IHtcbiAgICAgIG1vZHVsZTogc2hhZGVyTW9kdWxlLFxuICAgICAgZW50cnlQb2ludDogJ21haW4nLFxuICAgIH0sXG4gIH0pO1xuICBjb25zdCBjb21tYW5kRW5jb2RlciA9IGRldmljZS5jcmVhdGVDb21tYW5kRW5jb2RlcigpO1xuICBjb25zdCBjb21wdXRlUGFzcyA9IGNvbW1hbmRFbmNvZGVyLmJlZ2luQ29tcHV0ZVBhc3MoKTtcbiAgY29tcHV0ZVBhc3Muc2V0UGlwZWxpbmUoY29tcHV0ZVBpcGVsaW5lKTtcbiAgY29tcHV0ZVBhc3Muc2V0QmluZEdyb3VwKDAsIGJpbmRHcm91cCk7XG4gIGNvbXB1dGVQYXNzLmRpc3BhdGNoV29ya2dyb3VwcyhXT1JLR1JPVVBfQ09VTlQpO1xuICBjb21wdXRlUGFzcy5lbmQoKTtcblxuICAvLyDntZDmnpzjga7lj5bjgorlh7rjgZcgJiDooajnpLpcbiAgY29tbWFuZEVuY29kZXIuY29weUJ1ZmZlclRvQnVmZmVyKFxuICAgIHJlc3VsdEJ1ZmZlcixcbiAgICAwLFxuICAgIHN0YWdpbmdCdWZmZXIsXG4gICAgMCxcbiAgICBCVUZGRVJfU0laRVxuICApO1xuICBkZXZpY2UucXVldWUuc3VibWl0KFtjb21tYW5kRW5jb2Rlci5maW5pc2goKV0pO1xuICBhd2FpdCBzdGFnaW5nQnVmZmVyLm1hcEFzeW5jKFxuICAgIEdQVU1hcE1vZGUuUkVBRCxcbiAgICAwLFxuICAgIEJVRkZFUl9TSVpFXG4gICk7XG4gIGNvbnN0IGNvcHlBcnJheUJ1ZmZlciA9IHN0YWdpbmdCdWZmZXIuZ2V0TWFwcGVkUmFuZ2UoMCwgQlVGRkVSX1NJWkUpO1xuICBjb25zdCByZXN1bHQgPSBuZXcgVWludDMyQXJyYXkoY29weUFycmF5QnVmZmVyLnNsaWNlKDApKTtcbiAgc3RhZ2luZ0J1ZmZlci51bm1hcCgpO1xuICByZXN1bHQuZm9yRWFjaChlID0+IHtcbiAgICBpZiAoZSAhPSAwKSB7XG4gICAgICBjb25zb2xlLmxvZyhlKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIOODj+ODg+OCt+ODpeODrOODvOODiOihqOekulxuICBjb25zdCBlbmQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgY29uc29sZS5sb2coYGR1cmF0aW9uOiAke01hdGgucm91bmQoZW5kIC0gc3RhcnQpfSBtc2ApO1xuICBjb25zb2xlLmxvZyhgaGFzaCByYXRlOiAke01hdGgucm91bmQoKDIgKiogMzIgKiAxMDAwIC8gKGVuZCAtIHN0YXJ0KSkgLyAoMTAyNCAqKiAzKSl9IEdIL3NgKTtcbn07XG4iLCJleHBvcnQgY2xhc3MgTWF0cml4IHtcbiAgcHVibGljIG06IG51bWJlcjtcbiAgcHVibGljIG46IG51bWJlcjtcbiAgcHJpdmF0ZSBtYXRyaXg6IG51bWJlcltdW107XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKG06IG51bWJlciwgbjogbnVtYmVyKTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKG06IG51bWJlciwgbjogbnVtYmVyLCBhcnI6IG51bWJlcltdKTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKG06IG51bWJlciwgbjogbnVtYmVyLCBhcnI/OiBudW1iZXJbXSkge1xuICAgIHRoaXMubSA9IG07XG4gICAgdGhpcy5uID0gbjtcblxuICAgIGlmIChhcnIgIT0gbnVsbCkge1xuICAgICAgLy8gYXJyIOOBjOS4juOBiOOCieOCjOOBpuOBhOOBn+OCieOAgWFyciDjgafliJ3mnJ/ljJbjgZnjgotcbiAgICAgIGlmIChhcnIubGVuZ3RoICE9IG0gKiBuKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcign44K144Kk44K644Gu5LiN5LiA6Ie0Jyk7XG4gICAgICB9XG4gICAgICB0aGlzLm1hdHJpeCA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgdGhpcy5tYXRyaXhbaV0gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBuOyBqKyspIHtcbiAgICAgICAgICB0aGlzLm1hdHJpeFtpXVtqXSA9IGFycltpICsgbSAqIGpdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWF0cml4ID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG07IGkrKykge1xuICAgICAgICB0aGlzLm1hdHJpeFtpXSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG47IGorKykge1xuICAgICAgICAgIHRoaXMubWF0cml4W2ldW2pdID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzZXRWYWx1ZShpOiBudW1iZXIsIGo6IG51bWJlciwgdmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIGlmIChpIDwgMCB8fCBpID49IHRoaXMubSB8fCBqIDwgMCB8fCBqID49IHRoaXMubikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCfnr4Tlm7LlpJYnKTtcbiAgICB9XG4gICAgdGhpcy5tYXRyaXhbaV1bal0gPSB2YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRWYWx1ZShpOiBudW1iZXIsIGo6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gdGhpcy5tIHx8IGogPCAwIHx8IGogPj0gdGhpcy5uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+evhOWbsuWklicpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5tYXRyaXhbaV1bal07XG4gIH1cblxuICAvKipcbiAgICog44GT44Gu6KGM5YiX44GrIG1hdCDjgpLlj7PjgYvjgonkuZfnrpfjgZfjgZ/jgoLjga7jgpLov5TjgZlcbiAgICogQHBhcmFtIG1hdFxuICAgKiBAcmV0dXJucyDjgZPjga7ooYzliJfjgattYXTjgpLlj7PjgYvjgonkuZfnrpfjgZfjgZ/ntZDmnpxcbiAgICovXG4gIHB1YmxpYyBtdWwobWF0OiBNYXRyaXgpOiBNYXRyaXgge1xuICAgIGlmICh0aGlzLm4gIT0gbWF0Lm0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcign44K144Kk44K644Gu5LiN5LiA6Ie0Jyk7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3TWF0ID0gbmV3IE1hdHJpeCh0aGlzLm0sIG1hdC5uKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubTsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1hdC5uOyBqKyspIHtcbiAgICAgICAgbGV0IHN1bSA9IDA7XG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgdGhpcy5uOyBrKyspIHtcbiAgICAgICAgICBzdW0gKz0gdGhpcy5nZXRWYWx1ZShpLCBrKSAqIG1hdC5nZXRWYWx1ZShrLCBqKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdNYXQuc2V0VmFsdWUoaSwgaiwgc3VtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld01hdDtcbiAgfVxuXG4gIHB1YmxpYyB0b0FycmF5KCk6IG51bWJlcltdIHtcbiAgICBjb25zdCBhcnIgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubTsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubjsgaisrKSB7XG4gICAgICAgIGFycltpICsgdGhpcy5tICogal0gPSB0aGlzLmdldFZhbHVlKGksIGopO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyO1xuICB9XG59XG4iLCJleHBvcnQgY2xhc3MgTWF0cml4IHtcbiAgcHVibGljIG06IG51bWJlcjtcbiAgcHVibGljIG46IG51bWJlcjtcbiAgcHJpdmF0ZSBtYXRyaXg6IG51bWJlcltdW107XG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKG06IG51bWJlciwgbjogbnVtYmVyKTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKG06IG51bWJlciwgbjogbnVtYmVyLCBhcnI6IG51bWJlcltdKTtcbiAgcHVibGljIGNvbnN0cnVjdG9yKG06IG51bWJlciwgbjogbnVtYmVyLCBhcnI/OiBudW1iZXJbXSkge1xuICAgIHRoaXMubSA9IG07XG4gICAgdGhpcy5uID0gbjtcblxuICAgIGlmIChhcnIgIT0gbnVsbCkge1xuICAgICAgLy8gYXJyIOOBjOS4juOBiOOCieOCjOOBpuOBhOOBn+OCieOAgWFyciDjgafliJ3mnJ/ljJbjgZnjgotcbiAgICAgIGlmIChhcnIubGVuZ3RoICE9IG0gKiBuKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcign44K144Kk44K644Gu5LiN5LiA6Ie0Jyk7XG4gICAgICB9XG4gICAgICB0aGlzLm1hdHJpeCA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgdGhpcy5tYXRyaXhbaV0gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBuOyBqKyspIHtcbiAgICAgICAgICB0aGlzLm1hdHJpeFtpXVtqXSA9IGFycltpICsgbSAqIGpdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWF0cml4ID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG07IGkrKykge1xuICAgICAgICB0aGlzLm1hdHJpeFtpXSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG47IGorKykge1xuICAgICAgICAgIHRoaXMubWF0cml4W2ldW2pdID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBzZXRWYWx1ZShpOiBudW1iZXIsIGo6IG51bWJlciwgdmFsdWU6IG51bWJlcik6IHZvaWQge1xuICAgIGlmIChpIDwgMCB8fCBpID49IHRoaXMubSB8fCBqIDwgMCB8fCBqID49IHRoaXMubikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCfnr4Tlm7LlpJYnKTtcbiAgICB9XG4gICAgdGhpcy5tYXRyaXhbaV1bal0gPSB2YWx1ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRWYWx1ZShpOiBudW1iZXIsIGo6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gdGhpcy5tIHx8IGogPCAwIHx8IGogPj0gdGhpcy5uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+evhOWbsuWklicpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5tYXRyaXhbaV1bal07XG4gIH1cblxuICAvKipcbiAgICog44GT44Gu6KGM5YiX44GrIG1hdCDjgpLlj7PjgYvjgonkuZfnrpfjgZfjgZ/jgoLjga7jgpLov5TjgZlcbiAgICogQHBhcmFtIG1hdFxuICAgKiBAcmV0dXJucyDjgZPjga7ooYzliJfjgattYXTjgpLlj7PjgYvjgonkuZfnrpfjgZfjgZ/ntZDmnpxcbiAgICovXG4gIHB1YmxpYyBtdWwobWF0OiBNYXRyaXgpOiBNYXRyaXgge1xuICAgIGlmICh0aGlzLm4gIT0gbWF0Lm0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcign44K144Kk44K644Gu5LiN5LiA6Ie0Jyk7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3TWF0ID0gbmV3IE1hdHJpeCh0aGlzLm0sIG1hdC5uKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubTsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1hdC5uOyBqKyspIHtcbiAgICAgICAgbGV0IHN1bSA9IDA7XG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgdGhpcy5uOyBrKyspIHtcbiAgICAgICAgICBzdW0gKz0gdGhpcy5nZXRWYWx1ZShpLCBrKSAqIG1hdC5nZXRWYWx1ZShrLCBqKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdNYXQuc2V0VmFsdWUoaSwgaiwgc3VtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld01hdDtcbiAgfVxuXG4gIHB1YmxpYyB0b0FycmF5KCk6IG51bWJlcltdIHtcbiAgICBjb25zdCBhcnIgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubTsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubjsgaisrKSB7XG4gICAgICAgIGFycltpICsgdGhpcy5tICogal0gPSB0aGlzLmdldFZhbHVlKGksIGopO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNYXRyaXggfSBmcm9tICcuL21hdHJpeCc7XG5pbXBvcnQgc2hhZGVyIGZyb20gJy4vc2hhZGVyLndnc2wnO1xuLyoqXG4gKiBUZXh0dXJlXG4gKi9cbmZ1bmN0aW9uIGZldGNoSW1hZ2Uoc3JjOiBzdHJpbmcpOiBQcm9taXNlPEhUTUxJbWFnZUVsZW1lbnQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBpbWcub25sb2FkID0gKCkgPT4gcmVzb2x2ZShpbWcpO1xuICAgIGltZy5vbmVycm9yID0gKGUpID0+IHJlamVjdChlKTtcbiAgICBpbWcuc3JjID0gc3JjO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKCkgPT4ge1xuICBjb25zdCBjdnMgPSBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpKTtcbiAgY3ZzLndpZHRoID0gNTAwO1xuICBjdnMuaGVpZ2h0ID0gNTAwO1xuXG4gIGNvbnN0IGN0eCA9IGN2cy5nZXRDb250ZXh0KCd3ZWJncHUnKTtcblxuICBjb25zdCBhZGFwdGVyID0gYXdhaXQgbmF2aWdhdG9yLmdwdS5yZXF1ZXN0QWRhcHRlcigpO1xuICBjb25zdCBkZXZpY2UgPSBhd2FpdCBhZGFwdGVyLnJlcXVlc3REZXZpY2UoKTtcblxuICBjb25zdCBzaGFkZXJNb2R1bGUgPSBkZXZpY2UuY3JlYXRlU2hhZGVyTW9kdWxlKHtcbiAgICBjb2RlOiBzaGFkZXIsXG4gIH0pO1xuXG4gIGN0eC5jb25maWd1cmUoe1xuICAgIGRldmljZTogZGV2aWNlLFxuICAgIGZvcm1hdDogbmF2aWdhdG9yLmdwdS5nZXRQcmVmZXJyZWRDYW52YXNGb3JtYXQoKSxcbiAgICBhbHBoYU1vZGU6ICdwcmVtdWx0aXBsaWVkJyxcbiAgfSk7XG5cbiAgLy8gdmVydGljZXNcbiAgY29uc3QgdmVydGljZXMgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAvLyDkuIrpnaJcbiAgICAtMC41LCAwLjUsIDAuNSxcbiAgICAwLjUsIDAuNSwgMC41LFxuICAgIDAuNSwgMC41LCAtMC41LFxuICAgIC0wLjUsIDAuNSwgMC41LFxuICAgIDAuNSwgMC41LCAtMC41LFxuICAgIC0wLjUsIDAuNSwgLTAuNSxcbiAgICAvLyDlupXpnaJcbiAgICAtMC41LCAtMC41LCAwLjUsXG4gICAgLTAuNSwgLTAuNSwgLTAuNSxcbiAgICAwLjUsIC0wLjUsIC0wLjUsXG4gICAgLTAuNSwgLTAuNSwgMC41LFxuICAgIDAuNSwgLTAuNSwgLTAuNSxcbiAgICAwLjUsIC0wLjUsIDAuNSxcbiAgICAvLyDlt6bpnaJcbiAgICAtMC41LCAwLjUsIDAuNSxcbiAgICAtMC41LCAwLjUsIC0wLjUsXG4gICAgLTAuNSwgLTAuNSwgLTAuNSxcbiAgICAtMC41LCAwLjUsIDAuNSxcbiAgICAtMC41LCAtMC41LCAtMC41LFxuICAgIC0wLjUsIC0wLjUsIDAuNSxcbiAgICAvLyDlj7PpnaJcbiAgICAwLjUsIDAuNSwgMC41LFxuICAgIDAuNSwgLTAuNSwgMC41LFxuICAgIDAuNSwgLTAuNSwgLTAuNSxcbiAgICAwLjUsIDAuNSwgMC41LFxuICAgIDAuNSwgLTAuNSwgLTAuNSxcbiAgICAwLjUsIDAuNSwgLTAuNSxcbiAgICAvLyDliY3pnaJcbiAgICAtMC41LCAwLjUsIDAuNSxcbiAgICAtMC41LCAtMC41LCAwLjUsXG4gICAgMC41LCAtMC41LCAwLjUsXG4gICAgLTAuNSwgMC41LCAwLjUsXG4gICAgMC41LCAtMC41LCAwLjUsXG4gICAgMC41LCAwLjUsIDAuNSxcbiAgICAvLyDlpaXpnaJcbiAgICAtMC41LCAwLjUsIC0wLjUsXG4gICAgMC41LCAwLjUsIC0wLjUsXG4gICAgMC41LCAtMC41LCAtMC41LFxuICAgIC0wLjUsIDAuNSwgLTAuNSxcbiAgICAwLjUsIC0wLjUsIC0wLjUsXG4gICAgLTAuNSwgLTAuNSwgLTAuNVxuICBdKTtcblxuICBjb25zdCB2ZXJ0ZXhCdWZmZXIgPSBkZXZpY2UuY3JlYXRlQnVmZmVyKHtcbiAgICBzaXplOiB2ZXJ0aWNlcy5ieXRlTGVuZ3RoLFxuICAgIHVzYWdlOiBHUFVCdWZmZXJVc2FnZS5WRVJURVggfCBHUFVCdWZmZXJVc2FnZS5DT1BZX0RTVCxcbiAgfSk7XG4gIGRldmljZS5xdWV1ZS53cml0ZUJ1ZmZlcih2ZXJ0ZXhCdWZmZXIsIDAsIHZlcnRpY2VzLCAwLCB2ZXJ0aWNlcy5sZW5ndGgpO1xuXG4gIC8vIHV2XG4gIGNvbnN0IHV2ID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgLy8g5LiK6Z2iXG4gICAgMSAvIDQsIDEgLyAzLFxuICAgIDIgLyA0LCAxIC8gMyxcbiAgICAyIC8gNCwgMCAvIDMsXG4gICAgMSAvIDQsIDEgLyAzLFxuICAgIDIgLyA0LCAwIC8gMyxcbiAgICAxIC8gNCwgMCAvIDMsXG4gICAgLy8g5bqV6Z2iXG4gICAgMSAvIDQsIDIgLyAzLFxuICAgIDEgLyA0LCAzIC8gMyxcbiAgICAyIC8gNCwgMyAvIDMsXG4gICAgMSAvIDQsIDIgLyAzLFxuICAgIDIgLyA0LCAzIC8gMyxcbiAgICAyIC8gNCwgMiAvIDMsXG4gICAgLy8g5bem6Z2iXG4gICAgMSAvIDQsIDEgLyAzLFxuICAgIDAgLyA0LCAxIC8gMyxcbiAgICAwIC8gNCwgMiAvIDMsXG4gICAgMSAvIDQsIDEgLyAzLFxuICAgIDAgLyA0LCAyIC8gMyxcbiAgICAxIC8gNCwgMiAvIDMsXG4gICAgLy8g5Y+z6Z2iXG4gICAgMiAvIDQsIDEgLyAzLFxuICAgIDIgLyA0LCAyIC8gMyxcbiAgICAzIC8gNCwgMiAvIDMsXG4gICAgMiAvIDQsIDEgLyAzLFxuICAgIDMgLyA0LCAyIC8gMyxcbiAgICAzIC8gNCwgMSAvIDMsXG4gICAgLy8g5YmN6Z2iXG4gICAgMSAvIDQsIDEgLyAzLFxuICAgIDEgLyA0LCAyIC8gMyxcbiAgICAyIC8gNCwgMiAvIDMsXG4gICAgMSAvIDQsIDEgLyAzLFxuICAgIDIgLyA0LCAyIC8gMyxcbiAgICAyIC8gNCwgMSAvIDMsXG4gICAgLy8g5aWl6Z2iXG4gICAgNCAvIDQsIDEgLyAzLFxuICAgIDMgLyA0LCAxIC8gMyxcbiAgICAzIC8gNCwgMiAvIDMsXG4gICAgNCAvIDQsIDEgLyAzLFxuICAgIDMgLyA0LCAyIC8gMyxcbiAgICA0IC8gNCwgMiAvIDNcbiAgXSk7XG5cbiAgY29uc3QgdXZCdWZmZXIgPSBkZXZpY2UuY3JlYXRlQnVmZmVyKHtcbiAgICBzaXplOiB1di5ieXRlTGVuZ3RoLFxuICAgIHVzYWdlOiBHUFVCdWZmZXJVc2FnZS5WRVJURVggfCBHUFVCdWZmZXJVc2FnZS5DT1BZX0RTVCxcbiAgfSk7XG4gIGRldmljZS5xdWV1ZS53cml0ZUJ1ZmZlcih1dkJ1ZmZlciwgMCwgdXYsIDAsIHV2Lmxlbmd0aCk7XG5cbiAgLy8gdGV4dHVyZVxuICBjb25zdCB0ZXh0dXJlSW1hZ2UxID0gYXdhaXQgZmV0Y2hJbWFnZSgnLi90ZXh0dXJlL2RpY2UucG5nJyk7XG4gIGNvbnN0IHRleHR1cmVJbWFnZTIgPSBhd2FpdCBmZXRjaEltYWdlKCcuL3RleHR1cmUvZGljZTIucG5nJyk7XG5cbiAgY29uc3QgdGV4dHVyZUJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoe1xuICAgIHNpemU6IDI1NiAqIDE5MiAqIDQgKiAyLFxuICAgIHVzYWdlOiBHUFVCdWZmZXJVc2FnZS5DT1BZX1NSQyxcbiAgICBtYXBwZWRBdENyZWF0aW9uOiB0cnVlLFxuICB9KTtcbiAgY29uc3QgcGl4ZWxEYXRhID0gbmV3IFVpbnQ4QXJyYXkodGV4dHVyZUJ1ZmZlci5nZXRNYXBwZWRSYW5nZSgpKTtcblxuICBjb25zdCBjdnMyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIGN2czIud2lkdGggPSAyNTY7XG4gIGN2czIuaGVpZ2h0ID0gMTkyO1xuICBjb25zdCBjdHgyID0gY3ZzMi5nZXRDb250ZXh0KCcyZCcpO1xuXG4gIGN0eDIuZHJhd0ltYWdlKHRleHR1cmVJbWFnZTEsIDAsIDApO1xuICBwaXhlbERhdGEuc2V0KGN0eDIuZ2V0SW1hZ2VEYXRhKDAsIDAsIDI1NiwgMTkyKS5kYXRhLCAwKTtcbiAgY3R4Mi5kcmF3SW1hZ2UodGV4dHVyZUltYWdlMiwgMCwgMCk7XG4gIHBpeGVsRGF0YS5zZXQoY3R4Mi5nZXRJbWFnZURhdGEoMCwgMCwgMjU2LCAxOTIpLmRhdGEsIDI1NiAqIDE5MiAqIDQpO1xuXG4gIHRleHR1cmVCdWZmZXIudW5tYXAoKTtcblxuICBjb25zdCB0ZXh0dXJlID0gZGV2aWNlLmNyZWF0ZVRleHR1cmUoe1xuICAgIHNpemU6IFtcbiAgICAgIDI1NiwgMTkyLCAyXG4gICAgXSxcbiAgICBmb3JtYXQ6ICdyZ2JhOHVub3JtJyxcbiAgICB1c2FnZTogR1BVVGV4dHVyZVVzYWdlLlRFWFRVUkVfQklORElORyB8XG4gICAgICBHUFVUZXh0dXJlVXNhZ2UuQ09QWV9EU1QgfFxuICAgICAgR1BVVGV4dHVyZVVzYWdlLlJFTkRFUl9BVFRBQ0hNRU5UXG4gIH0pO1xuXG4gIGNvbnN0IHNhbXBsZXIgPSBkZXZpY2UuY3JlYXRlU2FtcGxlcih7XG4gICAgbWFnRmlsdGVyOiAnbGluZWFyJyxcbiAgICBtaW5GaWx0ZXI6ICdsaW5lYXInLFxuICB9KTtcblxuICAvLyBtdnAgbWF0cml4XG4gIGNvbnN0IG12cEJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoe1xuICAgIHNpemU6IDE2ICogNCxcbiAgICB1c2FnZTogR1BVQnVmZmVyVXNhZ2UuVU5JRk9STSB8IEdQVUJ1ZmZlclVzYWdlLkNPUFlfRFNULFxuICB9KTtcblxuICAvLyB0ZXh0dXJlIGlkXG4gIGNvbnN0IHRleHR1cmVJZEJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoe1xuICAgIHNpemU6IDEgKiA0LFxuICAgIHVzYWdlOiBHUFVCdWZmZXJVc2FnZS5VTklGT1JNIHwgR1BVQnVmZmVyVXNhZ2UuQ09QWV9EU1QsXG4gIH0pO1xuXG4gIGNvbnN0IHZlcnRleEJ1ZmZlcnM6IEdQVVZlcnRleEJ1ZmZlckxheW91dFtdID0gW1xuICAgIHtcbiAgICAgIC8vIHZlcnRleFxuICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICB7XG4gICAgICAgICAgc2hhZGVyTG9jYXRpb246IDAsXG4gICAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICAgIGZvcm1hdDogJ2Zsb2F0MzJ4MycsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgYXJyYXlTdHJpZGU6IDEyLFxuICAgICAgc3RlcE1vZGU6ICd2ZXJ0ZXgnXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyB1dlxuICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICB7XG4gICAgICAgICAgc2hhZGVyTG9jYXRpb246IDEsXG4gICAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICAgIGZvcm1hdDogJ2Zsb2F0MzJ4MicsXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgYXJyYXlTdHJpZGU6IDgsXG4gICAgICBzdGVwTW9kZTogJ3ZlcnRleCdcbiAgICB9XG4gIF07XG5cbiAgY29uc3QgcGlwZWxpbmVEZXNjcmlwdG9yOiBHUFVSZW5kZXJQaXBlbGluZURlc2NyaXB0b3IgPSB7XG4gICAgdmVydGV4OiB7XG4gICAgICBtb2R1bGU6IHNoYWRlck1vZHVsZSxcbiAgICAgIGVudHJ5UG9pbnQ6ICd2ZXJ0ZXhfbWFpbicsXG4gICAgICBidWZmZXJzOiB2ZXJ0ZXhCdWZmZXJzLFxuICAgIH0sXG4gICAgZnJhZ21lbnQ6IHtcbiAgICAgIG1vZHVsZTogc2hhZGVyTW9kdWxlLFxuICAgICAgZW50cnlQb2ludDogJ2ZyYWdtZW50X21haW4nLFxuICAgICAgdGFyZ2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgZm9ybWF0OiBuYXZpZ2F0b3IuZ3B1LmdldFByZWZlcnJlZENhbnZhc0Zvcm1hdCgpLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIHByaW1pdGl2ZToge1xuICAgICAgdG9wb2xvZ3k6ICd0cmlhbmdsZS1saXN0JyxcbiAgICAgIGN1bGxNb2RlOiAnYmFjaydcbiAgICB9LFxuICAgIGxheW91dDogJ2F1dG8nLFxuICB9O1xuXG4gIGNvbnN0IHJlbmRlclBpcGVsaW5lID0gZGV2aWNlLmNyZWF0ZVJlbmRlclBpcGVsaW5lKHBpcGVsaW5lRGVzY3JpcHRvcik7XG4gIGNvbnN0IGJpbmRHcm91cCA9IGRldmljZS5jcmVhdGVCaW5kR3JvdXAoe1xuICAgIGxheW91dDogcmVuZGVyUGlwZWxpbmUuZ2V0QmluZEdyb3VwTGF5b3V0KDApLFxuICAgIGVudHJpZXM6IFtcbiAgICAgIHtcbiAgICAgICAgYmluZGluZzogMCxcbiAgICAgICAgcmVzb3VyY2U6IHtcbiAgICAgICAgICBidWZmZXI6IG12cEJ1ZmZlclxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgYmluZGluZzogMSxcbiAgICAgICAgcmVzb3VyY2U6IHNhbXBsZXIsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBiaW5kaW5nOiAyLFxuICAgICAgICByZXNvdXJjZTogdGV4dHVyZS5jcmVhdGVWaWV3KCksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBiaW5kaW5nOiAzLFxuICAgICAgICByZXNvdXJjZToge1xuICAgICAgICAgIGJ1ZmZlcjogdGV4dHVyZUlkQnVmZmVyXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgXVxuICB9KTtcblxuICBjb25zdCBjbGVhckNvbG9yID0geyByOiAwLjAsIGc6IDAuMCwgYjogMC4wLCBhOiAxLjAgfTtcblxuICBsZXQgcm90YXRlWCA9IDA7XG4gIGxldCByb3RhdGVZID0gMDtcbiAgY29uc3Qgc3RhcnQgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgZnVuY3Rpb24gc3RlcCgpIHtcblxuICAgIC8vIG12cCDooYzliJfjga7kvZzmiJDjga/kuIDml6bjgZPjgZPjgavnva7jgYTjgabjgYrjgY9cblxuICAgIGNvbnN0IHNjYWxlTWF0ID0gbmV3IE1hdHJpeCg0LCA0LCBbXG4gICAgICAxLCAwLCAwLCAwLFxuICAgICAgMCwgMSwgMCwgMCxcbiAgICAgIDAsIDAsIDEsIDAsXG4gICAgICAwLCAwLCAwLCAxXG4gICAgXSk7XG5cbiAgICByb3RhdGVYICs9IDAuMDE7XG4gICAgcm90YXRlWSArPSAwLjAxNTtcbiAgICBjb25zdCByb3RhdGVYTWF0ID0gbmV3IE1hdHJpeCg0LCA0LCBbXG4gICAgICAxLCAwLCAwLCAwLFxuICAgICAgMCwgTWF0aC5jb3Mocm90YXRlWCksIE1hdGguc2luKHJvdGF0ZVgpLCAwLFxuICAgICAgMCwgLSBNYXRoLnNpbihyb3RhdGVYKSwgTWF0aC5jb3Mocm90YXRlWCksIDAsXG4gICAgICAwLCAwLCAwLCAxXG4gICAgXSk7XG4gICAgY29uc3Qgcm90YXRlWU1hdCA9IG5ldyBNYXRyaXgoNCwgNCwgW1xuICAgICAgTWF0aC5jb3Mocm90YXRlWSksIDAsIC0gTWF0aC5zaW4ocm90YXRlWSksIDAsXG4gICAgICAwLCAxLCAwLCAwLFxuICAgICAgTWF0aC5zaW4ocm90YXRlWSksIDAsIE1hdGguY29zKHJvdGF0ZVkpLCAwLFxuICAgICAgMCwgMCwgMCwgMVxuICAgIF0pO1xuXG4gICAgY29uc3QgdHJhbnNsYXRlWCA9IDA7XG4gICAgY29uc3QgdHJhbnNsYXRlWSA9IDA7XG4gICAgY29uc3QgdHJhbnNsYXRlWiA9IC0yO1xuICAgIGNvbnN0IHRyYW5zbGF0ZU1hdCA9IG5ldyBNYXRyaXgoNCwgNCwgW1xuICAgICAgMSwgMCwgMCwgMCxcbiAgICAgIDAsIDEsIDAsIDAsXG4gICAgICAwLCAwLCAxLCAwLFxuICAgICAgdHJhbnNsYXRlWCwgdHJhbnNsYXRlWSwgdHJhbnNsYXRlWiwgMVxuICAgIF0pO1xuXG4gICAgLy8g6YCP6KaW5oqV5b2xXG4gICAgY29uc3QgZm92ID0gKDcwIC8gMTgwKSAqIE1hdGguUEk7XG4gICAgY29uc3QgYXNwZWN0ID0gY3ZzLndpZHRoIC8gY3ZzLmhlaWdodDtcbiAgICBjb25zdCBuZWFyID0gMC41O1xuICAgIGNvbnN0IGZhciA9IDEwMDtcbiAgICBjb25zdCBwcmpNYXQgPSBuZXcgTWF0cml4KDQsIDQsIFtcbiAgICAgIDEgLyAoYXNwZWN0ICogTWF0aC50YW4oZm92IC8gMikpLCAwLCAwLCAwLFxuICAgICAgMCwgMSAvIE1hdGgudGFuKGZvdiAvIDIpLCAwLCAwLFxuICAgICAgMCwgMCwgLSAoZmFyICsgbmVhcikgLyAoZmFyIC0gbmVhciksIC0xLFxuICAgICAgMCwgMCwgLSAyICogZmFyICogbmVhciAvIChmYXIgLSBuZWFyKSwgMFxuICAgIF0pO1xuICAgIGNvbnN0IG12cE1hdCA9IG5ldyBGbG9hdDMyQXJyYXkocHJqTWF0Lm11bCh0cmFuc2xhdGVNYXQpLm11bChyb3RhdGVZTWF0KS5tdWwocm90YXRlWE1hdCkubXVsKHNjYWxlTWF0KS50b0FycmF5KCkpO1xuICAgIGRldmljZS5xdWV1ZS53cml0ZUJ1ZmZlcihtdnBCdWZmZXIsIDAsIG12cE1hdCwgMCwgbXZwTWF0Lmxlbmd0aCk7XG4gICAgY29uc3QgdGV4dHVyZUlkID0gKChwZXJmb3JtYW5jZS5ub3coKSAtIHN0YXJ0KSAvICg1ICogMTAwMCkpICUgMjtcbiAgICBkZXZpY2UucXVldWUud3JpdGVCdWZmZXIodGV4dHVyZUlkQnVmZmVyLCAwLCBuZXcgVWludDMyQXJyYXkoW3RleHR1cmVJZF0pLCAwLCAxKTtcblxuICAgIGNvbnN0IHJlbmRlclBhc3NEZXNjcmlwdG9yOiBHUFVSZW5kZXJQYXNzRGVzY3JpcHRvciA9IHtcbiAgICAgIGNvbG9yQXR0YWNobWVudHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGNsZWFyVmFsdWU6IGNsZWFyQ29sb3IsXG4gICAgICAgICAgbG9hZE9wOiAnY2xlYXInLFxuICAgICAgICAgIHN0b3JlT3A6ICdzdG9yZScsXG4gICAgICAgICAgdmlldzogY3R4LmdldEN1cnJlbnRUZXh0dXJlKCkuY3JlYXRlVmlldygpLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuXG4gICAgY29uc3QgY29tbWFuZEVuY29kZXIgPSBkZXZpY2UuY3JlYXRlQ29tbWFuZEVuY29kZXIoKTtcblxuICAgIGNvbW1hbmRFbmNvZGVyLmNvcHlCdWZmZXJUb1RleHR1cmUoXG4gICAgICB7IGJ1ZmZlcjogdGV4dHVyZUJ1ZmZlciwgYnl0ZXNQZXJSb3c6IDI1NiAqIDQsIHJvd3NQZXJJbWFnZTogMTkyIH0sXG4gICAgICB7IHRleHR1cmU6IHRleHR1cmUgfSxcbiAgICAgIHsgd2lkdGg6IDI1NiwgaGVpZ2h0OiAxOTIsIGRlcHRoT3JBcnJheUxheWVyczogMiB9LFxuICAgICk7XG5cbiAgICBjb25zdCByZW5kZXJQYXNzID0gY29tbWFuZEVuY29kZXIuYmVnaW5SZW5kZXJQYXNzKHJlbmRlclBhc3NEZXNjcmlwdG9yKTtcblxuICAgIHJlbmRlclBhc3Muc2V0UGlwZWxpbmUocmVuZGVyUGlwZWxpbmUpO1xuICAgIHJlbmRlclBhc3Muc2V0VmVydGV4QnVmZmVyKDAsIHZlcnRleEJ1ZmZlcik7XG4gICAgcmVuZGVyUGFzcy5zZXRWZXJ0ZXhCdWZmZXIoMSwgdXZCdWZmZXIpO1xuICAgIHJlbmRlclBhc3Muc2V0QmluZEdyb3VwKDAsIGJpbmRHcm91cCk7XG4gICAgcmVuZGVyUGFzcy5kcmF3KDM2KTtcbiAgICByZW5kZXJQYXNzLmVuZCgpO1xuICAgIGRldmljZS5xdWV1ZS5zdWJtaXQoW2NvbW1hbmRFbmNvZGVyLmZpbmlzaCgpXSk7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHN0ZXApO1xuICB9XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKTtcbn07XG4iLCJpbXBvcnQgYmFzaWNfcmVuZGVyX3BpcGVsaW5lIGZyb20gJy4vYmFzaWNfcmVuZGVyX3BpcGVsaW5lL21haW4nO1xuaW1wb3J0IGJhc2ljX2NvbXB1dGVfcGlwZWxpbmUgZnJvbSAnLi9iYXNpY19jb21wdXRlX3BpcGVsaW5lL21haW4nO1xuaW1wb3J0IGRlbW8wMSBmcm9tICcuL2RlbW8wMS9tYWluJztcbmltcG9ydCBkZW1vMDIgZnJvbSAnLi9kZW1vMDIvbWFpbic7XG5pbXBvcnQgZGVtbzAzIGZyb20gJy4vZGVtbzAzL21haW4nO1xuaW1wb3J0IGRlbW8wNCBmcm9tICcuL2RlbW8wNC9tYWluJztcbmltcG9ydCBkZW1vMDUgZnJvbSAnLi9kZW1vMDUvbWFpbic7XG5pbXBvcnQgZGVtbzA2IGZyb20gJy4vZGVtbzA2L21haW4nO1xuaW1wb3J0IGRlbW8wNyBmcm9tICcuL2RlbW8wNy9tYWluJztcbmltcG9ydCBkZW1vMDggZnJvbSAnLi9kZW1vMDgvbWFpbic7XG5cbmNvbnN0IHBhZ2VzID0ge1xuICBiYXNpY19yZW5kZXJfcGlwZWxpbmU6IGJhc2ljX3JlbmRlcl9waXBlbGluZSxcbiAgYmFzaWNfY29tcHV0ZV9waXBlbGluZTogYmFzaWNfY29tcHV0ZV9waXBlbGluZSxcbiAgZGVtbzAxOiBkZW1vMDEsXG4gIGRlbW8wMjogZGVtbzAyLFxuICBkZW1vMDM6IGRlbW8wMyxcbiAgZGVtbzA0OiBkZW1vMDQsXG4gIGRlbW8wNTogZGVtbzA1LFxuICBkZW1vMDY6IGRlbW8wNixcbiAgZGVtbzA3OiBkZW1vMDcsXG4gIGRlbW8wODogZGVtbzA4LFxufTtcblxuZnVuY3Rpb24gaW5kZXgoKSB7XG4gIGNvbnN0IHVsID0gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd1bCcpKTtcbiAgZm9yIChjb25zdCBwYWdlIGluIHBhZ2VzKSB7XG4gICAgY29uc3QgYSA9IHVsLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJykpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKSk7XG4gICAgYS5ocmVmID0gJy4vaW5kZXguaHRtbD9wYWdlPScgKyBwYWdlO1xuICAgIGEudGV4dENvbnRlbnQgPSBwYWdlO1xuICB9XG59XG5cbndpbmRvdy5vbmxvYWQgPSBhc3luYyAoKSA9PiB7XG4gIChwYWdlc1tuZXcgVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKS5zZWFyY2hQYXJhbXMuZ2V0KCdwYWdlJyldIHx8IGluZGV4KSgpO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGBcbnN0cnVjdCBWZXJ0ZXhPdXQge1xuICBAYnVpbHRpbihwb3NpdGlvbikgcG9zaXRpb24gOiB2ZWM0ZixcbiAgQGxvY2F0aW9uKDApIGNvbG9yIDogdmVjNGZcbn1cblxuQHZlcnRleFxuZm4gdmVydGV4X21haW4oQGxvY2F0aW9uKDApIHBvc2l0aW9uOiB2ZWM0ZixcbiAgICAgICAgICAgICAgIEBsb2NhdGlvbigxKSBjb2xvcjogdmVjNGYpIC0+IFZlcnRleE91dFxue1xuICB2YXIgb3V0cHV0IDogVmVydGV4T3V0O1xuICBvdXRwdXQucG9zaXRpb24gPSBwb3NpdGlvbjtcbiAgb3V0cHV0LmNvbG9yID0gY29sb3I7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbkBmcmFnbWVudFxuZm4gZnJhZ21lbnRfbWFpbihmcmFnRGF0YTogVmVydGV4T3V0KSAtPiBAbG9jYXRpb24oMCkgdmVjNGZcbntcbiAgcmV0dXJuIGZyYWdEYXRhLmNvbG9yO1xufVxuYDtcbiIsImltcG9ydCBzaGFkZXIgZnJvbSAnLi9zaGFkZXIud2dzbCc7XG5pbXBvcnQgeyBCVUZGRVJfU0laRSB9IGZyb20gJy4vc2hhZGVyLndnc2wnO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoKSA9PiB7XG4gIGNvbnNvbGUubG9nKCdoZWxsbywgd29ybGQhJyk7XG5cbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYkdQVV9BUEkjYmFzaWNfY29tcHV0ZV9waXBlbGluZVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhd2FpdCBuYXZpZ2F0b3IuZ3B1LnJlcXVlc3RBZGFwdGVyKCk7XG4gIGNvbnN0IGRldmljZSA9IGF3YWl0IGFkYXB0ZXIucmVxdWVzdERldmljZSgpO1xuXG4gIGNvbnN0IHNoYWRlck1vZHVsZSA9IGRldmljZS5jcmVhdGVTaGFkZXJNb2R1bGUoe1xuICAgIGNvZGU6IHNoYWRlcixcbiAgfSk7XG5cbiAgY29uc3Qgb3V0cHV0ID0gZGV2aWNlLmNyZWF0ZUJ1ZmZlcih7XG4gICAgc2l6ZTogQlVGRkVSX1NJWkUsXG4gICAgdXNhZ2U6IEdQVUJ1ZmZlclVzYWdlLlNUT1JBR0UgfCBHUFVCdWZmZXJVc2FnZS5DT1BZX1NSQyxcbiAgfSk7XG5cbiAgY29uc3Qgc3RhZ2luZ0J1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoe1xuICAgIHNpemU6IEJVRkZFUl9TSVpFLFxuICAgIHVzYWdlOiBHUFVCdWZmZXJVc2FnZS5NQVBfUkVBRCB8IEdQVUJ1ZmZlclVzYWdlLkNPUFlfRFNULFxuICB9KTtcblxuICBjb25zdCBiaW5kR3JvdXBMYXlvdXQgPSBkZXZpY2UuY3JlYXRlQmluZEdyb3VwTGF5b3V0KHtcbiAgICBlbnRyaWVzOiBbXG4gICAgICB7XG4gICAgICAgIGJpbmRpbmc6IDAsXG4gICAgICAgIHZpc2liaWxpdHk6IEdQVVNoYWRlclN0YWdlLkNPTVBVVEUsXG4gICAgICAgIGJ1ZmZlcjoge1xuICAgICAgICAgIHR5cGU6ICdzdG9yYWdlJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSk7XG5cbiAgY29uc3QgYmluZEdyb3VwID0gZGV2aWNlLmNyZWF0ZUJpbmRHcm91cCh7XG4gICAgbGF5b3V0OiBiaW5kR3JvdXBMYXlvdXQsXG4gICAgZW50cmllczogW1xuICAgICAge1xuICAgICAgICBiaW5kaW5nOiAwLFxuICAgICAgICByZXNvdXJjZToge1xuICAgICAgICAgIGJ1ZmZlcjogb3V0cHV0LFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICBdLFxuICB9KTtcblxuICBjb25zdCBjb21wdXRlUGlwZWxpbmUgPSBkZXZpY2UuY3JlYXRlQ29tcHV0ZVBpcGVsaW5lKHtcbiAgICBsYXlvdXQ6IGRldmljZS5jcmVhdGVQaXBlbGluZUxheW91dCh7XG4gICAgICBiaW5kR3JvdXBMYXlvdXRzOiBbYmluZEdyb3VwTGF5b3V0XSxcbiAgICB9KSxcbiAgICBjb21wdXRlOiB7XG4gICAgICBtb2R1bGU6IHNoYWRlck1vZHVsZSxcbiAgICAgIGVudHJ5UG9pbnQ6ICdtYWluJyxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCBjb21tYW5kRW5jb2RlciA9IGRldmljZS5jcmVhdGVDb21tYW5kRW5jb2RlcigpO1xuICBjb25zdCBwYXNzRW5jb2RlciA9IGNvbW1hbmRFbmNvZGVyLmJlZ2luQ29tcHV0ZVBhc3MoKTtcblxuICBwYXNzRW5jb2Rlci5zZXRQaXBlbGluZShjb21wdXRlUGlwZWxpbmUpO1xuICBwYXNzRW5jb2Rlci5zZXRCaW5kR3JvdXAoMCwgYmluZEdyb3VwKTtcbiAgcGFzc0VuY29kZXIuZGlzcGF0Y2hXb3JrZ3JvdXBzKE1hdGguY2VpbChCVUZGRVJfU0laRSAvIDY0KSk7XG5cbiAgcGFzc0VuY29kZXIuZW5kKCk7XG5cbiAgLy8gQ29weSBvdXRwdXQgYnVmZmVyIHRvIHN0YWdpbmcgYnVmZmVyXG4gIGNvbW1hbmRFbmNvZGVyLmNvcHlCdWZmZXJUb0J1ZmZlcihcbiAgICBvdXRwdXQsXG4gICAgMCwgLy8gU291cmNlIG9mZnNldFxuICAgIHN0YWdpbmdCdWZmZXIsXG4gICAgMCwgLy8gRGVzdGluYXRpb24gb2Zmc2V0XG4gICAgQlVGRkVSX1NJWkVcbiAgKTtcblxuICAvLyBFbmQgZnJhbWUgYnkgcGFzc2luZyBhcnJheSBvZiBjb21tYW5kIGJ1ZmZlcnMgdG8gY29tbWFuZCBxdWV1ZSBmb3IgZXhlY3V0aW9uXG4gIGRldmljZS5xdWV1ZS5zdWJtaXQoW2NvbW1hbmRFbmNvZGVyLmZpbmlzaCgpXSk7XG5cbiAgLy8gbWFwIHN0YWdpbmcgYnVmZmVyIHRvIHJlYWQgcmVzdWx0cyBiYWNrIHRvIEpTXG4gIGF3YWl0IHN0YWdpbmdCdWZmZXIubWFwQXN5bmMoXG4gICAgR1BVTWFwTW9kZS5SRUFELFxuICAgIDAsIC8vIE9mZnNldFxuICAgIEJVRkZFUl9TSVpFIC8vIExlbmd0aFxuICApO1xuXG4gIGNvbnN0IGNvcHlBcnJheUJ1ZmZlciA9IHN0YWdpbmdCdWZmZXIuZ2V0TWFwcGVkUmFuZ2UoMCwgQlVGRkVSX1NJWkUpO1xuICBjb25zdCBkYXRhID0gY29weUFycmF5QnVmZmVyLnNsaWNlKDApO1xuICBzdGFnaW5nQnVmZmVyLnVubWFwKCk7XG4gIGNvbnNvbGUubG9nKG5ldyBGbG9hdDMyQXJyYXkoZGF0YSkpO1xufTtcbiIsImltcG9ydCBzaGFkZXIgZnJvbSAnLi9zaGFkZXIud2dzbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jICgpID0+IHtcbiAgY29uc29sZS5sb2coJ2hlbGxvLCB3b3JsZCEnKTtcblxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvV2ViR1BVX0FQSSNiYXNpY19yZW5kZXJfcGlwZWxpbmVcblxuICBjb25zdCBjdnMgPSBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpKTtcbiAgY3ZzLndpZHRoID0gNTAwO1xuICBjdnMuaGVpZ2h0ID0gNTAwO1xuXG4gIGNvbnN0IGN0eCA9IGN2cy5nZXRDb250ZXh0KCd3ZWJncHUnKTtcblxuICBjb25zdCBhZGFwdGVyID0gYXdhaXQgbmF2aWdhdG9yLmdwdS5yZXF1ZXN0QWRhcHRlcigpO1xuICBjb25zdCBkZXZpY2UgPSBhd2FpdCBhZGFwdGVyLnJlcXVlc3REZXZpY2UoKTtcblxuICBjb25zdCBzaGFkZXJNb2R1bGUgPSBkZXZpY2UuY3JlYXRlU2hhZGVyTW9kdWxlKHtcbiAgICBjb2RlOiBzaGFkZXIsXG4gIH0pO1xuXG4gIGN0eC5jb25maWd1cmUoe1xuICAgIGRldmljZTogZGV2aWNlLFxuICAgIGZvcm1hdDogbmF2aWdhdG9yLmdwdS5nZXRQcmVmZXJyZWRDYW52YXNGb3JtYXQoKSxcbiAgICBhbHBoYU1vZGU6ICdwcmVtdWx0aXBsaWVkJyxcbiAgfSk7XG5cblxuICAvLyDopIfmlbDjga7jg5Djg4Pjg5XjgqHjg7zjgpLkvb/jgYbniYhcblxuICAvLyB2ZXJ0aWNlc1xuXG4gIGNvbnN0IHZlcnRpY2VzID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgMC4wLCAxLjAsIDAuMCwgMS4wLFxuICAgIDEuMCwgLTEuMCwgMC4wLCAxLjAsXG4gICAgLTEuMCwgLTEuMCwgMC4wLCAxLjAsXG4gIF0pO1xuXG4gIGNvbnN0IHZlcnRleEJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoe1xuICAgIHNpemU6IHZlcnRpY2VzLmJ5dGVMZW5ndGgsIC8vIG1ha2UgaXQgYmlnIGVub3VnaCB0byBzdG9yZSB2ZXJ0aWNlcyBpblxuICAgIHVzYWdlOiBHUFVCdWZmZXJVc2FnZS5WRVJURVggfCBHUFVCdWZmZXJVc2FnZS5DT1BZX0RTVCxcbiAgfSk7XG4gIGRldmljZS5xdWV1ZS53cml0ZUJ1ZmZlcih2ZXJ0ZXhCdWZmZXIsIDAsIHZlcnRpY2VzLCAwLCB2ZXJ0aWNlcy5sZW5ndGgpO1xuXG4gIC8vIGNvbG9yc1xuXG4gIGNvbnN0IGNvbG9ycyA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgIDEuMCwgMC4wLCAwLjAsIDEuMCxcbiAgICAwLjAsIDEuMCwgMC4wLCAxLjAsXG4gICAgMC4wLCAwLjAsIDEuMCwgMS4wLFxuICBdKTtcblxuICBjb25zdCBjb2xvckJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoe1xuICAgIHNpemU6IGNvbG9ycy5ieXRlTGVuZ3RoLCAvLyBtYWtlIGl0IGJpZyBlbm91Z2ggdG8gc3RvcmUgdmVydGljZXMgaW5cbiAgICB1c2FnZTogR1BVQnVmZmVyVXNhZ2UuVkVSVEVYIHwgR1BVQnVmZmVyVXNhZ2UuQ09QWV9EU1QsXG4gIH0pO1xuICBkZXZpY2UucXVldWUud3JpdGVCdWZmZXIoY29sb3JCdWZmZXIsIDAsIGNvbG9ycywgMCwgY29sb3JzLmxlbmd0aCk7XG5cbiAgY29uc3QgdmVydGV4QnVmZmVyczogR1BVVmVydGV4QnVmZmVyTGF5b3V0W10gPSBbXG4gICAge1xuICAgICAgLy8gcG9zaXRpb25cbiAgICAgIGF0dHJpYnV0ZXM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHNoYWRlckxvY2F0aW9uOiAwLFxuICAgICAgICAgIG9mZnNldDogMCxcbiAgICAgICAgICBmb3JtYXQ6ICdmbG9hdDMyeDQnLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIGFycmF5U3RyaWRlOiAxNixcbiAgICAgIHN0ZXBNb2RlOiAndmVydGV4JyxcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIGNvbG9yXG4gICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBzaGFkZXJMb2NhdGlvbjogMSwgLy8gcG9zaXRpb25cbiAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgZm9ybWF0OiAnZmxvYXQzMng0JyxcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGFycmF5U3RyaWRlOiAxNixcbiAgICAgIHN0ZXBNb2RlOiAndmVydGV4JyxcbiAgICB9XG4gIF07XG5cbiAgLy8g44GT44GT44GL44KJ44OR44Kk44OX44Op44Kk44Oz44Gu6Kit5a6aXG5cbiAgY29uc3QgcGlwZWxpbmVEZXNjcmlwdG9yOiBHUFVSZW5kZXJQaXBlbGluZURlc2NyaXB0b3IgPSB7XG4gICAgdmVydGV4OiB7XG4gICAgICBtb2R1bGU6IHNoYWRlck1vZHVsZSxcbiAgICAgIGVudHJ5UG9pbnQ6ICd2ZXJ0ZXhfbWFpbicsXG4gICAgICBidWZmZXJzOiB2ZXJ0ZXhCdWZmZXJzLFxuICAgIH0sXG4gICAgZnJhZ21lbnQ6IHtcbiAgICAgIG1vZHVsZTogc2hhZGVyTW9kdWxlLFxuICAgICAgZW50cnlQb2ludDogJ2ZyYWdtZW50X21haW4nLFxuICAgICAgdGFyZ2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgZm9ybWF0OiBuYXZpZ2F0b3IuZ3B1LmdldFByZWZlcnJlZENhbnZhc0Zvcm1hdCgpLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIHByaW1pdGl2ZToge1xuICAgICAgdG9wb2xvZ3k6ICd0cmlhbmdsZS1saXN0JyxcbiAgICB9LFxuICAgIGxheW91dDogJ2F1dG8nLFxuICB9O1xuXG4gIGNvbnN0IHJlbmRlclBpcGVsaW5lID0gZGV2aWNlLmNyZWF0ZVJlbmRlclBpcGVsaW5lKHBpcGVsaW5lRGVzY3JpcHRvcik7XG5cbiAgY29uc3QgY29tbWFuZEVuY29kZXIgPSBkZXZpY2UuY3JlYXRlQ29tbWFuZEVuY29kZXIoKTtcblxuICAvLyDog4zmma/oibJcbiAgLy8gY29uc3QgY2xlYXJDb2xvciA9IHsgcjogMC4wLCBnOiAwLjUsIGI6IDEuMCwgYTogMS4wIH07XG4gIGNvbnN0IGNsZWFyQ29sb3IgPSB7IHI6IDAuMCwgZzogMC4wLCBiOiAwLjAsIGE6IDEuMCB9O1xuXG4gIGNvbnN0IHJlbmRlclBhc3NEZXNjcmlwdG9yOiBHUFVSZW5kZXJQYXNzRGVzY3JpcHRvciA9IHtcbiAgICBjb2xvckF0dGFjaG1lbnRzOiBbXG4gICAgICB7XG4gICAgICAgIGNsZWFyVmFsdWU6IGNsZWFyQ29sb3IsXG4gICAgICAgIGxvYWRPcDogJ2NsZWFyJyxcbiAgICAgICAgc3RvcmVPcDogJ3N0b3JlJyxcbiAgICAgICAgdmlldzogY3R4LmdldEN1cnJlbnRUZXh0dXJlKCkuY3JlYXRlVmlldygpLFxuICAgICAgfSxcbiAgICBdLFxuICB9O1xuXG4gIGNvbnN0IHBhc3NFbmNvZGVyID0gY29tbWFuZEVuY29kZXIuYmVnaW5SZW5kZXJQYXNzKHJlbmRlclBhc3NEZXNjcmlwdG9yKTtcblxuICBwYXNzRW5jb2Rlci5zZXRQaXBlbGluZShyZW5kZXJQaXBlbGluZSk7XG4gIC8vIHNsb3Qg44KS5YiG44GR44Gm44OQ44OD44OV44Kh44KS6Kit5a6a44GZ44KLXG4gIHBhc3NFbmNvZGVyLnNldFZlcnRleEJ1ZmZlcigwLCB2ZXJ0ZXhCdWZmZXIpO1xuICBwYXNzRW5jb2Rlci5zZXRWZXJ0ZXhCdWZmZXIoMSwgY29sb3JCdWZmZXIpO1xuICBwYXNzRW5jb2Rlci5kcmF3KDMpO1xuICBwYXNzRW5jb2Rlci5lbmQoKTtcblxuICBkZXZpY2UucXVldWUuc3VibWl0KFtjb21tYW5kRW5jb2Rlci5maW5pc2goKV0pO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGBcbnN0cnVjdCBWZXJ0ZXhPdXQge1xuICBAYnVpbHRpbihwb3NpdGlvbikgcG9zaXRpb24gOiB2ZWM0ZixcbiAgQGxvY2F0aW9uKDApIGNvbG9yIDogdmVjNGZcbn1cblxuQHZlcnRleFxuZm4gdmVydGV4X21haW4oQGxvY2F0aW9uKDApIHBvc2l0aW9uOiB2ZWM0ZixcbiAgICAgICAgICAgICAgIEBsb2NhdGlvbigxKSBjb2xvcjogdmVjNGYpIC0+IFZlcnRleE91dFxue1xuICB2YXIgb3V0cHV0IDogVmVydGV4T3V0O1xuICBvdXRwdXQucG9zaXRpb24gPSB2ZWM0KHBvc2l0aW9uLnh5eiAqIDAuNSwgcG9zaXRpb24udyk7XG4gIG91dHB1dC5jb2xvciA9IGNvbG9yO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5AZnJhZ21lbnRcbmZuIGZyYWdtZW50X21haW4oZnJhZ0RhdGE6IFZlcnRleE91dCkgLT4gQGxvY2F0aW9uKDApIHZlYzRmXG57XG4gIHJldHVybiBmcmFnRGF0YS5jb2xvcjtcbn1cbmA7XG4iLCJleHBvcnQgZGVmYXVsdCBgXG5AZ3JvdXAoMCkgQGJpbmRpbmcoMClcbnZhcjxzdG9yYWdlLCByZWFkX3dyaXRlPiBvdXRwdXQ6IGFycmF5PGYzMj47XG5cbi8vIOODkOODg+ODleOCoeOCkuWIneacn+WMllxuQGNvbXB1dGUgQHdvcmtncm91cF9zaXplKDY0KVxuZm4gaW5pdChAYnVpbHRpbihnbG9iYWxfaW52b2NhdGlvbl9pZCkgZ2xvYmFsX2lkIDogdmVjM3UpIHtcbiAgb3V0cHV0W2dsb2JhbF9pZC54XSA9IGYzMihnbG9iYWxfaWQueCkgKiAxMDAwLjtcbn1cblxuLy8g44OQ44OD44OV44Kh44Gu5YCk44KSMeOCpOODs+OCr+ODquODoeODs+ODiFxuQGNvbXB1dGUgQHdvcmtncm91cF9zaXplKDY0KVxuZm4gaW5jcmVtZW50KEBidWlsdGluKGdsb2JhbF9pbnZvY2F0aW9uX2lkKSBnbG9iYWxfaWQgOiB2ZWMzdSkge1xuICBvdXRwdXRbZ2xvYmFsX2lkLnhdICs9IDEuO1xufVxuYDtcbiIsImV4cG9ydCBkZWZhdWx0IGBcbnN0cnVjdCBWZXJ0ZXhPdXQge1xuICBAYnVpbHRpbihwb3NpdGlvbikgcG9zaXRpb24gOiB2ZWM0ZixcbiAgQGxvY2F0aW9uKDApIGNvbG9yIDogdmVjNGZcbn1cblxuQHZlcnRleFxuZm4gdmVydGV4X21haW4oQGxvY2F0aW9uKDApIHBvc2l0aW9uOiB2ZWMyZixcbiAgICAgICAgICAgICAgIEBsb2NhdGlvbigxKSB2ZWxvY2l0eTogdmVjMmYpIC0+IFZlcnRleE91dFxue1xuICB2YXIgb3V0cHV0IDogVmVydGV4T3V0O1xuICBvdXRwdXQucG9zaXRpb24gPSB2ZWM0Zihwb3NpdGlvbiwgMC4sIDEuKTtcbiAgb3V0cHV0LmNvbG9yID0gdmVjNGYoMS4sIDAuLCAwLiwgMS4pO1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5AZnJhZ21lbnRcbmZuIGZyYWdtZW50X21haW4oZnJhZ0RhdGE6IFZlcnRleE91dCkgLT4gQGxvY2F0aW9uKDApIHZlYzRmXG57XG4gIHJldHVybiBmcmFnRGF0YS5jb2xvcjtcbn1cblxuc3RydWN0IFBhcnRpY2xlIHtcbiAgcG9zaXRpb24gOiB2ZWMyZixcbiAgdmVsb2NpdHkgOiB2ZWMyZixcbn1cblxuQGJpbmRpbmcoMCkgQGdyb3VwKDApXG52YXI8c3RvcmFnZSwgcmVhZF93cml0ZT4gcGFydGljbGVzOiBhcnJheTxQYXJ0aWNsZT47XG5cbkBjb21wdXRlIEB3b3JrZ3JvdXBfc2l6ZSg2NClcbmZuIHVwZGF0ZShAYnVpbHRpbihnbG9iYWxfaW52b2NhdGlvbl9pZCkgZ2xvYmFsX2lkIDogdmVjM3UpIHtcbiAgbGV0IGcgPSB2ZWMyZigwLiwgMC4pO1xuICBsZXQgaWR4ID0gZ2xvYmFsX2lkLng7XG4gIGxldCBwID0gcGFydGljbGVzW2lkeF0ucG9zaXRpb247XG4gIGxldCB2ID0gcGFydGljbGVzW2lkeF0udmVsb2NpdHk7XG5cbiAgcGFydGljbGVzW2lkeF0ucG9zaXRpb24gPSBwICsgdiAqIC4yO1xuICBwYXJ0aWNsZXNbaWR4XS52ZWxvY2l0eSA9IHZcbiAgICAvLyDph43lipvliqDpgJ/luqZcbiAgICArICgoZyAtIHApIC8gcG93KGRpc3RhbmNlKGcsIHApICsgMS4sIDIuKSkgKiAuMDVcbiAgICAvLyDnqbrmsJfmirXmipdcbiAgICAtIHYgKiBwb3cobGVuZ3RoKHYpLCAyLikgKiAuMDU7XG59XG5gO1xuIiwiaW1wb3J0IHNoYWRlciBmcm9tICcuL3NoYWRlci53Z3NsJztcbi8qKlxuICogTUQ0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGFzeW5jICgpID0+IHtcbiAgY29uc3QgYWRhcHRlciA9IGF3YWl0IG5hdmlnYXRvci5ncHUucmVxdWVzdEFkYXB0ZXIoKTtcbiAgY29uc3QgZGV2aWNlID0gYXdhaXQgYWRhcHRlci5yZXF1ZXN0RGV2aWNlKCk7XG5cbiAgLy8g6KiI566X57WQ5p6c44Gu5L+d5a2Y5YWI44Gu44OQ44OD44OV44KhXG4gIGNvbnN0IHJlc3VsdEJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoe1xuICAgIHNpemU6IDE2LFxuICAgIHVzYWdlOiBHUFVCdWZmZXJVc2FnZS5TVE9SQUdFIHwgR1BVQnVmZmVyVXNhZ2UuQ09QWV9TUkMsXG4gIH0pO1xuXG4gIC8vIOe1kOaenOWPluOCiuWHuuOBl+eUqOOBruOCueODhuODvOOCuOODs+OCsOODkOODg+ODleOCoVxuICBjb25zdCBzdGFnaW5nQnVmZmVyID0gZGV2aWNlLmNyZWF0ZUJ1ZmZlcih7XG4gICAgc2l6ZTogMTYsXG4gICAgdXNhZ2U6IEdQVUJ1ZmZlclVzYWdlLk1BUF9SRUFEIHwgR1BVQnVmZmVyVXNhZ2UuQ09QWV9EU1QsXG4gIH0pO1xuXG5cbiAgLy8gY29tcHV0ZSBwaXBlbGluZSDjga7lrp/ooYxcbiAgY29uc3QgYmluZEdyb3VwTGF5b3V0ID0gZGV2aWNlLmNyZWF0ZUJpbmRHcm91cExheW91dCh7XG4gICAgZW50cmllczogW1xuICAgICAge1xuICAgICAgICBiaW5kaW5nOiAwLFxuICAgICAgICB2aXNpYmlsaXR5OiBHUFVTaGFkZXJTdGFnZS5DT01QVVRFLFxuICAgICAgICBidWZmZXI6IHtcbiAgICAgICAgICB0eXBlOiAnc3RvcmFnZScsXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIF0sXG4gIH0pO1xuXG4gIGNvbnN0IGJpbmRHcm91cCA9IGRldmljZS5jcmVhdGVCaW5kR3JvdXAoe1xuICAgIGxheW91dDogYmluZEdyb3VwTGF5b3V0LFxuICAgIGVudHJpZXM6IFtcbiAgICAgIHtcbiAgICAgICAgYmluZGluZzogMCxcbiAgICAgICAgcmVzb3VyY2U6IHtcbiAgICAgICAgICBidWZmZXI6IHJlc3VsdEJ1ZmZlcixcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSk7XG5cbiAgY29uc3Qgc2hhZGVyTW9kdWxlID0gZGV2aWNlLmNyZWF0ZVNoYWRlck1vZHVsZSh7XG4gICAgY29kZTogc2hhZGVyLFxuICB9KTtcblxuICBjb25zdCBjb21wdXRlUGlwZWxpbmUgPSBkZXZpY2UuY3JlYXRlQ29tcHV0ZVBpcGVsaW5lKHtcbiAgICBsYXlvdXQ6IGRldmljZS5jcmVhdGVQaXBlbGluZUxheW91dCh7XG4gICAgICBiaW5kR3JvdXBMYXlvdXRzOiBbYmluZEdyb3VwTGF5b3V0XSxcbiAgICB9KSxcbiAgICBjb21wdXRlOiB7XG4gICAgICBtb2R1bGU6IHNoYWRlck1vZHVsZSxcbiAgICAgIGVudHJ5UG9pbnQ6ICdtYWluJyxcbiAgICB9LFxuICB9KTtcblxuICBjb25zdCBjb21tYW5kRW5jb2RlciA9IGRldmljZS5jcmVhdGVDb21tYW5kRW5jb2RlcigpO1xuICBjb25zdCBjb21wdXRlUGFzcyA9IGNvbW1hbmRFbmNvZGVyLmJlZ2luQ29tcHV0ZVBhc3MoKTtcbiAgY29tcHV0ZVBhc3Muc2V0UGlwZWxpbmUoY29tcHV0ZVBpcGVsaW5lKTtcbiAgY29tcHV0ZVBhc3Muc2V0QmluZEdyb3VwKDAsIGJpbmRHcm91cCk7XG4gIGNvbXB1dGVQYXNzLmRpc3BhdGNoV29ya2dyb3VwcygxKTtcbiAgY29tcHV0ZVBhc3MuZW5kKCk7XG5cblxuICAvLyDntZDmnpzjga7lj5bjgorlh7rjgZcgJiDooajnpLpcbiAgY29tbWFuZEVuY29kZXIuY29weUJ1ZmZlclRvQnVmZmVyKFxuICAgIHJlc3VsdEJ1ZmZlcixcbiAgICAwLFxuICAgIHN0YWdpbmdCdWZmZXIsXG4gICAgMCxcbiAgICAxNlxuICApO1xuICBkZXZpY2UucXVldWUuc3VibWl0KFtjb21tYW5kRW5jb2Rlci5maW5pc2goKV0pO1xuICBhd2FpdCBzdGFnaW5nQnVmZmVyLm1hcEFzeW5jKFxuICAgIEdQVU1hcE1vZGUuUkVBRCxcbiAgICAwLFxuICAgIDE2XG4gICk7XG4gIGNvbnN0IGNvcHlBcnJheUJ1ZmZlciA9IHN0YWdpbmdCdWZmZXIuZ2V0TWFwcGVkUmFuZ2UoMCwgMTYpO1xuICBjb25zdCByZXN1bHQgPSBuZXcgVWludDhBcnJheShjb3B5QXJyYXlCdWZmZXIuc2xpY2UoMCkpO1xuICBzdGFnaW5nQnVmZmVyLnVubWFwKCk7XG4gIGxldCBoZXggPSAnJztcbiAgZm9yIChjb25zdCBlIG9mIHJlc3VsdCkge1xuICAgIGhleCArPSBlLnRvU3RyaW5nKDE2KTtcbiAgfVxuICBjb25zb2xlLmxvZyhoZXgpO1xufTtcbiIsImV4cG9ydCBkZWZhdWx0IGBcbmZuIEYoWDogdTMyLCBZOiB1MzIsIFo6IHUzMikgLT4gdTMyIHtcbiAgcmV0dXJuIChYICYgWSkgfCAoflggJiBaKTtcbn1cblxuZm4gRyhYOiB1MzIsIFk6IHUzMiwgWjogdTMyKSAtPiB1MzIge1xuICByZXR1cm4gKFggJiBZKSB8IChYICYgWikgfCAoWSAmIFopO1xufVxuXG5mbiBIKFg6IHUzMiwgWTogdTMyLCBaOiB1MzIpIC0+IHUzMiB7XG4gIHJldHVybiBYIF4gWSBeIFo7XG59XG5cbmZuIHJvdGF0ZShhOiB1MzIsIHM6IHUzMikgLT4gdTMyIHtcbiAgcmV0dXJuIChhIDw8IHMpIHwgKGEgPj4gKDMyIC0gcykpO1xufVxuXG5mbiBGRihhOiBwdHI8cHJpdmF0ZSx1MzI+LCBiOiB1MzIsIGM6IHUzMiwgZDogdTMyLCB4OiB1MzIsIHM6IHUzMikge1xuICAqYSA9IHJvdGF0ZSgqYSArIEYoYiwgYywgZCkgKyB4LCBzKTtcbn1cblxuZm4gR0coYTogcHRyPHByaXZhdGUsdTMyPiwgYjogdTMyLCBjOiB1MzIsIGQ6IHUzMiwgeDogdTMyLCBzOiB1MzIpIHtcbiAgKmEgPSByb3RhdGUoKmEgKyBHKGIsIGMsIGQpICsgeCArIDB4NWE4Mjc5OTl1LCBzKTtcbn1cblxuZm4gSEgoYTogcHRyPHByaXZhdGUsdTMyPiwgYjogdTMyLCBjOiB1MzIsIGQ6IHUzMiwgeDogdTMyLCBzOiB1MzIpIHtcbiAgKmEgPSByb3RhdGUoKmEgKyBIKGIsIGMsIGQpICsgeCArIDB4NmVkOWViYTF1LCBzKTtcbn1cblxudmFyPHByaXZhdGU+IEEgPSAweDY3NDUyMzAxdTtcbnZhcjxwcml2YXRlPiBCID0gMHhlZmNkYWI4OXU7XG52YXI8cHJpdmF0ZT4gQyA9IDB4OThiYWRjZmV1O1xudmFyPHByaXZhdGU+IEQgPSAweDEwMzI1NDc2dTtcblxuZm4gdXBkYXRlKFg6IGFycmF5PHUzMiwgMTY+KSB7XG4gIGxldCBBQSA9IEE7XG4gIGxldCBCQiA9IEI7XG4gIGxldCBDQyA9IEM7XG4gIGxldCBERCA9IEQ7XG5cbiAgRkYoJkEsIEIsIEMsIEQsIFhbMF0sIDMpO1xuICBGRigmRCwgQSwgQiwgQywgWFsxXSwgNyk7XG4gIEZGKCZDLCBELCBBLCBCLCBYWzJdLCAxMSk7XG4gIEZGKCZCLCBDLCBELCBBLCBYWzNdLCAxOSk7XG4gIEZGKCZBLCBCLCBDLCBELCBYWzRdLCAzKTtcbiAgRkYoJkQsIEEsIEIsIEMsIFhbNV0sIDcpO1xuICBGRigmQywgRCwgQSwgQiwgWFs2XSwgMTEpO1xuICBGRigmQiwgQywgRCwgQSwgWFs3XSwgMTkpO1xuICBGRigmQSwgQiwgQywgRCwgWFs4XSwgMyk7XG4gIEZGKCZELCBBLCBCLCBDLCBYWzldLCA3KTtcbiAgRkYoJkMsIEQsIEEsIEIsIFhbMTBdLCAxMSk7XG4gIEZGKCZCLCBDLCBELCBBLCBYWzExXSwgMTkpO1xuICBGRigmQSwgQiwgQywgRCwgWFsxMl0sIDMpO1xuICBGRigmRCwgQSwgQiwgQywgWFsxM10sIDcpO1xuICBGRigmQywgRCwgQSwgQiwgWFsxNF0sIDExKTtcbiAgRkYoJkIsIEMsIEQsIEEsIFhbMTVdLCAxOSk7XG5cbiAgR0coJkEsIEIsIEMsIEQsIFhbMF0sIDMpO1xuICBHRygmRCwgQSwgQiwgQywgWFs0XSwgNSk7XG4gIEdHKCZDLCBELCBBLCBCLCBYWzhdLCA5KTtcbiAgR0coJkIsIEMsIEQsIEEsIFhbMTJdLCAxMyk7XG4gIEdHKCZBLCBCLCBDLCBELCBYWzFdLCAzKTtcbiAgR0coJkQsIEEsIEIsIEMsIFhbNV0sIDUpO1xuICBHRygmQywgRCwgQSwgQiwgWFs5XSwgOSk7XG4gIEdHKCZCLCBDLCBELCBBLCBYWzEzXSwgMTMpO1xuICBHRygmQSwgQiwgQywgRCwgWFsyXSwgMyk7XG4gIEdHKCZELCBBLCBCLCBDLCBYWzZdLCA1KTtcbiAgR0coJkMsIEQsIEEsIEIsIFhbMTBdLCA5KTtcbiAgR0coJkIsIEMsIEQsIEEsIFhbMTRdLCAxMyk7XG4gIEdHKCZBLCBCLCBDLCBELCBYWzNdLCAzKTtcbiAgR0coJkQsIEEsIEIsIEMsIFhbN10sIDUpO1xuICBHRygmQywgRCwgQSwgQiwgWFsxMV0sIDkpO1xuICBHRygmQiwgQywgRCwgQSwgWFsxNV0sIDEzKTtcblxuICBISCgmQSwgQiwgQywgRCwgWFswXSwgMyk7XG4gIEhIKCZELCBBLCBCLCBDLCBYWzhdLCA5KTtcbiAgSEgoJkMsIEQsIEEsIEIsIFhbNF0sIDExKTtcbiAgSEgoJkIsIEMsIEQsIEEsIFhbMTJdLCAxNSk7XG4gIEhIKCZBLCBCLCBDLCBELCBYWzJdLCAzKTtcbiAgSEgoJkQsIEEsIEIsIEMsIFhbMTBdLCA5KTtcbiAgSEgoJkMsIEQsIEEsIEIsIFhbNl0sIDExKTtcbiAgSEgoJkIsIEMsIEQsIEEsIFhbMTRdLCAxNSk7XG4gIEhIKCZBLCBCLCBDLCBELCBYWzFdLCAzKTtcbiAgSEgoJkQsIEEsIEIsIEMsIFhbOV0sIDkpO1xuICBISCgmQywgRCwgQSwgQiwgWFs1XSwgMTEpO1xuICBISCgmQiwgQywgRCwgQSwgWFsxM10sIDE1KTtcbiAgSEgoJkEsIEIsIEMsIEQsIFhbM10sIDMpO1xuICBISCgmRCwgQSwgQiwgQywgWFsxMV0sIDkpO1xuICBISCgmQywgRCwgQSwgQiwgWFs3XSwgMTEpO1xuICBISCgmQiwgQywgRCwgQSwgWFsxNV0sIDE1KTtcblxuICBBICs9IEFBO1xuICBCICs9IEJCO1xuICBDICs9IENDO1xuICBEICs9IEREO1xufVxuXG5AZ3JvdXAoMCkgQGJpbmRpbmcoMClcbnZhcjxzdG9yYWdlLCByZWFkX3dyaXRlPiByZXN1bHQ6IHZlYzR1O1xuXG5AY29tcHV0ZSBAd29ya2dyb3VwX3NpemUoMSlcbmZuIG1haW4oKSB7XG4gIC8vICdiYWFhJyDjga4gbWQ0IOOCkuioiOeul1xuICB1cGRhdGUoYXJyYXk8dTMyLCAxNj4oXG4gICAgMHg2MTYxNjE2MnUsIDB4ODB1LCAwdSwgMHUsXG4gICAgMHUsIDB1LCAwdSwgMHUsXG4gICAgMHUsIDB1LCAwdSwgMHUsXG4gICAgMHUsIDB1LCAzMnUsIDB1KSk7XG4gIHJlc3VsdCA9IHZlYzR1KEEsIEIsIEMsIEQpO1xufVxuYDtcbiIsImV4cG9ydCBjb25zdCBXT1JLR1JPVVBfQ09VTlRfQklUUyA9IDE0O1xuZXhwb3J0IGNvbnN0IFdPUktHUk9VUF9TSVpFX0JJVFMgPSA2O1xuXG5leHBvcnQgZGVmYXVsdCBgXG5mbiBGKFg6IHUzMiwgWTogdTMyLCBaOiB1MzIpIC0+IHUzMiB7XG4gIHJldHVybiAoWCAmIFkpIHwgKH5YICYgWik7XG59XG5cbmZuIEcoWDogdTMyLCBZOiB1MzIsIFo6IHUzMikgLT4gdTMyIHtcbiAgcmV0dXJuIChYICYgWSkgfCAoWCAmIFopIHwgKFkgJiBaKTtcbn1cblxuZm4gSChYOiB1MzIsIFk6IHUzMiwgWjogdTMyKSAtPiB1MzIge1xuICByZXR1cm4gWCBeIFkgXiBaO1xufVxuXG5mbiByb3RhdGUoYTogdTMyLCBzOiB1MzIpIC0+IHUzMiB7XG4gIHJldHVybiAoYSA8PCBzKSB8IChhID4+ICgzMiAtIHMpKTtcbn1cblxuZm4gRkYoYTogcHRyPHByaXZhdGUsdTMyPiwgYjogdTMyLCBjOiB1MzIsIGQ6IHUzMiwgeDogdTMyLCBzOiB1MzIpIHtcbiAgKmEgPSByb3RhdGUoKmEgKyBGKGIsIGMsIGQpICsgeCwgcyk7XG59XG5cbmZuIEdHKGE6IHB0cjxwcml2YXRlLHUzMj4sIGI6IHUzMiwgYzogdTMyLCBkOiB1MzIsIHg6IHUzMiwgczogdTMyKSB7XG4gICphID0gcm90YXRlKCphICsgRyhiLCBjLCBkKSArIHggKyAweDVhODI3OTk5dSwgcyk7XG59XG5cbmZuIEhIKGE6IHB0cjxwcml2YXRlLHUzMj4sIGI6IHUzMiwgYzogdTMyLCBkOiB1MzIsIHg6IHUzMiwgczogdTMyKSB7XG4gICphID0gcm90YXRlKCphICsgSChiLCBjLCBkKSArIHggKyAweDZlZDllYmExdSwgcyk7XG59XG5cbnZhcjxwcml2YXRlPiBBOiB1MzI7XG52YXI8cHJpdmF0ZT4gQjogdTMyO1xudmFyPHByaXZhdGU+IEM6IHUzMjtcbnZhcjxwcml2YXRlPiBEOiB1MzI7XG5cbmZuIHVwZGF0ZShYOiBhcnJheTx1MzIsIDE2Pikge1xuICBsZXQgQUEgPSBBO1xuICBsZXQgQkIgPSBCO1xuICBsZXQgQ0MgPSBDO1xuICBsZXQgREQgPSBEO1xuXG4gIEZGKCZBLCBCLCBDLCBELCBYWzBdLCAzKTtcbiAgRkYoJkQsIEEsIEIsIEMsIFhbMV0sIDcpO1xuICBGRigmQywgRCwgQSwgQiwgWFsyXSwgMTEpO1xuICBGRigmQiwgQywgRCwgQSwgWFszXSwgMTkpO1xuICBGRigmQSwgQiwgQywgRCwgWFs0XSwgMyk7XG4gIEZGKCZELCBBLCBCLCBDLCBYWzVdLCA3KTtcbiAgRkYoJkMsIEQsIEEsIEIsIFhbNl0sIDExKTtcbiAgRkYoJkIsIEMsIEQsIEEsIFhbN10sIDE5KTtcbiAgRkYoJkEsIEIsIEMsIEQsIFhbOF0sIDMpO1xuICBGRigmRCwgQSwgQiwgQywgWFs5XSwgNyk7XG4gIEZGKCZDLCBELCBBLCBCLCBYWzEwXSwgMTEpO1xuICBGRigmQiwgQywgRCwgQSwgWFsxMV0sIDE5KTtcbiAgRkYoJkEsIEIsIEMsIEQsIFhbMTJdLCAzKTtcbiAgRkYoJkQsIEEsIEIsIEMsIFhbMTNdLCA3KTtcbiAgRkYoJkMsIEQsIEEsIEIsIFhbMTRdLCAxMSk7XG4gIEZGKCZCLCBDLCBELCBBLCBYWzE1XSwgMTkpO1xuXG4gIEdHKCZBLCBCLCBDLCBELCBYWzBdLCAzKTtcbiAgR0coJkQsIEEsIEIsIEMsIFhbNF0sIDUpO1xuICBHRygmQywgRCwgQSwgQiwgWFs4XSwgOSk7XG4gIEdHKCZCLCBDLCBELCBBLCBYWzEyXSwgMTMpO1xuICBHRygmQSwgQiwgQywgRCwgWFsxXSwgMyk7XG4gIEdHKCZELCBBLCBCLCBDLCBYWzVdLCA1KTtcbiAgR0coJkMsIEQsIEEsIEIsIFhbOV0sIDkpO1xuICBHRygmQiwgQywgRCwgQSwgWFsxM10sIDEzKTtcbiAgR0coJkEsIEIsIEMsIEQsIFhbMl0sIDMpO1xuICBHRygmRCwgQSwgQiwgQywgWFs2XSwgNSk7XG4gIEdHKCZDLCBELCBBLCBCLCBYWzEwXSwgOSk7XG4gIEdHKCZCLCBDLCBELCBBLCBYWzE0XSwgMTMpO1xuICBHRygmQSwgQiwgQywgRCwgWFszXSwgMyk7XG4gIEdHKCZELCBBLCBCLCBDLCBYWzddLCA1KTtcbiAgR0coJkMsIEQsIEEsIEIsIFhbMTFdLCA5KTtcbiAgR0coJkIsIEMsIEQsIEEsIFhbMTVdLCAxMyk7XG5cbiAgSEgoJkEsIEIsIEMsIEQsIFhbMF0sIDMpO1xuICBISCgmRCwgQSwgQiwgQywgWFs4XSwgOSk7XG4gIEhIKCZDLCBELCBBLCBCLCBYWzRdLCAxMSk7XG4gIEhIKCZCLCBDLCBELCBBLCBYWzEyXSwgMTUpO1xuICBISCgmQSwgQiwgQywgRCwgWFsyXSwgMyk7XG4gIEhIKCZELCBBLCBCLCBDLCBYWzEwXSwgOSk7XG4gIEhIKCZDLCBELCBBLCBCLCBYWzZdLCAxMSk7XG4gIEhIKCZCLCBDLCBELCBBLCBYWzE0XSwgMTUpO1xuICBISCgmQSwgQiwgQywgRCwgWFsxXSwgMyk7XG4gIEhIKCZELCBBLCBCLCBDLCBYWzldLCA5KTtcbiAgSEgoJkMsIEQsIEEsIEIsIFhbNV0sIDExKTtcbiAgSEgoJkIsIEMsIEQsIEEsIFhbMTNdLCAxNSk7XG4gIEhIKCZBLCBCLCBDLCBELCBYWzNdLCAzKTtcbiAgSEgoJkQsIEEsIEIsIEMsIFhbMTFdLCA5KTtcbiAgSEgoJkMsIEQsIEEsIEIsIFhbN10sIDExKTtcbiAgSEgoJkIsIEMsIEQsIEEsIFhbMTVdLCAxNSk7XG5cbiAgQSArPSBBQTtcbiAgQiArPSBCQjtcbiAgQyArPSBDQztcbiAgRCArPSBERDtcbn1cblxuQGdyb3VwKDApIEBiaW5kaW5nKDApXG52YXI8c3RvcmFnZSwgcmVhZF93cml0ZT4gcmVzdWx0OiBhcnJheTx1MzI+O1xuXG5AY29tcHV0ZSBAd29ya2dyb3VwX3NpemUoMSA8PCAke1dPUktHUk9VUF9TSVpFX0JJVFN9KVxuZm4gbWFpbihAYnVpbHRpbihnbG9iYWxfaW52b2NhdGlvbl9pZCkgZ2xvYmFsX2lkIDogdmVjM3UpIHtcbiAgLy8g44OP44OD44K344Ol5YCk44Gu5YWI6aCt44GMIDAwMDAwMDAwIOOBruWFpeWKm+OCkuaOouOBmVxuICBmb3IgKHZhciBpID0gMHU7IGkgPCAxIDw8ICgzMiAtICR7V09SS0dST1VQX0NPVU5UX0JJVFN9IC0gJHtXT1JLR1JPVVBfU0laRV9CSVRTfSk7IGkrKykge1xuICAgIEEgPSAweDY3NDUyMzAxdTtcbiAgICBCID0gMHhlZmNkYWI4OXU7XG4gICAgQyA9IDB4OThiYWRjZmV1O1xuICAgIEQgPSAweDEwMzI1NDc2dTtcblxuICAgIGxldCB3b3JkID0gKGdsb2JhbF9pZC54IDw8ICgzMiAtICR7V09SS0dST1VQX0NPVU5UX0JJVFN9IC0gJHtXT1JLR1JPVVBfU0laRV9CSVRTfSkpIHwgaTtcbiAgICB1cGRhdGUoYXJyYXk8dTMyLCAxNj4oXG4gICAgICB3b3JkLCAweDgwdSwgMHUsIDB1LFxuICAgICAgMHUsIDB1LCAwdSwgMHUsXG4gICAgICAwdSwgMHUsIDB1LCAwdSxcbiAgICAgIDB1LCAwdSwgMzJ1LCAwdSkpO1xuICAgIGlmIChBID09IDB4MDAwMDAwMDB1KSB7XG4gICAgICByZXN1bHRbZ2xvYmFsX2lkLnhdID0gd29yZDtcbiAgICAgIC8vYnJlYWs7XG4gICAgfVxuICAgIC8vcmVzdWx0W2dsb2JhbF9pZC54XSA9IHNlbGVjdChyZXN1bHRbZ2xvYmFsX2lkLnhdLCB3b3JkLCBBID09IDB4MDAwMDAwMDB1KTtcbiAgfVxufVxuYDtcbiIsImltcG9ydCBzaGFkZXIgZnJvbSAnLi9zaGFkZXIud2dzbCc7XG4vKipcbiAqIOOCuOOCquODoeODiOODquOCpOODs+OCueOCv+ODs+OCt+ODs+OCsFxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IGN2cyA9IGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJykpO1xuICBjdnMud2lkdGggPSA1MDA7XG4gIGN2cy5oZWlnaHQgPSA1MDA7XG5cbiAgY29uc3QgY3R4ID0gY3ZzLmdldENvbnRleHQoJ3dlYmdwdScpO1xuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhd2FpdCBuYXZpZ2F0b3IuZ3B1LnJlcXVlc3RBZGFwdGVyKCk7XG4gIGNvbnN0IGRldmljZSA9IGF3YWl0IGFkYXB0ZXIucmVxdWVzdERldmljZSgpO1xuXG4gIGNvbnN0IHNoYWRlck1vZHVsZSA9IGRldmljZS5jcmVhdGVTaGFkZXJNb2R1bGUoe1xuICAgIGNvZGU6IHNoYWRlcixcbiAgfSk7XG5cbiAgY3R4LmNvbmZpZ3VyZSh7XG4gICAgZGV2aWNlOiBkZXZpY2UsXG4gICAgZm9ybWF0OiBuYXZpZ2F0b3IuZ3B1LmdldFByZWZlcnJlZENhbnZhc0Zvcm1hdCgpLFxuICAgIGFscGhhTW9kZTogJ3ByZW11bHRpcGxpZWQnLFxuICB9KTtcblxuICAvLyBwb3NpdGlvbnNcbiAgY29uc3QgTlVNX0lOU1RBTkNFUyA9IDEwMDtcbiAgY29uc3QgcG9zaXRpb25MaXN0OiBudW1iZXJbXSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IE5VTV9JTlNUQU5DRVM7IGkrKykge1xuICAgIHBvc2l0aW9uTGlzdC5wdXNoKFxuICAgICAgTWF0aC5mbG9vcigoTWF0aC5yYW5kb20oKSAtIDAuNSkgKiAyMCksXG4gICAgICBNYXRoLmZsb29yKChNYXRoLnJhbmRvbSgpIC0gMC41KSAqIDIwKVxuICAgICk7XG4gIH1cbiAgY29uc3QgcG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheShwb3NpdGlvbkxpc3QpO1xuXG4gIGNvbnN0IHBvc2l0aW9uQnVmZmVyID0gZGV2aWNlLmNyZWF0ZUJ1ZmZlcih7XG4gICAgc2l6ZTogcG9zaXRpb25zLmJ5dGVMZW5ndGgsXG4gICAgdXNhZ2U6IEdQVUJ1ZmZlclVzYWdlLlZFUlRFWCB8IEdQVUJ1ZmZlclVzYWdlLkNPUFlfRFNULFxuICB9KTtcbiAgZGV2aWNlLnF1ZXVlLndyaXRlQnVmZmVyKHBvc2l0aW9uQnVmZmVyLCAwLCBwb3NpdGlvbnMsIDAsIHBvc2l0aW9ucy5sZW5ndGgpO1xuXG4gIC8vIG9mZnNldHNcbiAgY29uc3Qgb2Zmc2V0cyA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgIDAuMCwgMS4wLFxuICAgIDEuMCwgLTEuMCxcbiAgICAtMS4wLCAtMS4wLFxuICBdKTtcblxuICBjb25zdCB2ZXJ0ZXhCdWZmZXIgPSBkZXZpY2UuY3JlYXRlQnVmZmVyKHtcbiAgICBzaXplOiBvZmZzZXRzLmJ5dGVMZW5ndGgsXG4gICAgdXNhZ2U6IEdQVUJ1ZmZlclVzYWdlLlZFUlRFWCB8IEdQVUJ1ZmZlclVzYWdlLkNPUFlfRFNULFxuICB9KTtcbiAgZGV2aWNlLnF1ZXVlLndyaXRlQnVmZmVyKHZlcnRleEJ1ZmZlciwgMCwgb2Zmc2V0cywgMCwgb2Zmc2V0cy5sZW5ndGgpO1xuXG4gIC8vIGNvbG9yc1xuICBjb25zdCBjb2xvcnMgPSBuZXcgRmxvYXQzMkFycmF5KFtcbiAgICAxLjAsIDAuMCwgMC4wLCAxLjAsXG4gICAgMC4wLCAxLjAsIDAuMCwgMS4wLFxuICAgIDAuMCwgMC4wLCAxLjAsIDEuMCxcbiAgXSk7XG5cblxuICBjb25zdCBjb2xvckJ1ZmZlciA9IGRldmljZS5jcmVhdGVCdWZmZXIoe1xuICAgIHNpemU6IGNvbG9ycy5ieXRlTGVuZ3RoLFxuICAgIHVzYWdlOiBHUFVCdWZmZXJVc2FnZS5WRVJURVggfCBHUFVCdWZmZXJVc2FnZS5DT1BZX0RTVCxcbiAgfSk7XG4gIGRldmljZS5xdWV1ZS53cml0ZUJ1ZmZlcihjb2xvckJ1ZmZlciwgMCwgY29sb3JzLCAwLCBjb2xvcnMubGVuZ3RoKTtcblxuICBjb25zdCB2ZXJ0ZXhCdWZmZXJzOiBHUFVWZXJ0ZXhCdWZmZXJMYXlvdXRbXSA9IFtcbiAgICB7XG4gICAgICAvLyBwb3NpdGlvblxuICAgICAgYXR0cmlidXRlczogW1xuICAgICAgICB7XG4gICAgICAgICAgc2hhZGVyTG9jYXRpb246IDAsXG4gICAgICAgICAgb2Zmc2V0OiAwLFxuICAgICAgICAgIGZvcm1hdDogJ2Zsb2F0MzJ4MicsXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBhcnJheVN0cmlkZTogOCxcbiAgICAgIHN0ZXBNb2RlOiAnaW5zdGFuY2UnLFxuICAgIH0sXG4gICAge1xuICAgICAgLy8gb2Zmc2V0XG4gICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBzaGFkZXJMb2NhdGlvbjogMSxcbiAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgZm9ybWF0OiAnZmxvYXQzMngyJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBhcnJheVN0cmlkZTogOCxcbiAgICAgIHN0ZXBNb2RlOiAndmVydGV4JyxcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIGNvbG9yXG4gICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBzaGFkZXJMb2NhdGlvbjogMixcbiAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgZm9ybWF0OiAnZmxvYXQzMng0JyxcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGFycmF5U3RyaWRlOiAxNixcbiAgICAgIHN0ZXBNb2RlOiAndmVydGV4JyxcbiAgICB9XG4gIF07XG5cbiAgLy8g44GT44GT44GL44KJ44OR44Kk44OX44Op44Kk44Oz44Gu6Kit5a6aXG5cbiAgY29uc3QgcGlwZWxpbmVEZXNjcmlwdG9yOiBHUFVSZW5kZXJQaXBlbGluZURlc2NyaXB0b3IgPSB7XG4gICAgdmVydGV4OiB7XG4gICAgICBtb2R1bGU6IHNoYWRlck1vZHVsZSxcbiAgICAgIGVudHJ5UG9pbnQ6ICd2ZXJ0ZXhfbWFpbicsXG4gICAgICBidWZmZXJzOiB2ZXJ0ZXhCdWZmZXJzLFxuICAgIH0sXG4gICAgZnJhZ21lbnQ6IHtcbiAgICAgIG1vZHVsZTogc2hhZGVyTW9kdWxlLFxuICAgICAgZW50cnlQb2ludDogJ2ZyYWdtZW50X21haW4nLFxuICAgICAgdGFyZ2V0czogW1xuICAgICAgICB7XG4gICAgICAgICAgZm9ybWF0OiBuYXZpZ2F0b3IuZ3B1LmdldFByZWZlcnJlZENhbnZhc0Zvcm1hdCgpLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9LFxuICAgIHByaW1pdGl2ZToge1xuICAgICAgdG9wb2xvZ3k6ICd0cmlhbmdsZS1saXN0JyxcbiAgICB9LFxuICAgIGxheW91dDogJ2F1dG8nLFxuICB9O1xuXG4gIGNvbnN0IHJlbmRlclBpcGVsaW5lID0gZGV2aWNlLmNyZWF0ZVJlbmRlclBpcGVsaW5lKHBpcGVsaW5lRGVzY3JpcHRvcik7XG5cbiAgY29uc3QgY29tbWFuZEVuY29kZXIgPSBkZXZpY2UuY3JlYXRlQ29tbWFuZEVuY29kZXIoKTtcblxuICAvLyDog4zmma/oibJcbiAgY29uc3QgY2xlYXJDb2xvciA9IHsgcjogMC4wLCBnOiAwLjAsIGI6IDAuMCwgYTogMS4wIH07XG5cbiAgY29uc3QgcmVuZGVyUGFzc0Rlc2NyaXB0b3I6IEdQVVJlbmRlclBhc3NEZXNjcmlwdG9yID0ge1xuICAgIGNvbG9yQXR0YWNobWVudHM6IFtcbiAgICAgIHtcbiAgICAgICAgY2xlYXJWYWx1ZTogY2xlYXJDb2xvcixcbiAgICAgICAgbG9hZE9wOiAnY2xlYXInLFxuICAgICAgICBzdG9yZU9wOiAnc3RvcmUnLFxuICAgICAgICB2aWV3OiBjdHguZ2V0Q3VycmVudFRleHR1cmUoKS5jcmVhdGVWaWV3KCksXG4gICAgICB9LFxuICAgIF0sXG4gIH07XG5cbiAgY29uc3QgcGFzc0VuY29kZXIgPSBjb21tYW5kRW5jb2Rlci5iZWdpblJlbmRlclBhc3MocmVuZGVyUGFzc0Rlc2NyaXB0b3IpO1xuXG4gIHBhc3NFbmNvZGVyLnNldFBpcGVsaW5lKHJlbmRlclBpcGVsaW5lKTtcbiAgcGFzc0VuY29kZXIuc2V0VmVydGV4QnVmZmVyKDAsIHBvc2l0aW9uQnVmZmVyKTtcbiAgcGFzc0VuY29kZXIuc2V0VmVydGV4QnVmZmVyKDEsIHZlcnRleEJ1ZmZlcik7XG4gIHBhc3NFbmNvZGVyLnNldFZlcnRleEJ1ZmZlcigyLCBjb2xvckJ1ZmZlcik7XG4gIHBhc3NFbmNvZGVyLmRyYXcoMywgTlVNX0lOU1RBTkNFUyk7XG4gIHBhc3NFbmNvZGVyLmVuZCgpO1xuXG4gIGRldmljZS5xdWV1ZS5zdWJtaXQoW2NvbW1hbmRFbmNvZGVyLmZpbmlzaCgpXSk7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgYFxuc3RydWN0IFZlcnRleE91dCB7XG4gIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbiA6IHZlYzRmLFxuICBAbG9jYXRpb24oMCkgY29sb3IgOiB2ZWM0ZlxufVxuXG5AdmVydGV4XG5mbiB2ZXJ0ZXhfbWFpbihAbG9jYXRpb24oMCkgcG9zaXRpb246IHZlYzJmLFxuICAgICAgICAgICAgICAgQGxvY2F0aW9uKDEpIG9mZnNldDogdmVjMmYsXG4gICAgICAgICAgICAgICBAbG9jYXRpb24oMikgY29sb3I6IHZlYzRmKSAtPiBWZXJ0ZXhPdXRcbntcbiAgdmFyIG91dHB1dCA6IFZlcnRleE91dDtcbiAgb3V0cHV0LnBvc2l0aW9uID0gdmVjNCgocG9zaXRpb24gKyBvZmZzZXQpICogMC4xLCAwLiwgMS4pO1xuICBvdXRwdXQuY29sb3IgPSBjb2xvcjtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuQGZyYWdtZW50XG5mbiBmcmFnbWVudF9tYWluKGZyYWdEYXRhOiBWZXJ0ZXhPdXQpIC0+IEBsb2NhdGlvbigwKSB2ZWM0Zlxue1xuICByZXR1cm4gZnJhZ0RhdGEuY29sb3I7XG59XG5gO1xuIiwiaW1wb3J0IHsgTWF0cml4IH0gZnJvbSAnLi9tYXRyaXgnO1xuaW1wb3J0IHNoYWRlciBmcm9tICcuL3NoYWRlci53Z3NsJztcbi8qKlxuICogVGV4dHVyZVxuICovXG5mdW5jdGlvbiBmZXRjaEltYWdlKHNyYzogc3RyaW5nKTogUHJvbWlzZTxIVE1MSW1hZ2VFbGVtZW50PiB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgY29uc3QgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgaW1nLm9ubG9hZCA9ICgpID0+IHJlc29sdmUoaW1nKTtcbiAgICBpbWcub25lcnJvciA9IChlKSA9PiByZWplY3QoZSk7XG4gICAgaW1nLnNyYyA9IHNyYztcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jICgpID0+IHtcbiAgY29uc3QgY3ZzID0gZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKSk7XG4gIGN2cy53aWR0aCA9IDUwMDtcbiAgY3ZzLmhlaWdodCA9IDUwMDtcblxuICBjb25zdCBjdHggPSBjdnMuZ2V0Q29udGV4dCgnd2ViZ3B1Jyk7XG5cbiAgY29uc3QgYWRhcHRlciA9IGF3YWl0IG5hdmlnYXRvci5ncHUucmVxdWVzdEFkYXB0ZXIoKTtcbiAgY29uc3QgZGV2aWNlID0gYXdhaXQgYWRhcHRlci5yZXF1ZXN0RGV2aWNlKCk7XG5cbiAgY29uc3Qgc2hhZGVyTW9kdWxlID0gZGV2aWNlLmNyZWF0ZVNoYWRlck1vZHVsZSh7XG4gICAgY29kZTogc2hhZGVyLFxuICB9KTtcblxuICBjdHguY29uZmlndXJlKHtcbiAgICBkZXZpY2U6IGRldmljZSxcbiAgICBmb3JtYXQ6IG5hdmlnYXRvci5ncHUuZ2V0UHJlZmVycmVkQ2FudmFzRm9ybWF0KCksXG4gICAgYWxwaGFNb2RlOiAncHJlbXVsdGlwbGllZCcsXG4gIH0pO1xuXG4gIC8vIHZlcnRpY2VzXG4gIGNvbnN0IHZlcnRpY2VzID0gbmV3IEZsb2F0MzJBcnJheShbXG4gICAgLy8g5LiK6Z2iXG4gICAgLTAuNSwgMC41LCAwLjUsXG4gICAgMC41LCAwLjUsIDAuNSxcbiAgICAwLjUsIDAuNSwgLTAuNSxcbiAgICAtMC41LCAwLjUsIDAuNSxcbiAgICAwLjUsIDAuNSwgLTAuNSxcbiAgICAtMC41LCAwLjUsIC0wLjUsXG4gICAgLy8g5bqV6Z2iXG4gICAgLTAuNSwgLTAuNSwgMC41LFxuICAgIC0wLjUsIC0wLjUsIC0wLjUsXG4gICAgMC41LCAtMC41LCAtMC41LFxuICAgIC0wLjUsIC0wLjUsIDAuNSxcbiAgICAwLjUsIC0wLjUsIC0wLjUsXG4gICAgMC41LCAtMC41LCAwLjUsXG4gICAgLy8g5bem6Z2iXG4gICAgLTAuNSwgMC41LCAwLjUsXG4gICAgLTAuNSwgMC41LCAtMC41LFxuICAgIC0wLjUsIC0wLjUsIC0wLjUsXG4gICAgLTAuNSwgMC41LCAwLjUsXG4gICAgLTAuNSwgLTAuNSwgLTAuNSxcbiAgICAtMC41LCAtMC41LCAwLjUsXG4gICAgLy8g5Y+z6Z2iXG4gICAgMC41LCAwLjUsIDAuNSxcbiAgICAwLjUsIC0wLjUsIDAuNSxcbiAgICAwLjUsIC0wLjUsIC0wLjUsXG4gICAgMC41LCAwLjUsIDAuNSxcbiAgICAwLjUsIC0wLjUsIC0wLjUsXG4gICAgMC41LCAwLjUsIC0wLjUsXG4gICAgLy8g5YmN6Z2iXG4gICAgLTAuNSwgMC41LCAwLjUsXG4gICAgLTAuNSwgLTAuNSwgMC41LFxuICAgIDAuNSwgLTAuNSwgMC41LFxuICAgIC0wLjUsIDAuNSwgMC41LFxuICAgIDAuNSwgLTAuNSwgMC41LFxuICAgIDAuNSwgMC41LCAwLjUsXG4gICAgLy8g5aWl6Z2iXG4gICAgLTAuNSwgMC41LCAtMC41LFxuICAgIDAuNSwgMC41LCAtMC41LFxuICAgIDAuNSwgLTAuNSwgLTAuNSxcbiAgICAtMC41LCAwLjUsIC0wLjUsXG4gICAgMC41LCAtMC41LCAtMC41LFxuICAgIC0wLjUsIC0wLjUsIC0wLjVcbiAgXSk7XG5cbiAgY29uc3QgdmVydGV4QnVmZmVyID0gZGV2aWNlLmNyZWF0ZUJ1ZmZlcih7XG4gICAgc2l6ZTogdmVydGljZXMuYnl0ZUxlbmd0aCxcbiAgICB1c2FnZTogR1BVQnVmZmVyVXNhZ2UuVkVSVEVYIHwgR1BVQnVmZmVyVXNhZ2UuQ09QWV9EU1QsXG4gIH0pO1xuICBkZXZpY2UucXVldWUud3JpdGVCdWZmZXIodmVydGV4QnVmZmVyLCAwLCB2ZXJ0aWNlcywgMCwgdmVydGljZXMubGVuZ3RoKTtcblxuICAvLyB1dlxuICBjb25zdCB1diA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICAgIC8vIOS4iumdolxuICAgIDEgLyA0LCAxIC8gMyxcbiAgICAyIC8gNCwgMSAvIDMsXG4gICAgMiAvIDQsIDAgLyAzLFxuICAgIDEgLyA0LCAxIC8gMyxcbiAgICAyIC8gNCwgMCAvIDMsXG4gICAgMSAvIDQsIDAgLyAzLFxuICAgIC8vIOW6lemdolxuICAgIDEgLyA0LCAyIC8gMyxcbiAgICAxIC8gNCwgMyAvIDMsXG4gICAgMiAvIDQsIDMgLyAzLFxuICAgIDEgLyA0LCAyIC8gMyxcbiAgICAyIC8gNCwgMyAvIDMsXG4gICAgMiAvIDQsIDIgLyAzLFxuICAgIC8vIOW3pumdolxuICAgIDEgLyA0LCAxIC8gMyxcbiAgICAwIC8gNCwgMSAvIDMsXG4gICAgMCAvIDQsIDIgLyAzLFxuICAgIDEgLyA0LCAxIC8gMyxcbiAgICAwIC8gNCwgMiAvIDMsXG4gICAgMSAvIDQsIDIgLyAzLFxuICAgIC8vIOWPs+mdolxuICAgIDIgLyA0LCAxIC8gMyxcbiAgICAyIC8gNCwgMiAvIDMsXG4gICAgMyAvIDQsIDIgLyAzLFxuICAgIDIgLyA0LCAxIC8gMyxcbiAgICAzIC8gNCwgMiAvIDMsXG4gICAgMyAvIDQsIDEgLyAzLFxuICAgIC8vIOWJjemdolxuICAgIDEgLyA0LCAxIC8gMyxcbiAgICAxIC8gNCwgMiAvIDMsXG4gICAgMiAvIDQsIDIgLyAzLFxuICAgIDEgLyA0LCAxIC8gMyxcbiAgICAyIC8gNCwgMiAvIDMsXG4gICAgMiAvIDQsIDEgLyAzLFxuICAgIC8vIOWlpemdolxuICAgIDQgLyA0LCAxIC8gMyxcbiAgICAzIC8gNCwgMSAvIDMsXG4gICAgMyAvIDQsIDIgLyAzLFxuICAgIDQgLyA0LCAxIC8gMyxcbiAgICAzIC8gNCwgMiAvIDMsXG4gICAgNCAvIDQsIDIgLyAzXG4gIF0pO1xuXG4gIGNvbnN0IHV2QnVmZmVyID0gZGV2aWNlLmNyZWF0ZUJ1ZmZlcih7XG4gICAgc2l6ZTogdXYuYnl0ZUxlbmd0aCxcbiAgICB1c2FnZTogR1BVQnVmZmVyVXNhZ2UuVkVSVEVYIHwgR1BVQnVmZmVyVXNhZ2UuQ09QWV9EU1QsXG4gIH0pO1xuICBkZXZpY2UucXVldWUud3JpdGVCdWZmZXIodXZCdWZmZXIsIDAsIHV2LCAwLCB1di5sZW5ndGgpO1xuXG4gIC8vIHRleHR1cmVcbiAgY29uc3QgdGV4dHVyZUltYWdlID0gYXdhaXQgZmV0Y2hJbWFnZSgnLi90ZXh0dXJlL2RpY2UucG5nJyk7XG4gIGNvbnN0IHRleHR1cmUgPSBkZXZpY2UuY3JlYXRlVGV4dHVyZSh7XG4gICAgc2l6ZTogW1xuICAgICAgdGV4dHVyZUltYWdlLndpZHRoLCB0ZXh0dXJlSW1hZ2UuaGVpZ2h0LCAxXG4gICAgXSxcbiAgICBmb3JtYXQ6ICdyZ2JhOHVub3JtJyxcbiAgICB1c2FnZTogR1BVVGV4dHVyZVVzYWdlLlRFWFRVUkVfQklORElORyB8XG4gICAgICBHUFVUZXh0dXJlVXNhZ2UuQ09QWV9EU1QgfFxuICAgICAgR1BVVGV4dHVyZVVzYWdlLlJFTkRFUl9BVFRBQ0hNRU5UXG4gIH0pO1xuICBkZXZpY2UucXVldWUuY29weUV4dGVybmFsSW1hZ2VUb1RleHR1cmUoXG4gICAgeyBzb3VyY2U6IGF3YWl0IGNyZWF0ZUltYWdlQml0bWFwKHRleHR1cmVJbWFnZSkgfSxcbiAgICB7IHRleHR1cmU6IHRleHR1cmUgfSxcbiAgICBbdGV4dHVyZUltYWdlLndpZHRoLCB0ZXh0dXJlSW1hZ2UuaGVpZ2h0XVxuICApO1xuICBjb25zdCBzYW1wbGVyID0gZGV2aWNlLmNyZWF0ZVNhbXBsZXIoe1xuICAgIG1hZ0ZpbHRlcjogJ2xpbmVhcicsXG4gICAgbWluRmlsdGVyOiAnbGluZWFyJyxcbiAgfSk7XG5cbiAgLy8gbXZwIG1hdHJpeFxuICBjb25zdCBtdnBCdWZmZXIgPSBkZXZpY2UuY3JlYXRlQnVmZmVyKHtcbiAgICBzaXplOiAxNiAqIDQsXG4gICAgdXNhZ2U6IEdQVUJ1ZmZlclVzYWdlLlVOSUZPUk0gfCBHUFVCdWZmZXJVc2FnZS5DT1BZX0RTVCxcbiAgfSk7XG5cbiAgY29uc3QgdmVydGV4QnVmZmVyczogR1BVVmVydGV4QnVmZmVyTGF5b3V0W10gPSBbXG4gICAge1xuICAgICAgLy8gdmVydGV4XG4gICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBzaGFkZXJMb2NhdGlvbjogMCxcbiAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgZm9ybWF0OiAnZmxvYXQzMngzJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBhcnJheVN0cmlkZTogMTIsXG4gICAgICBzdGVwTW9kZTogJ3ZlcnRleCdcbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIHV2XG4gICAgICBhdHRyaWJ1dGVzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBzaGFkZXJMb2NhdGlvbjogMSxcbiAgICAgICAgICBvZmZzZXQ6IDAsXG4gICAgICAgICAgZm9ybWF0OiAnZmxvYXQzMngyJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBhcnJheVN0cmlkZTogOCxcbiAgICAgIHN0ZXBNb2RlOiAndmVydGV4J1xuICAgIH1cbiAgXTtcblxuICBjb25zdCBwaXBlbGluZURlc2NyaXB0b3I6IEdQVVJlbmRlclBpcGVsaW5lRGVzY3JpcHRvciA9IHtcbiAgICB2ZXJ0ZXg6IHtcbiAgICAgIG1vZHVsZTogc2hhZGVyTW9kdWxlLFxuICAgICAgZW50cnlQb2ludDogJ3ZlcnRleF9tYWluJyxcbiAgICAgIGJ1ZmZlcnM6IHZlcnRleEJ1ZmZlcnMsXG4gICAgfSxcbiAgICBmcmFnbWVudDoge1xuICAgICAgbW9kdWxlOiBzaGFkZXJNb2R1bGUsXG4gICAgICBlbnRyeVBvaW50OiAnZnJhZ21lbnRfbWFpbicsXG4gICAgICB0YXJnZXRzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBmb3JtYXQ6IG5hdmlnYXRvci5ncHUuZ2V0UHJlZmVycmVkQ2FudmFzRm9ybWF0KCksXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH0sXG4gICAgcHJpbWl0aXZlOiB7XG4gICAgICB0b3BvbG9neTogJ3RyaWFuZ2xlLWxpc3QnLFxuICAgICAgY3VsbE1vZGU6ICdiYWNrJ1xuICAgIH0sXG4gICAgbGF5b3V0OiAnYXV0bycsXG4gIH07XG5cbiAgY29uc3QgcmVuZGVyUGlwZWxpbmUgPSBkZXZpY2UuY3JlYXRlUmVuZGVyUGlwZWxpbmUocGlwZWxpbmVEZXNjcmlwdG9yKTtcbiAgY29uc3QgYmluZEdyb3VwID0gZGV2aWNlLmNyZWF0ZUJpbmRHcm91cCh7XG4gICAgbGF5b3V0OiByZW5kZXJQaXBlbGluZS5nZXRCaW5kR3JvdXBMYXlvdXQoMCksXG4gICAgZW50cmllczogW1xuICAgICAge1xuICAgICAgICBiaW5kaW5nOiAwLFxuICAgICAgICByZXNvdXJjZToge1xuICAgICAgICAgIGJ1ZmZlcjogbXZwQnVmZmVyXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBiaW5kaW5nOiAxLFxuICAgICAgICByZXNvdXJjZTogc2FtcGxlcixcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIGJpbmRpbmc6IDIsXG4gICAgICAgIHJlc291cmNlOiB0ZXh0dXJlLmNyZWF0ZVZpZXcoKSxcbiAgICAgIH1cbiAgICBdXG4gIH0pO1xuXG4gIGNvbnN0IGNsZWFyQ29sb3IgPSB7IHI6IDAuMCwgZzogMC4wLCBiOiAwLjAsIGE6IDEuMCB9O1xuXG4gIGxldCByb3RhdGVYID0gMDtcbiAgbGV0IHJvdGF0ZVkgPSAwO1xuICBmdW5jdGlvbiBzdGVwKCkge1xuXG4gICAgLy8gbXZwIOihjOWIl+OBruS9nOaIkOOBr+S4gOaXpuOBk+OBk+OBq+e9ruOBhOOBpuOBiuOBj1xuXG4gICAgY29uc3Qgc2NhbGVNYXQgPSBuZXcgTWF0cml4KDQsIDQsIFtcbiAgICAgIDEsIDAsIDAsIDAsXG4gICAgICAwLCAxLCAwLCAwLFxuICAgICAgMCwgMCwgMSwgMCxcbiAgICAgIDAsIDAsIDAsIDFcbiAgICBdKTtcblxuICAgIHJvdGF0ZVggKz0gMC4wMTtcbiAgICByb3RhdGVZICs9IDAuMDE1O1xuICAgIGNvbnN0IHJvdGF0ZVhNYXQgPSBuZXcgTWF0cml4KDQsIDQsIFtcbiAgICAgIDEsIDAsIDAsIDAsXG4gICAgICAwLCBNYXRoLmNvcyhyb3RhdGVYKSwgTWF0aC5zaW4ocm90YXRlWCksIDAsXG4gICAgICAwLCAtIE1hdGguc2luKHJvdGF0ZVgpLCBNYXRoLmNvcyhyb3RhdGVYKSwgMCxcbiAgICAgIDAsIDAsIDAsIDFcbiAgICBdKTtcbiAgICBjb25zdCByb3RhdGVZTWF0ID0gbmV3IE1hdHJpeCg0LCA0LCBbXG4gICAgICBNYXRoLmNvcyhyb3RhdGVZKSwgMCwgLSBNYXRoLnNpbihyb3RhdGVZKSwgMCxcbiAgICAgIDAsIDEsIDAsIDAsXG4gICAgICBNYXRoLnNpbihyb3RhdGVZKSwgMCwgTWF0aC5jb3Mocm90YXRlWSksIDAsXG4gICAgICAwLCAwLCAwLCAxXG4gICAgXSk7XG5cbiAgICBjb25zdCB0cmFuc2xhdGVYID0gMDtcbiAgICBjb25zdCB0cmFuc2xhdGVZID0gMDtcbiAgICBjb25zdCB0cmFuc2xhdGVaID0gLTI7XG4gICAgY29uc3QgdHJhbnNsYXRlTWF0ID0gbmV3IE1hdHJpeCg0LCA0LCBbXG4gICAgICAxLCAwLCAwLCAwLFxuICAgICAgMCwgMSwgMCwgMCxcbiAgICAgIDAsIDAsIDEsIDAsXG4gICAgICB0cmFuc2xhdGVYLCB0cmFuc2xhdGVZLCB0cmFuc2xhdGVaLCAxXG4gICAgXSk7XG5cbiAgICAvLyDpgI/oppbmipXlvbFcbiAgICBjb25zdCBmb3YgPSAoNzAgLyAxODApICogTWF0aC5QSTtcbiAgICBjb25zdCBhc3BlY3QgPSBjdnMud2lkdGggLyBjdnMuaGVpZ2h0O1xuICAgIGNvbnN0IG5lYXIgPSAwLjU7XG4gICAgY29uc3QgZmFyID0gMTAwO1xuICAgIGNvbnN0IHByak1hdCA9IG5ldyBNYXRyaXgoNCwgNCwgW1xuICAgICAgMSAvIChhc3BlY3QgKiBNYXRoLnRhbihmb3YgLyAyKSksIDAsIDAsIDAsXG4gICAgICAwLCAxIC8gTWF0aC50YW4oZm92IC8gMiksIDAsIDAsXG4gICAgICAwLCAwLCAtIChmYXIgKyBuZWFyKSAvIChmYXIgLSBuZWFyKSwgLTEsXG4gICAgICAwLCAwLCAtIDIgKiBmYXIgKiBuZWFyIC8gKGZhciAtIG5lYXIpLCAwXG4gICAgXSk7XG4gICAgY29uc3QgbXZwTWF0ID0gbmV3IEZsb2F0MzJBcnJheShwcmpNYXQubXVsKHRyYW5zbGF0ZU1hdCkubXVsKHJvdGF0ZVlNYXQpLm11bChyb3RhdGVYTWF0KS5tdWwoc2NhbGVNYXQpLnRvQXJyYXkoKSk7XG4gICAgZGV2aWNlLnF1ZXVlLndyaXRlQnVmZmVyKG12cEJ1ZmZlciwgMCwgbXZwTWF0LCAwLCBtdnBNYXQubGVuZ3RoKTtcblxuICAgIGNvbnN0IHJlbmRlclBhc3NEZXNjcmlwdG9yOiBHUFVSZW5kZXJQYXNzRGVzY3JpcHRvciA9IHtcbiAgICAgIGNvbG9yQXR0YWNobWVudHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGNsZWFyVmFsdWU6IGNsZWFyQ29sb3IsXG4gICAgICAgICAgbG9hZE9wOiAnY2xlYXInLFxuICAgICAgICAgIHN0b3JlT3A6ICdzdG9yZScsXG4gICAgICAgICAgdmlldzogY3R4LmdldEN1cnJlbnRUZXh0dXJlKCkuY3JlYXRlVmlldygpLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICB9O1xuXG4gICAgY29uc3QgY29tbWFuZEVuY29kZXIgPSBkZXZpY2UuY3JlYXRlQ29tbWFuZEVuY29kZXIoKTtcbiAgICBjb25zdCByZW5kZXJQYXNzID0gY29tbWFuZEVuY29kZXIuYmVnaW5SZW5kZXJQYXNzKHJlbmRlclBhc3NEZXNjcmlwdG9yKTtcbiAgICByZW5kZXJQYXNzLnNldFBpcGVsaW5lKHJlbmRlclBpcGVsaW5lKTtcbiAgICByZW5kZXJQYXNzLnNldFZlcnRleEJ1ZmZlcigwLCB2ZXJ0ZXhCdWZmZXIpO1xuICAgIHJlbmRlclBhc3Muc2V0VmVydGV4QnVmZmVyKDEsIHV2QnVmZmVyKTtcbiAgICByZW5kZXJQYXNzLnNldEJpbmRHcm91cCgwLCBiaW5kR3JvdXApO1xuICAgIHJlbmRlclBhc3MuZHJhdygzNik7XG4gICAgcmVuZGVyUGFzcy5lbmQoKTtcbiAgICBkZXZpY2UucXVldWUuc3VibWl0KFtjb21tYW5kRW5jb2Rlci5maW5pc2goKV0pO1xuICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShzdGVwKTtcbiAgfVxuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc3RlcCk7XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgYFxuc3RydWN0IFZlcnRleE91dCB7XG4gIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbiA6IHZlYzRmLFxuICBAbG9jYXRpb24oMCkgdXYgOiB2ZWMyZlxufVxuXG5AZ3JvdXAoMCkgQGJpbmRpbmcoMCkgdmFyPHVuaWZvcm0+IG12cE1hdDogbWF0NHg0ZjtcblxuQHZlcnRleFxuZm4gdmVydGV4X21haW4oQGxvY2F0aW9uKDApIHBvc2l0aW9uOiB2ZWMzZixcbiAgICAgICAgICAgICAgIEBsb2NhdGlvbigxKSB1djogdmVjMmYpIC0+IFZlcnRleE91dFxue1xuICB2YXIgb3V0cHV0IDogVmVydGV4T3V0O1xuICBvdXRwdXQucG9zaXRpb24gPSBtdnBNYXQgKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xuICBvdXRwdXQudXYgPSB1djtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuQGdyb3VwKDApIEBiaW5kaW5nKDEpIHZhciBteVNhbXBsZXI6IHNhbXBsZXI7XG5AZ3JvdXAoMCkgQGJpbmRpbmcoMikgdmFyIG15VGV4dHVyZTogdGV4dHVyZV8yZDxmMzI+O1xuXG5AZnJhZ21lbnRcbmZuIGZyYWdtZW50X21haW4oZnJhZ0RhdGE6IFZlcnRleE91dCkgLT4gQGxvY2F0aW9uKDApIHZlYzRmXG57XG4gIHJldHVybiB0ZXh0dXJlU2FtcGxlKG15VGV4dHVyZSwgbXlTYW1wbGVyLCBmcmFnRGF0YS51dik7XG59XG5gO1xuIiwiZXhwb3J0IGRlZmF1bHQgYFxuc3RydWN0IFZlcnRleE91dCB7XG4gIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbiA6IHZlYzRmLFxuICBAbG9jYXRpb24oMCkgdXYgOiB2ZWMyZlxufVxuXG5AZ3JvdXAoMCkgQGJpbmRpbmcoMCkgdmFyPHVuaWZvcm0+IG12cE1hdDogbWF0NHg0ZjtcblxuQHZlcnRleFxuZm4gdmVydGV4X21haW4oQGxvY2F0aW9uKDApIHBvc2l0aW9uOiB2ZWMzZixcbiAgICAgICAgICAgICAgIEBsb2NhdGlvbigxKSB1djogdmVjMmYpIC0+IFZlcnRleE91dFxue1xuICB2YXIgb3V0cHV0IDogVmVydGV4T3V0O1xuICBvdXRwdXQucG9zaXRpb24gPSBtdnBNYXQgKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xuICBvdXRwdXQudXYgPSB1djtcbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuQGdyb3VwKDApIEBiaW5kaW5nKDEpIHZhciBteVNhbXBsZXI6IHNhbXBsZXI7XG5AZ3JvdXAoMCkgQGJpbmRpbmcoMikgdmFyIG15VGV4dHVyZTogdGV4dHVyZV8yZF9hcnJheTxmMzI+O1xuQGdyb3VwKDApIEBiaW5kaW5nKDMpIHZhcjx1bmlmb3JtPiB0ZXh0dXJlSWQ6IHUzMjtcblxuQGZyYWdtZW50XG5mbiBmcmFnbWVudF9tYWluKGZyYWdEYXRhOiBWZXJ0ZXhPdXQpIC0+IEBsb2NhdGlvbigwKSB2ZWM0Zlxue1xuICByZXR1cm4gdGV4dHVyZVNhbXBsZShteVRleHR1cmUsIG15U2FtcGxlciwgZnJhZ0RhdGEudXYsIHRleHR1cmVJZCk7XG59XG5gO1xuIl0sIm5hbWVzIjpbIkJVRkZFUl9TSVpFIiwiTlVNX1BBUlRJQ0xFUyIsIldPUktHUk9VUF9DT1VOVCIsIk1hdHJpeCIsIm0iLCJuIiwiYXJyIiwidGhpcyIsImxlbmd0aCIsIkVycm9yIiwibWF0cml4IiwiaSIsImoiLCJzZXRWYWx1ZSIsInZhbHVlIiwiZ2V0VmFsdWUiLCJtdWwiLCJtYXQiLCJuZXdNYXQiLCJzdW0iLCJrIiwidG9BcnJheSIsInNyYyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiaW1nIiwiSW1hZ2UiLCJvbmxvYWQiLCJvbmVycm9yIiwiZSIsInBhZ2VzIiwiYmFzaWNfcmVuZGVyX3BpcGVsaW5lIiwiY29uc29sZSIsImxvZyIsImN2cyIsImRvY3VtZW50IiwiYm9keSIsImFwcGVuZENoaWxkIiwiY3JlYXRlRWxlbWVudCIsIndpZHRoIiwiaGVpZ2h0IiwiY3R4IiwiZ2V0Q29udGV4dCIsImFkYXB0ZXIiLCJuYXZpZ2F0b3IiLCJncHUiLCJyZXF1ZXN0QWRhcHRlciIsImRldmljZSIsInJlcXVlc3REZXZpY2UiLCJzaGFkZXJNb2R1bGUiLCJjcmVhdGVTaGFkZXJNb2R1bGUiLCJjb2RlIiwiY29uZmlndXJlIiwiZm9ybWF0IiwiZ2V0UHJlZmVycmVkQ2FudmFzRm9ybWF0IiwiYWxwaGFNb2RlIiwidmVydGljZXMiLCJGbG9hdDMyQXJyYXkiLCJ2ZXJ0ZXhCdWZmZXIiLCJjcmVhdGVCdWZmZXIiLCJzaXplIiwiYnl0ZUxlbmd0aCIsInVzYWdlIiwiR1BVQnVmZmVyVXNhZ2UiLCJWRVJURVgiLCJDT1BZX0RTVCIsInF1ZXVlIiwid3JpdGVCdWZmZXIiLCJwaXBlbGluZURlc2NyaXB0b3IiLCJ2ZXJ0ZXgiLCJtb2R1bGUiLCJlbnRyeVBvaW50IiwiYnVmZmVycyIsImF0dHJpYnV0ZXMiLCJzaGFkZXJMb2NhdGlvbiIsIm9mZnNldCIsImFycmF5U3RyaWRlIiwic3RlcE1vZGUiLCJmcmFnbWVudCIsInRhcmdldHMiLCJwcmltaXRpdmUiLCJ0b3BvbG9neSIsImxheW91dCIsInJlbmRlclBpcGVsaW5lIiwiY3JlYXRlUmVuZGVyUGlwZWxpbmUiLCJjb21tYW5kRW5jb2RlciIsImNyZWF0ZUNvbW1hbmRFbmNvZGVyIiwicmVuZGVyUGFzc0Rlc2NyaXB0b3IiLCJjb2xvckF0dGFjaG1lbnRzIiwiY2xlYXJWYWx1ZSIsInIiLCJnIiwiYiIsImEiLCJsb2FkT3AiLCJzdG9yZU9wIiwidmlldyIsImdldEN1cnJlbnRUZXh0dXJlIiwiY3JlYXRlVmlldyIsInBhc3NFbmNvZGVyIiwiYmVnaW5SZW5kZXJQYXNzIiwic2V0UGlwZWxpbmUiLCJzZXRWZXJ0ZXhCdWZmZXIiLCJkcmF3IiwiZW5kIiwic3VibWl0IiwiZmluaXNoIiwiYmFzaWNfY29tcHV0ZV9waXBlbGluZSIsIm91dHB1dCIsIlNUT1JBR0UiLCJDT1BZX1NSQyIsInN0YWdpbmdCdWZmZXIiLCJNQVBfUkVBRCIsImJpbmRHcm91cExheW91dCIsImNyZWF0ZUJpbmRHcm91cExheW91dCIsImVudHJpZXMiLCJiaW5kaW5nIiwidmlzaWJpbGl0eSIsIkdQVVNoYWRlclN0YWdlIiwiQ09NUFVURSIsImJ1ZmZlciIsInR5cGUiLCJiaW5kR3JvdXAiLCJjcmVhdGVCaW5kR3JvdXAiLCJyZXNvdXJjZSIsImNvbXB1dGVQaXBlbGluZSIsImNyZWF0ZUNvbXB1dGVQaXBlbGluZSIsImNyZWF0ZVBpcGVsaW5lTGF5b3V0IiwiYmluZEdyb3VwTGF5b3V0cyIsImNvbXB1dGUiLCJiZWdpbkNvbXB1dGVQYXNzIiwic2V0QmluZEdyb3VwIiwiZGlzcGF0Y2hXb3JrZ3JvdXBzIiwiTWF0aCIsImNlaWwiLCJjb3B5QnVmZmVyVG9CdWZmZXIiLCJtYXBBc3luYyIsIkdQVU1hcE1vZGUiLCJSRUFEIiwiZGF0YSIsImdldE1hcHBlZFJhbmdlIiwic2xpY2UiLCJ1bm1hcCIsImRlbW8wMSIsImNvbG9ycyIsImNvbG9yQnVmZmVyIiwiZGVtbzAyIiwiY29tcHV0ZVBhc3MiLCJkZW1vMDMiLCJwYXJ0aWNsZXMiLCJwdXNoIiwicmFuZG9tIiwicGFydGljbGVCdWZmZXIiLCJCWVRFU19QRVJfRUxFTUVOVCIsInN0ZXAiLCJyZW5kZXJQYXNzIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZGVtbzA0IiwicmVzdWx0QnVmZmVyIiwiY29weUFycmF5QnVmZmVyIiwicmVzdWx0IiwiVWludDhBcnJheSIsImhleCIsInRvU3RyaW5nIiwiZGVtbzA1Iiwic3RhcnQiLCJwZXJmb3JtYW5jZSIsIm5vdyIsIlVpbnQzMkFycmF5IiwiZm9yRWFjaCIsInJvdW5kIiwiZGVtbzA2IiwicG9zaXRpb25MaXN0IiwiZmxvb3IiLCJwb3NpdGlvbnMiLCJwb3NpdGlvbkJ1ZmZlciIsIm9mZnNldHMiLCJkZW1vMDciLCJ1diIsInV2QnVmZmVyIiwidGV4dHVyZUltYWdlIiwidGV4dHVyZSIsImNyZWF0ZVRleHR1cmUiLCJHUFVUZXh0dXJlVXNhZ2UiLCJURVhUVVJFX0JJTkRJTkciLCJSRU5ERVJfQVRUQUNITUVOVCIsImNvcHlFeHRlcm5hbEltYWdlVG9UZXh0dXJlIiwic291cmNlIiwiY3JlYXRlSW1hZ2VCaXRtYXAiLCJzYW1wbGVyIiwiY3JlYXRlU2FtcGxlciIsIm1hZ0ZpbHRlciIsIm1pbkZpbHRlciIsIm12cEJ1ZmZlciIsIlVOSUZPUk0iLCJjdWxsTW9kZSIsImdldEJpbmRHcm91cExheW91dCIsImNsZWFyQ29sb3IiLCJyb3RhdGVYIiwicm90YXRlWSIsInNjYWxlTWF0Iiwicm90YXRlWE1hdCIsImNvcyIsInNpbiIsInJvdGF0ZVlNYXQiLCJ0cmFuc2xhdGVNYXQiLCJmb3YiLCJQSSIsImFzcGVjdCIsInByak1hdCIsInRhbiIsIm12cE1hdCIsImRlbW8wOCIsInRleHR1cmVJbWFnZTEiLCJ0ZXh0dXJlSW1hZ2UyIiwidGV4dHVyZUJ1ZmZlciIsIm1hcHBlZEF0Q3JlYXRpb24iLCJwaXhlbERhdGEiLCJjdnMyIiwiY3R4MiIsImRyYXdJbWFnZSIsInNldCIsImdldEltYWdlRGF0YSIsInRleHR1cmVJZEJ1ZmZlciIsInRleHR1cmVJZCIsImNvcHlCdWZmZXJUb1RleHR1cmUiLCJieXRlc1BlclJvdyIsInJvd3NQZXJJbWFnZSIsImRlcHRoT3JBcnJheUxheWVycyIsImluZGV4IiwidWwiLCJwYWdlIiwiaHJlZiIsInRleHRDb250ZW50Iiwid2luZG93IiwiVVJMIiwibG9jYXRpb24iLCJzZWFyY2hQYXJhbXMiLCJnZXQiXSwic291cmNlUm9vdCI6IiJ9