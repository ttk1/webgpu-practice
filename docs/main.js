(()=>{"use strict";const e=1e3;const n=1e3;const t=5e4;const r=4194304;const o={basic_render_pipeline:()=>{return e=void 0,n=void 0,r=function*(){console.log("hello, world!");const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const n=e.getContext("webgpu"),t=yield navigator.gpu.requestAdapter(),r=yield t.requestDevice(),o=r.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) color : vec4f\n}\n\n@vertex\nfn vertex_main(@location(0) position: vec4f,\n               @location(1) color: vec4f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = position;\n  output.color = color;\n  return output;\n}\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return fragData.color;\n}\n"});n.configure({device:r,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const a=new Float32Array([0,.6,0,1,1,0,0,1,-.5,-.6,0,1,0,1,0,1,.5,-.6,0,1,0,0,1,1]),i=r.createBuffer({size:a.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(i,0,a,0,a.length);const u={vertex:{module:o,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x4"},{shaderLocation:1,offset:16,format:"float32x4"}],arrayStride:32,stepMode:"vertex"}]},fragment:{module:o,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list"},layout:"auto"},c=r.createRenderPipeline(u),s=r.createCommandEncoder(),f={colorAttachments:[{clearValue:{r:0,g:.5,b:1,a:1},loadOp:"clear",storeOp:"store",view:n.getCurrentTexture().createView()}]},l=s.beginRenderPass(f);l.setPipeline(c),l.setVertexBuffer(0,i),l.draw(3),l.end(),r.queue.submit([s.finish()])},new((t=void 0)||(t=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,u)}c((r=r.apply(e,n||[])).next())}));var e,n,t,r},basic_compute_pipeline:()=>{return n=void 0,t=void 0,o=function*(){console.log("hello, world!");const n=yield navigator.gpu.requestAdapter(),t=yield n.requestDevice(),r=t.createShaderModule({code:"\n@group(0) @binding(0)\nvar<storage, read_write> output: array<f32>;\n\n@compute @workgroup_size(64)\nfn main(\n  @builtin(global_invocation_id)\n  global_id : vec3u,\n\n  @builtin(local_invocation_id)\n  local_id : vec3u,\n) {\n  // Avoid accessing the buffer out of bounds\n  if (global_id.x >= 1000) {\n    return;\n  }\n\n  output[global_id.x] =\n    f32(global_id.x) * 1000. + f32(local_id.x);\n}\n"}),o=t.createBuffer({size:e,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),a=t.createBuffer({size:e,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),i=t.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),u=t.createBindGroup({layout:i,entries:[{binding:0,resource:{buffer:o}}]}),c=t.createComputePipeline({layout:t.createPipelineLayout({bindGroupLayouts:[i]}),compute:{module:r,entryPoint:"main"}}),s=t.createCommandEncoder(),f=s.beginComputePass();f.setPipeline(c),f.setBindGroup(0,u),f.dispatchWorkgroups(Math.ceil(15.625)),f.end(),s.copyBufferToBuffer(o,0,a,0,e),t.queue.submit([s.finish()]),yield a.mapAsync(GPUMapMode.READ,0,e);const l=a.getMappedRange(0,e).slice(0);a.unmap(),console.log(new Float32Array(l))},new((r=void 0)||(r=Promise))((function(e,a){function i(e){try{c(o.next(e))}catch(e){a(e)}}function u(e){try{c(o.throw(e))}catch(e){a(e)}}function c(n){var t;n.done?e(n.value):(t=n.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,u)}c((o=o.apply(n,t||[])).next())}));var n,t,r,o},demo01:()=>{return e=void 0,n=void 0,r=function*(){console.log("hello, world!");const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const n=e.getContext("webgpu"),t=yield navigator.gpu.requestAdapter(),r=yield t.requestDevice(),o=r.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) color : vec4f\n}\n\n@vertex\nfn vertex_main(@location(0) position: vec4f,\n               @location(1) color: vec4f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = vec4(position.xyz * 0.5, position.w);\n  output.color = color;\n  return output;\n}\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return fragData.color;\n}\n"});n.configure({device:r,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const a=new Float32Array([0,1,0,1,1,-1,0,1,-1,-1,0,1]),i=r.createBuffer({size:a.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(i,0,a,0,a.length);const u=new Float32Array([1,0,0,1,0,1,0,1,0,0,1,1]),c=r.createBuffer({size:u.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(c,0,u,0,u.length);const s={vertex:{module:o,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x4"}],arrayStride:16,stepMode:"vertex"},{attributes:[{shaderLocation:1,offset:0,format:"float32x4"}],arrayStride:16,stepMode:"vertex"}]},fragment:{module:o,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list"},layout:"auto"},f=r.createRenderPipeline(s),l=r.createCommandEncoder(),d={colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store",view:n.getCurrentTexture().createView()}]},p=l.beginRenderPass(d);p.setPipeline(f),p.setVertexBuffer(0,i),p.setVertexBuffer(1,c),p.draw(3),p.end(),r.queue.submit([l.finish()])},new((t=void 0)||(t=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,u)}c((r=r.apply(e,n||[])).next())}));var e,n,t,r},demo02:()=>{return e=void 0,t=void 0,o=function*(){console.log("hello, world!");const e=yield navigator.gpu.requestAdapter(),t=yield e.requestDevice(),r=t.createBuffer({size:n,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),o=t.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),a=t.createBindGroup({layout:o,entries:[{binding:0,resource:{buffer:r}}]}),i=t.createShaderModule({code:"\n@group(0) @binding(0)\nvar<storage, read_write> output: array<f32>;\n\n// バッファを初期化\n@compute @workgroup_size(64)\nfn init(@builtin(global_invocation_id) global_id : vec3u) {\n  output[global_id.x] = f32(global_id.x) * 1000.;\n}\n\n// バッファの値を1インクリメント\n@compute @workgroup_size(64)\nfn increment(@builtin(global_invocation_id) global_id : vec3u) {\n  output[global_id.x] += 1.;\n}\n"}),u=t.createCommandEncoder(),c=t.createComputePipeline({layout:t.createPipelineLayout({bindGroupLayouts:[o]}),compute:{module:i,entryPoint:"init"}}),s=u.beginComputePass();s.setPipeline(c),s.setBindGroup(0,a),s.dispatchWorkgroups(Math.ceil(15.625)),s.end();for(let e=0;e<10;e++){const e=t.createComputePipeline({layout:t.createPipelineLayout({bindGroupLayouts:[o]}),compute:{module:i,entryPoint:"increment"}}),n=u.beginComputePass();n.setPipeline(e),n.setBindGroup(0,a),n.dispatchWorkgroups(Math.ceil(15.625)),n.end()}const f=t.createBuffer({size:n,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST});u.copyBufferToBuffer(r,0,f,0,n),t.queue.submit([u.finish()]),yield f.mapAsync(GPUMapMode.READ,0,n);const l=f.getMappedRange(0,n).slice(0);f.unmap(),console.log(new Float32Array(l))},new((r=void 0)||(r=Promise))((function(n,a){function i(e){try{c(o.next(e))}catch(e){a(e)}}function u(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,u)}c((o=o.apply(e,t||[])).next())}));var e,t,r,o},demo03:()=>{return e=void 0,n=void 0,o=function*(){console.log("hello, world!");const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const n=e.getContext("webgpu"),r=yield navigator.gpu.requestAdapter(),o=yield r.requestDevice(),a=o.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) color : vec4f\n}\n\n@vertex\nfn vertex_main(@location(0) position: vec2f,\n               @location(1) velocity: vec2f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = vec4f(position, 0., 1.);\n  output.color = vec4f(1., 0., 0., 1.);\n  return output;\n}\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return fragData.color;\n}\n\nstruct Particle {\n  position : vec2f,\n  velocity : vec2f,\n}\n\n@binding(0) @group(0)\nvar<storage, read_write> particles: array<Particle>;\n\n@compute @workgroup_size(64)\nfn update(@builtin(global_invocation_id) global_id : vec3u) {\n  let g = vec2f(0., 0.);\n  let idx = global_id.x;\n  let p = particles[idx].position;\n  let v = particles[idx].velocity;\n\n  particles[idx].position = p + v * .2;\n  particles[idx].velocity = v\n    // 重力加速度\n    + ((g - p) / pow(distance(g, p) + 1., 2.)) * .05\n    // 空気抵抗\n    - v * pow(length(v), 2.) * .05;\n}\n"});n.configure({device:o,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const i=[];for(let e=0;e<t;e++)i.push(2*(Math.random()-.5)),i.push(2*(Math.random()-.5)),i.push(0),i.push(0);const u=o.createBuffer({size:Float32Array.BYTES_PER_ELEMENT*t*4,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST|GPUBufferUsage.STORAGE});o.queue.writeBuffer(u,0,new Float32Array(i),0,t);const c={vertex:{module:a,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x2"},{shaderLocation:1,offset:8,format:"float32x2"}],arrayStride:16,stepMode:"vertex"}]},fragment:{module:a,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"point-list"},layout:"auto"},s=o.createRenderPipeline(c),f={colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store",view:null}]},l=o.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),d=o.createBindGroup({layout:l,entries:[{binding:0,resource:{buffer:u}}]}),p=o.createComputePipeline({layout:o.createPipelineLayout({bindGroupLayouts:[l]}),compute:{module:a,entryPoint:"update"}}),g=()=>{const e=o.createCommandEncoder();f.colorAttachments[0].view=n.getCurrentTexture().createView();const r=e.beginRenderPass(f);r.setPipeline(s),r.setVertexBuffer(0,u),r.draw(t),r.end();const a=e.beginComputePass();a.setPipeline(p),a.setBindGroup(0,d),a.dispatchWorkgroups(Math.ceil(781.25)),a.end(),o.queue.submit([e.finish()]),requestAnimationFrame(g)};g()},new((r=void 0)||(r=Promise))((function(t,a){function i(e){try{c(o.next(e))}catch(e){a(e)}}function u(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof r?n:new r((function(e){e(n)}))).then(i,u)}c((o=o.apply(e,n||[])).next())}));var e,n,r,o},demo04:()=>{return e=void 0,n=void 0,r=function*(){const e=yield navigator.gpu.requestAdapter(),n=yield e.requestDevice(),t=n.createBuffer({size:16,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),r=n.createBuffer({size:16,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),o=n.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),a=n.createBindGroup({layout:o,entries:[{binding:0,resource:{buffer:t}}]}),i=n.createShaderModule({code:"\nfn F(X: u32, Y: u32, Z: u32) -> u32 {\n  return (X & Y) | (~X & Z);\n}\n\nfn G(X: u32, Y: u32, Z: u32) -> u32 {\n  return (X & Y) | (X & Z) | (Y & Z);\n}\n\nfn H(X: u32, Y: u32, Z: u32) -> u32 {\n  return X ^ Y ^ Z;\n}\n\nfn rotate(a: u32, s: u32) -> u32 {\n  return (a << s) | (a >> (32 - s));\n}\n\nfn FF(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + F(b, c, d) + x, s);\n}\n\nfn GG(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + G(b, c, d) + x + 0x5a827999u, s);\n}\n\nfn HH(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + H(b, c, d) + x + 0x6ed9eba1u, s);\n}\n\nvar<private> A = 0x67452301u;\nvar<private> B = 0xefcdab89u;\nvar<private> C = 0x98badcfeu;\nvar<private> D = 0x10325476u;\n\nfn update(X: array<u32, 16>) {\n  let AA = A;\n  let BB = B;\n  let CC = C;\n  let DD = D;\n\n  FF(&A, B, C, D, X[0], 3);\n  FF(&D, A, B, C, X[1], 7);\n  FF(&C, D, A, B, X[2], 11);\n  FF(&B, C, D, A, X[3], 19);\n  FF(&A, B, C, D, X[4], 3);\n  FF(&D, A, B, C, X[5], 7);\n  FF(&C, D, A, B, X[6], 11);\n  FF(&B, C, D, A, X[7], 19);\n  FF(&A, B, C, D, X[8], 3);\n  FF(&D, A, B, C, X[9], 7);\n  FF(&C, D, A, B, X[10], 11);\n  FF(&B, C, D, A, X[11], 19);\n  FF(&A, B, C, D, X[12], 3);\n  FF(&D, A, B, C, X[13], 7);\n  FF(&C, D, A, B, X[14], 11);\n  FF(&B, C, D, A, X[15], 19);\n\n  GG(&A, B, C, D, X[0], 3);\n  GG(&D, A, B, C, X[4], 5);\n  GG(&C, D, A, B, X[8], 9);\n  GG(&B, C, D, A, X[12], 13);\n  GG(&A, B, C, D, X[1], 3);\n  GG(&D, A, B, C, X[5], 5);\n  GG(&C, D, A, B, X[9], 9);\n  GG(&B, C, D, A, X[13], 13);\n  GG(&A, B, C, D, X[2], 3);\n  GG(&D, A, B, C, X[6], 5);\n  GG(&C, D, A, B, X[10], 9);\n  GG(&B, C, D, A, X[14], 13);\n  GG(&A, B, C, D, X[3], 3);\n  GG(&D, A, B, C, X[7], 5);\n  GG(&C, D, A, B, X[11], 9);\n  GG(&B, C, D, A, X[15], 13);\n\n  HH(&A, B, C, D, X[0], 3);\n  HH(&D, A, B, C, X[8], 9);\n  HH(&C, D, A, B, X[4], 11);\n  HH(&B, C, D, A, X[12], 15);\n  HH(&A, B, C, D, X[2], 3);\n  HH(&D, A, B, C, X[10], 9);\n  HH(&C, D, A, B, X[6], 11);\n  HH(&B, C, D, A, X[14], 15);\n  HH(&A, B, C, D, X[1], 3);\n  HH(&D, A, B, C, X[9], 9);\n  HH(&C, D, A, B, X[5], 11);\n  HH(&B, C, D, A, X[13], 15);\n  HH(&A, B, C, D, X[3], 3);\n  HH(&D, A, B, C, X[11], 9);\n  HH(&C, D, A, B, X[7], 11);\n  HH(&B, C, D, A, X[15], 15);\n\n  A += AA;\n  B += BB;\n  C += CC;\n  D += DD;\n}\n\n@group(0) @binding(0)\nvar<storage, read_write> result: vec4u;\n\n@compute @workgroup_size(1)\nfn main() {\n  // 'baaa' の md4 を計算\n  update(array<u32, 16>(\n    0x61616162u, 0x80u, 0u, 0u,\n    0u, 0u, 0u, 0u,\n    0u, 0u, 0u, 0u,\n    0u, 0u, 32u, 0u));\n  result = vec4u(A, B, C, D);\n}\n"}),u=n.createComputePipeline({layout:n.createPipelineLayout({bindGroupLayouts:[o]}),compute:{module:i,entryPoint:"main"}}),c=n.createCommandEncoder(),s=c.beginComputePass();s.setPipeline(u),s.setBindGroup(0,a),s.dispatchWorkgroups(1),s.end(),c.copyBufferToBuffer(t,0,r,0,16),n.queue.submit([c.finish()]),yield r.mapAsync(GPUMapMode.READ,0,16);const f=r.getMappedRange(0,16),l=new Uint8Array(f.slice(0));r.unmap();let d="";for(const e of l)d+=e.toString(16);console.log(d)},new((t=void 0)||(t=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,u)}c((r=r.apply(e,n||[])).next())}));var e,n,t,r},demo05:()=>{return e=void 0,n=void 0,o=function*(){const e=yield navigator.gpu.requestAdapter(),n=yield e.requestDevice(),t=n.createBuffer({size:r,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),o=n.createBuffer({size:r,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),a=performance.now(),i=n.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),u=n.createBindGroup({layout:i,entries:[{binding:0,resource:{buffer:t}}]}),c=n.createShaderModule({code:"\nfn F(X: u32, Y: u32, Z: u32) -> u32 {\n  return (X & Y) | (~X & Z);\n}\n\nfn G(X: u32, Y: u32, Z: u32) -> u32 {\n  return (X & Y) | (X & Z) | (Y & Z);\n}\n\nfn H(X: u32, Y: u32, Z: u32) -> u32 {\n  return X ^ Y ^ Z;\n}\n\nfn rotate(a: u32, s: u32) -> u32 {\n  return (a << s) | (a >> (32 - s));\n}\n\nfn FF(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + F(b, c, d) + x, s);\n}\n\nfn GG(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + G(b, c, d) + x + 0x5a827999u, s);\n}\n\nfn HH(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + H(b, c, d) + x + 0x6ed9eba1u, s);\n}\n\nvar<private> A: u32;\nvar<private> B: u32;\nvar<private> C: u32;\nvar<private> D: u32;\n\nfn update(X: array<u32, 16>) {\n  let AA = A;\n  let BB = B;\n  let CC = C;\n  let DD = D;\n\n  FF(&A, B, C, D, X[0], 3);\n  FF(&D, A, B, C, X[1], 7);\n  FF(&C, D, A, B, X[2], 11);\n  FF(&B, C, D, A, X[3], 19);\n  FF(&A, B, C, D, X[4], 3);\n  FF(&D, A, B, C, X[5], 7);\n  FF(&C, D, A, B, X[6], 11);\n  FF(&B, C, D, A, X[7], 19);\n  FF(&A, B, C, D, X[8], 3);\n  FF(&D, A, B, C, X[9], 7);\n  FF(&C, D, A, B, X[10], 11);\n  FF(&B, C, D, A, X[11], 19);\n  FF(&A, B, C, D, X[12], 3);\n  FF(&D, A, B, C, X[13], 7);\n  FF(&C, D, A, B, X[14], 11);\n  FF(&B, C, D, A, X[15], 19);\n\n  GG(&A, B, C, D, X[0], 3);\n  GG(&D, A, B, C, X[4], 5);\n  GG(&C, D, A, B, X[8], 9);\n  GG(&B, C, D, A, X[12], 13);\n  GG(&A, B, C, D, X[1], 3);\n  GG(&D, A, B, C, X[5], 5);\n  GG(&C, D, A, B, X[9], 9);\n  GG(&B, C, D, A, X[13], 13);\n  GG(&A, B, C, D, X[2], 3);\n  GG(&D, A, B, C, X[6], 5);\n  GG(&C, D, A, B, X[10], 9);\n  GG(&B, C, D, A, X[14], 13);\n  GG(&A, B, C, D, X[3], 3);\n  GG(&D, A, B, C, X[7], 5);\n  GG(&C, D, A, B, X[11], 9);\n  GG(&B, C, D, A, X[15], 13);\n\n  HH(&A, B, C, D, X[0], 3);\n  HH(&D, A, B, C, X[8], 9);\n  HH(&C, D, A, B, X[4], 11);\n  HH(&B, C, D, A, X[12], 15);\n  HH(&A, B, C, D, X[2], 3);\n  HH(&D, A, B, C, X[10], 9);\n  HH(&C, D, A, B, X[6], 11);\n  HH(&B, C, D, A, X[14], 15);\n  HH(&A, B, C, D, X[1], 3);\n  HH(&D, A, B, C, X[9], 9);\n  HH(&C, D, A, B, X[5], 11);\n  HH(&B, C, D, A, X[13], 15);\n  HH(&A, B, C, D, X[3], 3);\n  HH(&D, A, B, C, X[11], 9);\n  HH(&C, D, A, B, X[7], 11);\n  HH(&B, C, D, A, X[15], 15);\n\n  A += AA;\n  B += BB;\n  C += CC;\n  D += DD;\n}\n\n@group(0) @binding(0)\nvar<storage, read_write> result: array<u32>;\n\n@compute @workgroup_size(1 << 6)\nfn main(@builtin(global_invocation_id) global_id : vec3u) {\n  // ハッシュ値の先頭が 00000000 の入力を探す\n  for (var i = 0u; i < 1 << (32 - 14 - 6); i++) {\n    A = 0x67452301u;\n    B = 0xefcdab89u;\n    C = 0x98badcfeu;\n    D = 0x10325476u;\n\n    let word = (global_id.x << (32 - 14 - 6)) | i;\n    update(array<u32, 16>(\n      word, 0x80u, 0u, 0u,\n      0u, 0u, 0u, 0u,\n      0u, 0u, 0u, 0u,\n      0u, 0u, 32u, 0u));\n    if (A == 0x00000000u) {\n      result[global_id.x] = word;\n      //break;\n    }\n    //result[global_id.x] = select(result[global_id.x], word, A == 0x00000000u);\n  }\n}\n"}),s=n.createComputePipeline({layout:n.createPipelineLayout({bindGroupLayouts:[i]}),compute:{module:c,entryPoint:"main"}}),f=n.createCommandEncoder(),l=f.beginComputePass();l.setPipeline(s),l.setBindGroup(0,u),l.dispatchWorkgroups(16384),l.end(),f.copyBufferToBuffer(t,0,o,0,r),n.queue.submit([f.finish()]),yield o.mapAsync(GPUMapMode.READ,0,r);const d=o.getMappedRange(0,r),p=new Uint32Array(d.slice(0));o.unmap(),p.forEach((e=>{0!=e&&console.log(e)}));const g=performance.now();console.log(`duration: ${Math.round(g-a)} ms`),console.log(`hash rate: ${Math.round(1e3*Math.pow(2,32)/(g-a)/Math.pow(1024,3))} GH/s`)},new((t=void 0)||(t=Promise))((function(r,a){function i(e){try{c(o.next(e))}catch(e){a(e)}}function u(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var n;e.done?r(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,u)}c((o=o.apply(e,n||[])).next())}));var e,n,t,o},demo06:()=>{return e=void 0,n=void 0,r=function*(){const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const n=e.getContext("webgpu"),t=yield navigator.gpu.requestAdapter(),r=yield t.requestDevice(),o=r.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) color : vec4f\n}\n\n@vertex\nfn vertex_main(@location(0) position: vec2f,\n               @location(1) offset: vec2f,\n               @location(2) color: vec4f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = vec4((position + offset) * 0.1, 0., 1.);\n  output.color = color;\n  return output;\n}\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return fragData.color;\n}\n"});n.configure({device:r,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const a=[];for(let e=0;e<100;e++)a.push(Math.floor(20*(Math.random()-.5)),Math.floor(20*(Math.random()-.5)));const i=new Float32Array(a),u=r.createBuffer({size:i.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(u,0,i,0,i.length);const c=new Float32Array([0,1,1,-1,-1,-1]),s=r.createBuffer({size:c.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(s,0,c,0,c.length);const f=new Float32Array([1,0,0,1,0,1,0,1,0,0,1,1]),l=r.createBuffer({size:f.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(l,0,f,0,f.length);const d={vertex:{module:o,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x2"}],arrayStride:8,stepMode:"instance"},{attributes:[{shaderLocation:1,offset:0,format:"float32x2"}],arrayStride:8,stepMode:"vertex"},{attributes:[{shaderLocation:2,offset:0,format:"float32x4"}],arrayStride:16,stepMode:"vertex"}]},fragment:{module:o,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list"},layout:"auto"},p=r.createRenderPipeline(d),g=r.createCommandEncoder(),v={colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store",view:n.getCurrentTexture().createView()}]},m=g.beginRenderPass(v);m.setPipeline(p),m.setVertexBuffer(0,u),m.setVertexBuffer(1,s),m.setVertexBuffer(2,l),m.draw(3,100),m.end(),r.queue.submit([g.finish()])},new((t=void 0)||(t=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,u)}c((r=r.apply(e,n||[])).next())}));var e,n,t,r},demo07:()=>{return e=void 0,n=void 0,r=function*(){const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const n=e.getContext("webgpu"),t=yield navigator.gpu.requestAdapter(),r=yield t.requestDevice(),o=r.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) uv : vec2f\n}\n\n@vertex\nfn vertex_main(@location(0) position: vec4f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = position;\n  output.uv = position.xy * 0.5 + 0.5;\n  return output;\n}\n\n@group(0) @binding(0) var mySampler: sampler;\n@group(0) @binding(1) var myTexture: texture_2d<f32>;\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return textureSample(myTexture, mySampler, fragData.uv);\n}\n"});n.configure({device:r,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const a=new Float32Array([-1,-1,0,1,1,-1,0,1,-1,1,0,1,1,-1,0,1,-1,1,0,1,1,1,0,1]),i=r.createBuffer({size:a.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(i,0,a,0,a.length);const u=yield new Promise(((e,n)=>{const t=new Image;t.onload=()=>e(t),t.onerror=e=>n(e),t.src="./texture/dice.png"})),c=r.createTexture({size:[u.width,u.height,1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});r.queue.copyExternalImageToTexture({source:yield createImageBitmap(u)},{texture:c},[u.width,u.height]);const s=r.createSampler({magFilter:"linear",minFilter:"linear"}),f={vertex:{module:o,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x4"}],arrayStride:16,stepMode:"vertex"}]},fragment:{module:o,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list"},layout:"auto"},l=r.createRenderPipeline(f),d=r.createBindGroup({layout:l.getBindGroupLayout(0),entries:[{binding:0,resource:s},{binding:1,resource:c.createView()}]}),p={colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store",view:n.getCurrentTexture().createView()}]},g=r.createCommandEncoder(),v=g.beginRenderPass(p);v.setPipeline(l),v.setVertexBuffer(0,i),v.setBindGroup(0,d),v.draw(6),v.end(),r.queue.submit([g.finish()])},new((t=void 0)||(t=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,u)}c((r=r.apply(e,n||[])).next())}));var e,n,t,r}};function a(){const e=document.body.appendChild(document.createElement("ul"));for(const n in o){const t=e.appendChild(document.createElement("li")).appendChild(document.createElement("a"));t.href="./index.html?page="+n,t.textContent=n}}window.onload=()=>{return e=void 0,n=void 0,r=function*(){(o[new URL(window.location.href).searchParams.get("page")]||a)()},new((t=void 0)||(t=Promise))((function(o,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var n;e.done?o(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(i,u)}c((r=r.apply(e,n||[])).next())}));var e,n,t,r}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,