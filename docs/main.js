(()=>{"use strict";const e=1e3;const t=1e3;const n={basic_render_pipeline:()=>{return e=void 0,t=void 0,o=function*(){console.log("hello, world!");const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const t=e.getContext("webgpu"),n=yield navigator.gpu.requestAdapter(),o=yield n.requestDevice(),r=o.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) color : vec4f\n}\n\n@vertex\nfn vertex_main(@location(0) position: vec4f,\n               @location(1) color: vec4f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = position;\n  output.color = color;\n  return output;\n}\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return fragData.color;\n}\n"});t.configure({device:o,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const a=new Float32Array([0,.6,0,1,1,0,0,1,-.5,-.6,0,1,0,1,0,1,.5,-.6,0,1,0,0,1,1]),i=o.createBuffer({size:a.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});o.queue.writeBuffer(i,0,a,0,a.length);const u={vertex:{module:r,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x4"},{shaderLocation:1,offset:16,format:"float32x4"}],arrayStride:32,stepMode:"vertex"}]},fragment:{module:r,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list"},layout:"auto"},c=o.createRenderPipeline(u),l=o.createCommandEncoder(),s={colorAttachments:[{clearValue:{r:0,g:.5,b:1,a:1},loadOp:"clear",storeOp:"store",view:t.getCurrentTexture().createView()}]},f=l.beginRenderPass(s);f.setPipeline(c),f.setVertexBuffer(0,i),f.draw(3),f.end(),o.queue.submit([l.finish()])},new((n=void 0)||(n=Promise))((function(r,a){function i(e){try{c(o.next(e))}catch(e){a(e)}}function u(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((o=o.apply(e,t||[])).next())}));var e,t,n,o},basic_compute_pipeline:()=>{return t=void 0,n=void 0,r=function*(){console.log("hello, world!");const t=yield navigator.gpu.requestAdapter(),n=yield t.requestDevice(),o=n.createShaderModule({code:"\n@group(0) @binding(0)\nvar<storage, read_write> output: array<f32>;\n\n@compute @workgroup_size(64)\nfn main(\n  @builtin(global_invocation_id)\n  global_id : vec3u,\n\n  @builtin(local_invocation_id)\n  local_id : vec3u,\n) {\n  // Avoid accessing the buffer out of bounds\n  if (global_id.x >= 1000) {\n    return;\n  }\n\n  output[global_id.x] =\n    f32(global_id.x) * 1000. + f32(local_id.x);\n}\n"}),r=n.createBuffer({size:e,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),a=n.createBuffer({size:e,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),i=n.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),u=n.createBindGroup({layout:i,entries:[{binding:0,resource:{buffer:r}}]}),c=n.createComputePipeline({layout:n.createPipelineLayout({bindGroupLayouts:[i]}),compute:{module:o,entryPoint:"main"}}),l=n.createCommandEncoder(),s=l.beginComputePass();s.setPipeline(c),s.setBindGroup(0,u),s.dispatchWorkgroups(Math.ceil(15.625)),s.end(),l.copyBufferToBuffer(r,0,a,0,e),n.queue.submit([l.finish()]),yield a.mapAsync(GPUMapMode.READ,0,e);const f=a.getMappedRange(0,e).slice(0);a.unmap(),console.log(new Float32Array(f))},new((o=void 0)||(o=Promise))((function(e,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof o?n:new o((function(e){e(n)}))).then(i,u)}c((r=r.apply(t,n||[])).next())}));var t,n,o,r},demo01:()=>{return e=void 0,t=void 0,o=function*(){console.log("hello, world!");const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const t=e.getContext("webgpu"),n=yield navigator.gpu.requestAdapter(),o=yield n.requestDevice(),r=o.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) color : vec4f\n}\n\n@vertex\nfn vertex_main(@location(0) position: vec4f,\n               @location(1) color: vec4f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = vec4(position.xyz * 0.5, position.w);\n  output.color = color;\n  return output;\n}\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return fragData.color;\n}\n"});t.configure({device:o,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const a=new Float32Array([0,1,0,1,1,-1,0,1,-1,-1,0,1]),i=o.createBuffer({size:a.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});o.queue.writeBuffer(i,0,a,0,a.length);const u=new Float32Array([1,0,0,1,0,1,0,1,0,0,1,1]),c=o.createBuffer({size:u.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});o.queue.writeBuffer(c,0,u,0,u.length);const l={vertex:{module:r,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x4"}],arrayStride:16,stepMode:"vertex"},{attributes:[{shaderLocation:1,offset:0,format:"float32x4"}],arrayStride:16,stepMode:"vertex"}]},fragment:{module:r,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list"},layout:"auto"},s=o.createRenderPipeline(l),f=o.createCommandEncoder(),d={colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store",view:t.getCurrentTexture().createView()}]},p=f.beginRenderPass(d);p.setPipeline(s),p.setVertexBuffer(0,i),p.setVertexBuffer(1,c),p.draw(3),p.end(),o.queue.submit([f.finish()])},new((n=void 0)||(n=Promise))((function(r,a){function i(e){try{c(o.next(e))}catch(e){a(e)}}function u(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}c((o=o.apply(e,t||[])).next())}));var e,t,n,o},demo02:()=>{return e=void 0,n=void 0,r=function*(){console.log("hello, world!");const e=yield navigator.gpu.requestAdapter(),n=yield e.requestDevice(),o=n.createBuffer({size:t,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),r=n.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),a=n.createBindGroup({layout:r,entries:[{binding:0,resource:{buffer:o}}]}),i=n.createShaderModule({code:"\n@group(0) @binding(0)\nvar<storage, read_write> output: array<f32>;\n\n// バッファを初期化\n@compute @workgroup_size(64)\nfn init(@builtin(global_invocation_id) global_id : vec3u) {\n  output[global_id.x] = f32(global_id.x) * 1000.;\n}\n\n// バッファの値を1インクリメント\n@compute @workgroup_size(64)\nfn increment(@builtin(global_invocation_id) global_id : vec3u) {\n  output[global_id.x] += 1.;\n}\n"}),u=n.createCommandEncoder(),c=n.createComputePipeline({layout:n.createPipelineLayout({bindGroupLayouts:[r]}),compute:{module:i,entryPoint:"init"}}),l=u.beginComputePass();l.setPipeline(c),l.setBindGroup(0,a),l.dispatchWorkgroups(Math.ceil(15.625)),l.end();for(let e=0;e<10;e++){const e=n.createComputePipeline({layout:n.createPipelineLayout({bindGroupLayouts:[r]}),compute:{module:i,entryPoint:"increment"}}),t=u.beginComputePass();t.setPipeline(e),t.setBindGroup(0,a),t.dispatchWorkgroups(Math.ceil(15.625)),t.end()}const s=n.createBuffer({size:t,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST});u.copyBufferToBuffer(o,0,s,0,t),n.queue.submit([u.finish()]),yield s.mapAsync(GPUMapMode.READ,0,t);const f=s.getMappedRange(0,t).slice(0);s.unmap(),console.log(new Float32Array(f))},new((o=void 0)||(o=Promise))((function(t,a){function i(e){try{c(r.next(e))}catch(e){a(e)}}function u(e){try{c(r.throw(e))}catch(e){a(e)}}function c(e){var n;e.done?t(e.value):(n=e.value,n instanceof o?n:new o((function(e){e(n)}))).then(i,u)}c((r=r.apply(e,n||[])).next())}));var e,n,o,r}};function o(){const e=document.body.appendChild(document.createElement("ul"));for(const t in n){const n=e.appendChild(document.createElement("li")).appendChild(document.createElement("a"));n.href="./index.html?page="+t,n.textContent=t}}window.onload=()=>{return e=void 0,t=void 0,a=function*(){(n[new URL(window.location.href).searchParams.get("page")]||o)()},new((r=void 0)||(r=Promise))((function(n,o){function i(e){try{c(a.next(e))}catch(e){o(e)}}function u(e){try{c(a.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,u)}c((a=a.apply(e,t||[])).next())}));var e,t,r,a}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,