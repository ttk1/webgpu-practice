(()=>{"use strict";const e=1e3;const t=1e3;const n=5e4;const r=4194304;class a{constructor(e,t,n){if(this.m=e,this.n=t,null!=n){if(n.length!=e*t)throw new Error("サイズの不一致");this.matrix=[];for(let r=0;r<e;r++){this.matrix[r]=[];for(let a=0;a<t;a++)this.matrix[r][a]=n[r+e*a]}}else{this.matrix=[];for(let n=0;n<e;n++){this.matrix[n]=[];for(let e=0;e<t;e++)this.matrix[n][e]=0}}}setValue(e,t,n){if(e<0||e>=this.m||t<0||t>=this.n)throw new Error("範囲外");this.matrix[e][t]=n}getValue(e,t){if(e<0||e>=this.m||t<0||t>=this.n)throw new Error("範囲外");return this.matrix[e][t]}mul(e){if(this.n!=e.m)throw new Error("サイズの不一致");const t=new a(this.m,e.n);for(let n=0;n<this.m;n++)for(let r=0;r<e.n;r++){let a=0;for(let t=0;t<this.n;t++)a+=this.getValue(n,t)*e.getValue(t,r);t.setValue(n,r,a)}return t}toArray(){const e=[];for(let t=0;t<this.m;t++)for(let n=0;n<this.n;n++)e[t+this.m*n]=this.getValue(t,n);return e}}class o{constructor(e,t,n){if(this.m=e,this.n=t,null!=n){if(n.length!=e*t)throw new Error("サイズの不一致");this.matrix=[];for(let r=0;r<e;r++){this.matrix[r]=[];for(let a=0;a<t;a++)this.matrix[r][a]=n[r+e*a]}}else{this.matrix=[];for(let n=0;n<e;n++){this.matrix[n]=[];for(let e=0;e<t;e++)this.matrix[n][e]=0}}}setValue(e,t,n){if(e<0||e>=this.m||t<0||t>=this.n)throw new Error("範囲外");this.matrix[e][t]=n}getValue(e,t){if(e<0||e>=this.m||t<0||t>=this.n)throw new Error("範囲外");return this.matrix[e][t]}mul(e){if(this.n!=e.m)throw new Error("サイズの不一致");const t=new o(this.m,e.n);for(let n=0;n<this.m;n++)for(let r=0;r<e.n;r++){let a=0;for(let t=0;t<this.n;t++)a+=this.getValue(n,t)*e.getValue(t,r);t.setValue(n,r,a)}return t}toArray(){const e=[];for(let t=0;t<this.m;t++)for(let n=0;n<this.n;n++)e[t+this.m*n]=this.getValue(t,n);return e}}function i(e){return new Promise(((t,n)=>{const r=new Image;r.onload=()=>t(r),r.onerror=e=>n(e),r.src=e}))}class u{constructor(e,t,n){if(this.m=e,this.n=t,null!=n){if(n.length!=e*t)throw new Error("サイズの不一致");this.matrix=[];for(let r=0;r<e;r++){this.matrix[r]=[];for(let a=0;a<t;a++)this.matrix[r][a]=n[r+e*a]}}else{this.matrix=[];for(let n=0;n<e;n++){this.matrix[n]=[];for(let e=0;e<t;e++)this.matrix[n][e]=0}}}setValue(e,t,n){if(e<0||e>=this.m||t<0||t>=this.n)throw new Error("範囲外");this.matrix[e][t]=n}getValue(e,t){if(e<0||e>=this.m||t<0||t>=this.n)throw new Error("範囲外");return this.matrix[e][t]}mul(e){if(this.n!=e.m)throw new Error("サイズの不一致");const t=new u(this.m,e.n);for(let n=0;n<this.m;n++)for(let r=0;r<e.n;r++){let a=0;for(let t=0;t<this.n;t++)a+=this.getValue(n,t)*e.getValue(t,r);t.setValue(n,r,a)}return t}toArray(){const e=[];for(let t=0;t<this.m;t++)for(let n=0;n<this.n;n++)e[t+this.m*n]=this.getValue(t,n);return e}}function s(e){return new Promise(((t,n)=>{const r=new Image;r.onload=()=>t(r),r.onerror=e=>n(e),r.src=e}))}const c={basic_render_pipeline:()=>{return e=void 0,t=void 0,r=function*(){console.log("hello, world!");const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const t=e.getContext("webgpu"),n=yield navigator.gpu.requestAdapter(),r=yield n.requestDevice(),a=r.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) color : vec4f\n}\n\n@vertex\nfn vertex_main(@location(0) position: vec4f,\n               @location(1) color: vec4f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = position;\n  output.color = color;\n  return output;\n}\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return fragData.color;\n}\n"});t.configure({device:r,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const o=new Float32Array([0,.6,0,1,1,0,0,1,-.5,-.6,0,1,0,1,0,1,.5,-.6,0,1,0,0,1,1]),i=r.createBuffer({size:o.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(i,0,o,0,o.length);const u={vertex:{module:a,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x4"},{shaderLocation:1,offset:16,format:"float32x4"}],arrayStride:32,stepMode:"vertex"}]},fragment:{module:a,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list"},layout:"auto"},s=r.createRenderPipeline(u),c=r.createCommandEncoder(),f={colorAttachments:[{clearValue:{r:0,g:.5,b:1,a:1},loadOp:"clear",storeOp:"store",view:t.getCurrentTexture().createView()}]},l=c.beginRenderPass(f);l.setPipeline(s),l.setVertexBuffer(0,i),l.draw(3),l.end(),r.queue.submit([c.finish()])},new((n=void 0)||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r},basic_compute_pipeline:()=>{return t=void 0,n=void 0,a=function*(){console.log("hello, world!");const t=yield navigator.gpu.requestAdapter(),n=yield t.requestDevice(),r=n.createShaderModule({code:"\n@group(0) @binding(0)\nvar<storage, read_write> output: array<f32>;\n\n@compute @workgroup_size(64)\nfn main(\n  @builtin(global_invocation_id)\n  global_id : vec3u,\n\n  @builtin(local_invocation_id)\n  local_id : vec3u,\n) {\n  // Avoid accessing the buffer out of bounds\n  if (global_id.x >= 1000) {\n    return;\n  }\n\n  output[global_id.x] =\n    f32(global_id.x) * 1000. + f32(local_id.x);\n}\n"}),a=n.createBuffer({size:e,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),o=n.createBuffer({size:e,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),i=n.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),u=n.createBindGroup({layout:i,entries:[{binding:0,resource:{buffer:a}}]}),s=n.createComputePipeline({layout:n.createPipelineLayout({bindGroupLayouts:[i]}),compute:{module:r,entryPoint:"main"}}),c=n.createCommandEncoder(),f=c.beginComputePass();f.setPipeline(s),f.setBindGroup(0,u),f.dispatchWorkgroups(Math.ceil(15.625)),f.end(),c.copyBufferToBuffer(a,0,o,0,e),n.queue.submit([c.finish()]),yield o.mapAsync(GPUMapMode.READ,0,e);const l=o.getMappedRange(0,e).slice(0);o.unmap(),console.log(new Float32Array(l))},new((r=void 0)||(r=Promise))((function(e,o){function i(e){try{s(a.next(e))}catch(e){o(e)}}function u(e){try{s(a.throw(e))}catch(e){o(e)}}function s(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(i,u)}s((a=a.apply(t,n||[])).next())}));var t,n,r,a},demo01:()=>{return e=void 0,t=void 0,r=function*(){console.log("hello, world!");const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const t=e.getContext("webgpu"),n=yield navigator.gpu.requestAdapter(),r=yield n.requestDevice(),a=r.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) color : vec4f\n}\n\n@vertex\nfn vertex_main(@location(0) position: vec4f,\n               @location(1) color: vec4f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = vec4(position.xyz * 0.5, position.w);\n  output.color = color;\n  return output;\n}\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return fragData.color;\n}\n"});t.configure({device:r,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const o=new Float32Array([0,1,0,1,1,-1,0,1,-1,-1,0,1]),i=r.createBuffer({size:o.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(i,0,o,0,o.length);const u=new Float32Array([1,0,0,1,0,1,0,1,0,0,1,1]),s=r.createBuffer({size:u.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(s,0,u,0,u.length);const c={vertex:{module:a,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x4"}],arrayStride:16,stepMode:"vertex"},{attributes:[{shaderLocation:1,offset:0,format:"float32x4"}],arrayStride:16,stepMode:"vertex"}]},fragment:{module:a,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list"},layout:"auto"},f=r.createRenderPipeline(c),l=r.createCommandEncoder(),d={colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store",view:t.getCurrentTexture().createView()}]},g=l.beginRenderPass(d);g.setPipeline(f),g.setVertexBuffer(0,i),g.setVertexBuffer(1,s),g.draw(3),g.end(),r.queue.submit([l.finish()])},new((n=void 0)||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r},demo02:()=>{return e=void 0,n=void 0,a=function*(){console.log("hello, world!");const e=yield navigator.gpu.requestAdapter(),n=yield e.requestDevice(),r=n.createBuffer({size:t,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),a=n.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),o=n.createBindGroup({layout:a,entries:[{binding:0,resource:{buffer:r}}]}),i=n.createShaderModule({code:"\n@group(0) @binding(0)\nvar<storage, read_write> output: array<f32>;\n\n// バッファを初期化\n@compute @workgroup_size(64)\nfn init(@builtin(global_invocation_id) global_id : vec3u) {\n  output[global_id.x] = f32(global_id.x) * 1000.;\n}\n\n// バッファの値を1インクリメント\n@compute @workgroup_size(64)\nfn increment(@builtin(global_invocation_id) global_id : vec3u) {\n  output[global_id.x] += 1.;\n}\n"}),u=n.createCommandEncoder(),s=n.createComputePipeline({layout:n.createPipelineLayout({bindGroupLayouts:[a]}),compute:{module:i,entryPoint:"init"}}),c=u.beginComputePass();c.setPipeline(s),c.setBindGroup(0,o),c.dispatchWorkgroups(Math.ceil(15.625)),c.end();for(let e=0;e<10;e++){const e=n.createComputePipeline({layout:n.createPipelineLayout({bindGroupLayouts:[a]}),compute:{module:i,entryPoint:"increment"}}),t=u.beginComputePass();t.setPipeline(e),t.setBindGroup(0,o),t.dispatchWorkgroups(Math.ceil(15.625)),t.end()}const f=n.createBuffer({size:t,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST});u.copyBufferToBuffer(r,0,f,0,t),n.queue.submit([u.finish()]),yield f.mapAsync(GPUMapMode.READ,0,t);const l=f.getMappedRange(0,t).slice(0);f.unmap(),console.log(new Float32Array(l))},new((r=void 0)||(r=Promise))((function(t,o){function i(e){try{s(a.next(e))}catch(e){o(e)}}function u(e){try{s(a.throw(e))}catch(e){o(e)}}function s(e){var n;e.done?t(e.value):(n=e.value,n instanceof r?n:new r((function(e){e(n)}))).then(i,u)}s((a=a.apply(e,n||[])).next())}));var e,n,r,a},demo03:()=>{return e=void 0,t=void 0,a=function*(){console.log("hello, world!");const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const t=e.getContext("webgpu"),r=yield navigator.gpu.requestAdapter(),a=yield r.requestDevice(),o=a.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) color : vec4f\n}\n\n@vertex\nfn vertex_main(@location(0) position: vec2f,\n               @location(1) velocity: vec2f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = vec4f(position, 0., 1.);\n  output.color = vec4f(1., 0., 0., 1.);\n  return output;\n}\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return fragData.color;\n}\n\nstruct Particle {\n  position : vec2f,\n  velocity : vec2f,\n}\n\n@binding(0) @group(0)\nvar<storage, read_write> particles: array<Particle>;\n\n@compute @workgroup_size(64)\nfn update(@builtin(global_invocation_id) global_id : vec3u) {\n  let g = vec2f(0., 0.);\n  let idx = global_id.x;\n  let p = particles[idx].position;\n  let v = particles[idx].velocity;\n\n  particles[idx].position = p + v * .2;\n  particles[idx].velocity = v\n    // 重力加速度\n    + ((g - p) / pow(distance(g, p) + 1., 2.)) * .05\n    // 空気抵抗\n    - v * pow(length(v), 2.) * .05;\n}\n"});t.configure({device:a,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const i=[];for(let e=0;e<n;e++)i.push(2*(Math.random()-.5)),i.push(2*(Math.random()-.5)),i.push(0),i.push(0);const u=a.createBuffer({size:Float32Array.BYTES_PER_ELEMENT*n*4,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST|GPUBufferUsage.STORAGE});a.queue.writeBuffer(u,0,new Float32Array(i),0,n);const s={vertex:{module:o,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x2"},{shaderLocation:1,offset:8,format:"float32x2"}],arrayStride:16,stepMode:"vertex"}]},fragment:{module:o,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"point-list"},layout:"auto"},c=a.createRenderPipeline(s),f={colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store",view:null}]},l=a.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),d=a.createBindGroup({layout:l,entries:[{binding:0,resource:{buffer:u}}]}),g=a.createComputePipeline({layout:a.createPipelineLayout({bindGroupLayouts:[l]}),compute:{module:o,entryPoint:"update"}}),p=()=>{const e=a.createCommandEncoder();f.colorAttachments[0].view=t.getCurrentTexture().createView();const r=e.beginRenderPass(f);r.setPipeline(c),r.setVertexBuffer(0,u),r.draw(n),r.end();const o=e.beginComputePass();o.setPipeline(g),o.setBindGroup(0,d),o.dispatchWorkgroups(Math.ceil(781.25)),o.end(),a.queue.submit([e.finish()]),requestAnimationFrame(p)};p()},new((r=void 0)||(r=Promise))((function(n,o){function i(e){try{s(a.next(e))}catch(e){o(e)}}function u(e){try{s(a.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?n(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(i,u)}s((a=a.apply(e,t||[])).next())}));var e,t,r,a},demo04:()=>{return e=void 0,t=void 0,r=function*(){const e=yield navigator.gpu.requestAdapter(),t=yield e.requestDevice(),n=t.createBuffer({size:16,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),r=t.createBuffer({size:16,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),a=t.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),o=t.createBindGroup({layout:a,entries:[{binding:0,resource:{buffer:n}}]}),i=t.createShaderModule({code:"\nfn F(X: u32, Y: u32, Z: u32) -> u32 {\n  return (X & Y) | (~X & Z);\n}\n\nfn G(X: u32, Y: u32, Z: u32) -> u32 {\n  return (X & Y) | (X & Z) | (Y & Z);\n}\n\nfn H(X: u32, Y: u32, Z: u32) -> u32 {\n  return X ^ Y ^ Z;\n}\n\nfn rotate(a: u32, s: u32) -> u32 {\n  return (a << s) | (a >> (32 - s));\n}\n\nfn FF(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + F(b, c, d) + x, s);\n}\n\nfn GG(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + G(b, c, d) + x + 0x5a827999u, s);\n}\n\nfn HH(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + H(b, c, d) + x + 0x6ed9eba1u, s);\n}\n\nvar<private> A = 0x67452301u;\nvar<private> B = 0xefcdab89u;\nvar<private> C = 0x98badcfeu;\nvar<private> D = 0x10325476u;\n\nfn update(X: array<u32, 16>) {\n  let AA = A;\n  let BB = B;\n  let CC = C;\n  let DD = D;\n\n  FF(&A, B, C, D, X[0], 3);\n  FF(&D, A, B, C, X[1], 7);\n  FF(&C, D, A, B, X[2], 11);\n  FF(&B, C, D, A, X[3], 19);\n  FF(&A, B, C, D, X[4], 3);\n  FF(&D, A, B, C, X[5], 7);\n  FF(&C, D, A, B, X[6], 11);\n  FF(&B, C, D, A, X[7], 19);\n  FF(&A, B, C, D, X[8], 3);\n  FF(&D, A, B, C, X[9], 7);\n  FF(&C, D, A, B, X[10], 11);\n  FF(&B, C, D, A, X[11], 19);\n  FF(&A, B, C, D, X[12], 3);\n  FF(&D, A, B, C, X[13], 7);\n  FF(&C, D, A, B, X[14], 11);\n  FF(&B, C, D, A, X[15], 19);\n\n  GG(&A, B, C, D, X[0], 3);\n  GG(&D, A, B, C, X[4], 5);\n  GG(&C, D, A, B, X[8], 9);\n  GG(&B, C, D, A, X[12], 13);\n  GG(&A, B, C, D, X[1], 3);\n  GG(&D, A, B, C, X[5], 5);\n  GG(&C, D, A, B, X[9], 9);\n  GG(&B, C, D, A, X[13], 13);\n  GG(&A, B, C, D, X[2], 3);\n  GG(&D, A, B, C, X[6], 5);\n  GG(&C, D, A, B, X[10], 9);\n  GG(&B, C, D, A, X[14], 13);\n  GG(&A, B, C, D, X[3], 3);\n  GG(&D, A, B, C, X[7], 5);\n  GG(&C, D, A, B, X[11], 9);\n  GG(&B, C, D, A, X[15], 13);\n\n  HH(&A, B, C, D, X[0], 3);\n  HH(&D, A, B, C, X[8], 9);\n  HH(&C, D, A, B, X[4], 11);\n  HH(&B, C, D, A, X[12], 15);\n  HH(&A, B, C, D, X[2], 3);\n  HH(&D, A, B, C, X[10], 9);\n  HH(&C, D, A, B, X[6], 11);\n  HH(&B, C, D, A, X[14], 15);\n  HH(&A, B, C, D, X[1], 3);\n  HH(&D, A, B, C, X[9], 9);\n  HH(&C, D, A, B, X[5], 11);\n  HH(&B, C, D, A, X[13], 15);\n  HH(&A, B, C, D, X[3], 3);\n  HH(&D, A, B, C, X[11], 9);\n  HH(&C, D, A, B, X[7], 11);\n  HH(&B, C, D, A, X[15], 15);\n\n  A += AA;\n  B += BB;\n  C += CC;\n  D += DD;\n}\n\n@group(0) @binding(0)\nvar<storage, read_write> result: vec4u;\n\n@compute @workgroup_size(1)\nfn main() {\n  // 'baaa' の md4 を計算\n  update(array<u32, 16>(\n    0x61616162u, 0x80u, 0u, 0u,\n    0u, 0u, 0u, 0u,\n    0u, 0u, 0u, 0u,\n    0u, 0u, 32u, 0u));\n  result = vec4u(A, B, C, D);\n}\n"}),u=t.createComputePipeline({layout:t.createPipelineLayout({bindGroupLayouts:[a]}),compute:{module:i,entryPoint:"main"}}),s=t.createCommandEncoder(),c=s.beginComputePass();c.setPipeline(u),c.setBindGroup(0,o),c.dispatchWorkgroups(1),c.end(),s.copyBufferToBuffer(n,0,r,0,16),t.queue.submit([s.finish()]),yield r.mapAsync(GPUMapMode.READ,0,16);const f=r.getMappedRange(0,16),l=new Uint8Array(f.slice(0));r.unmap();let d="";for(const e of l)d+=e.toString(16);console.log(d)},new((n=void 0)||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r},demo05:()=>{return e=void 0,t=void 0,a=function*(){const e=yield navigator.gpu.requestAdapter(),t=yield e.requestDevice(),n=t.createBuffer({size:r,usage:GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC}),a=t.createBuffer({size:r,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),o=performance.now(),i=t.createBindGroupLayout({entries:[{binding:0,visibility:GPUShaderStage.COMPUTE,buffer:{type:"storage"}}]}),u=t.createBindGroup({layout:i,entries:[{binding:0,resource:{buffer:n}}]}),s=t.createShaderModule({code:"\nfn F(X: u32, Y: u32, Z: u32) -> u32 {\n  return (X & Y) | (~X & Z);\n}\n\nfn G(X: u32, Y: u32, Z: u32) -> u32 {\n  return (X & Y) | (X & Z) | (Y & Z);\n}\n\nfn H(X: u32, Y: u32, Z: u32) -> u32 {\n  return X ^ Y ^ Z;\n}\n\nfn rotate(a: u32, s: u32) -> u32 {\n  return (a << s) | (a >> (32 - s));\n}\n\nfn FF(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + F(b, c, d) + x, s);\n}\n\nfn GG(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + G(b, c, d) + x + 0x5a827999u, s);\n}\n\nfn HH(a: ptr<private,u32>, b: u32, c: u32, d: u32, x: u32, s: u32) {\n  *a = rotate(*a + H(b, c, d) + x + 0x6ed9eba1u, s);\n}\n\nvar<private> A: u32;\nvar<private> B: u32;\nvar<private> C: u32;\nvar<private> D: u32;\n\nfn update(X: array<u32, 16>) {\n  let AA = A;\n  let BB = B;\n  let CC = C;\n  let DD = D;\n\n  FF(&A, B, C, D, X[0], 3);\n  FF(&D, A, B, C, X[1], 7);\n  FF(&C, D, A, B, X[2], 11);\n  FF(&B, C, D, A, X[3], 19);\n  FF(&A, B, C, D, X[4], 3);\n  FF(&D, A, B, C, X[5], 7);\n  FF(&C, D, A, B, X[6], 11);\n  FF(&B, C, D, A, X[7], 19);\n  FF(&A, B, C, D, X[8], 3);\n  FF(&D, A, B, C, X[9], 7);\n  FF(&C, D, A, B, X[10], 11);\n  FF(&B, C, D, A, X[11], 19);\n  FF(&A, B, C, D, X[12], 3);\n  FF(&D, A, B, C, X[13], 7);\n  FF(&C, D, A, B, X[14], 11);\n  FF(&B, C, D, A, X[15], 19);\n\n  GG(&A, B, C, D, X[0], 3);\n  GG(&D, A, B, C, X[4], 5);\n  GG(&C, D, A, B, X[8], 9);\n  GG(&B, C, D, A, X[12], 13);\n  GG(&A, B, C, D, X[1], 3);\n  GG(&D, A, B, C, X[5], 5);\n  GG(&C, D, A, B, X[9], 9);\n  GG(&B, C, D, A, X[13], 13);\n  GG(&A, B, C, D, X[2], 3);\n  GG(&D, A, B, C, X[6], 5);\n  GG(&C, D, A, B, X[10], 9);\n  GG(&B, C, D, A, X[14], 13);\n  GG(&A, B, C, D, X[3], 3);\n  GG(&D, A, B, C, X[7], 5);\n  GG(&C, D, A, B, X[11], 9);\n  GG(&B, C, D, A, X[15], 13);\n\n  HH(&A, B, C, D, X[0], 3);\n  HH(&D, A, B, C, X[8], 9);\n  HH(&C, D, A, B, X[4], 11);\n  HH(&B, C, D, A, X[12], 15);\n  HH(&A, B, C, D, X[2], 3);\n  HH(&D, A, B, C, X[10], 9);\n  HH(&C, D, A, B, X[6], 11);\n  HH(&B, C, D, A, X[14], 15);\n  HH(&A, B, C, D, X[1], 3);\n  HH(&D, A, B, C, X[9], 9);\n  HH(&C, D, A, B, X[5], 11);\n  HH(&B, C, D, A, X[13], 15);\n  HH(&A, B, C, D, X[3], 3);\n  HH(&D, A, B, C, X[11], 9);\n  HH(&C, D, A, B, X[7], 11);\n  HH(&B, C, D, A, X[15], 15);\n\n  A += AA;\n  B += BB;\n  C += CC;\n  D += DD;\n}\n\n@group(0) @binding(0)\nvar<storage, read_write> result: array<u32>;\n\n@compute @workgroup_size(1 << 6)\nfn main(@builtin(global_invocation_id) global_id : vec3u) {\n  // ハッシュ値の先頭が 00000000 の入力を探す\n  for (var i = 0u; i < 1 << (32 - 14 - 6); i++) {\n    A = 0x67452301u;\n    B = 0xefcdab89u;\n    C = 0x98badcfeu;\n    D = 0x10325476u;\n\n    let word = (global_id.x << (32 - 14 - 6)) | i;\n    update(array<u32, 16>(\n      word, 0x80u, 0u, 0u,\n      0u, 0u, 0u, 0u,\n      0u, 0u, 0u, 0u,\n      0u, 0u, 32u, 0u));\n    if (A == 0x00000000u) {\n      result[global_id.x] = word;\n      //break;\n    }\n    //result[global_id.x] = select(result[global_id.x], word, A == 0x00000000u);\n  }\n}\n"}),c=t.createComputePipeline({layout:t.createPipelineLayout({bindGroupLayouts:[i]}),compute:{module:s,entryPoint:"main"}}),f=t.createCommandEncoder(),l=f.beginComputePass();l.setPipeline(c),l.setBindGroup(0,u),l.dispatchWorkgroups(16384),l.end(),f.copyBufferToBuffer(n,0,a,0,r),t.queue.submit([f.finish()]),yield a.mapAsync(GPUMapMode.READ,0,r);const d=a.getMappedRange(0,r),g=new Uint32Array(d.slice(0));a.unmap(),g.forEach((e=>{0!=e&&console.log(e)}));const p=performance.now();console.log(`duration: ${Math.round(p-o)} ms`),console.log(`hash rate: ${Math.round(1e3*Math.pow(2,32)/(p-o)/Math.pow(1024,3))} GH/s`)},new((n=void 0)||(n=Promise))((function(r,o){function i(e){try{s(a.next(e))}catch(e){o(e)}}function u(e){try{s(a.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((a=a.apply(e,t||[])).next())}));var e,t,n,a},demo06:()=>{return e=void 0,t=void 0,r=function*(){const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const t=e.getContext("webgpu"),n=yield navigator.gpu.requestAdapter(),r=yield n.requestDevice(),a=r.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) color : vec4f\n}\n\n@vertex\nfn vertex_main(@location(0) position: vec2f,\n               @location(1) offset: vec2f,\n               @location(2) color: vec4f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = vec4((position + offset) * 0.1, 0., 1.);\n  output.color = color;\n  return output;\n}\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return fragData.color;\n}\n"});t.configure({device:r,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const o=[];for(let e=0;e<100;e++)o.push(Math.floor(20*(Math.random()-.5)),Math.floor(20*(Math.random()-.5)));const i=new Float32Array(o),u=r.createBuffer({size:i.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(u,0,i,0,i.length);const s=new Float32Array([0,1,1,-1,-1,-1]),c=r.createBuffer({size:s.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(c,0,s,0,s.length);const f=new Float32Array([1,0,0,1,0,1,0,1,0,0,1,1]),l=r.createBuffer({size:f.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(l,0,f,0,f.length);const d={vertex:{module:a,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x2"}],arrayStride:8,stepMode:"instance"},{attributes:[{shaderLocation:1,offset:0,format:"float32x2"}],arrayStride:8,stepMode:"vertex"},{attributes:[{shaderLocation:2,offset:0,format:"float32x4"}],arrayStride:16,stepMode:"vertex"}]},fragment:{module:a,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list"},layout:"auto"},g=r.createRenderPipeline(d),p=r.createCommandEncoder(),m={colorAttachments:[{clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store",view:t.getCurrentTexture().createView()}]},v=p.beginRenderPass(m);v.setPipeline(g),v.setVertexBuffer(0,u),v.setVertexBuffer(1,c),v.setVertexBuffer(2,l),v.draw(3,100),v.end(),r.queue.submit([p.finish()])},new((n=void 0)||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r},demo07:()=>{return e=void 0,t=void 0,r=function*(){const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const t=e.getContext("webgpu"),n=yield navigator.gpu.requestAdapter(),r=yield n.requestDevice(),o=r.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) uv : vec2f\n}\n\n@group(0) @binding(0) var<uniform> mvpMat: mat4x4f;\n\n@vertex\nfn vertex_main(@location(0) position: vec3f,\n               @location(1) uv: vec2f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = mvpMat * vec4(position, 1.0);\n  output.uv = uv;\n  return output;\n}\n\n@group(0) @binding(1) var mySampler: sampler;\n@group(0) @binding(2) var myTexture: texture_2d<f32>;\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return textureSample(myTexture, mySampler, fragData.uv);\n}\n"});t.configure({device:r,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const i=new Float32Array([-.5,.5,.5,.5,.5,.5,.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,-.5,.5,.5,-.5,-.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5,.5,.5,-.5,-.5,-.5,-.5,-.5,.5,.5,.5,.5,.5,-.5,.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,.5,-.5,.5,-.5,.5,.5,.5,-.5,.5,.5,.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5]),u=r.createBuffer({size:i.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(u,0,i,0,i.length);const s=new Float32Array([1/4,1/3,.5,1/3,.5,0,1/4,1/3,.5,0,1/4,0,1/4,2/3,1/4,1,.5,1,1/4,2/3,.5,1,.5,2/3,1/4,1/3,0,1/3,0,2/3,1/4,1/3,0,2/3,1/4,2/3,.5,1/3,.5,2/3,3/4,2/3,.5,1/3,3/4,2/3,3/4,1/3,1/4,1/3,1/4,2/3,.5,2/3,1/4,1/3,.5,2/3,.5,1/3,1,1/3,3/4,1/3,3/4,2/3,1,1/3,3/4,2/3,1,2/3]),c=r.createBuffer({size:s.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(c,0,s,0,s.length);const f=yield new Promise(((e,t)=>{const n=new Image;n.onload=()=>e(n),n.onerror=e=>t(e),n.src="./texture/dice.png"})),l=r.createTexture({size:[f.width,f.height,1],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT});r.queue.copyExternalImageToTexture({source:yield createImageBitmap(f)},{texture:l},[f.width,f.height]);const d=r.createSampler({magFilter:"linear",minFilter:"linear"}),g=r.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),p={vertex:{module:o,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x3"}],arrayStride:12,stepMode:"vertex"},{attributes:[{shaderLocation:1,offset:0,format:"float32x2"}],arrayStride:8,stepMode:"vertex"}]},fragment:{module:o,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list",cullMode:"back"},layout:"auto"},m=r.createRenderPipeline(p),v=r.createBindGroup({layout:m.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:g}},{binding:1,resource:d},{binding:2,resource:l.createView()}]}),h={r:0,g:0,b:0,a:1};let B=0,y=0;requestAnimationFrame((function n(){const o=new a(4,4,[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);B+=.01,y+=.015;const i=new a(4,4,[1,0,0,0,0,Math.cos(B),Math.sin(B),0,0,-Math.sin(B),Math.cos(B),0,0,0,0,1]),s=new a(4,4,[Math.cos(y),0,-Math.sin(y),0,0,1,0,0,Math.sin(y),0,Math.cos(y),0,0,0,0,1]),f=new a(4,4,[1,0,0,0,0,1,0,0,0,0,1,0,0,0,-2,1]),l=70/180*Math.PI,d=e.width/e.height,p=new a(4,4,[1/(d*Math.tan(l/2)),0,0,0,0,1/Math.tan(l/2),0,0,0,0,-100.5/99.5,-1,0,0,-100/99.5,0]),x=new Float32Array(p.mul(f).mul(s).mul(i).mul(o).toArray());r.queue.writeBuffer(g,0,x,0,x.length);const P={colorAttachments:[{clearValue:h,loadOp:"clear",storeOp:"store",view:t.getCurrentTexture().createView()}]},C=r.createCommandEncoder(),w=C.beginRenderPass(P);w.setPipeline(m),w.setVertexBuffer(0,u),w.setVertexBuffer(1,c),w.setBindGroup(0,v),w.draw(36),w.end(),r.queue.submit([C.finish()]),requestAnimationFrame(n)}))},new((n=void 0)||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r},demo08:()=>{return e=void 0,t=void 0,r=function*(){const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const t=e.getContext("webgpu"),n=yield navigator.gpu.requestAdapter(),r=yield n.requestDevice(),a=r.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) uv : vec2f\n}\n\n@group(0) @binding(0) var<uniform> mvpMat: mat4x4f;\n\n@vertex\nfn vertex_main(@location(0) position: vec3f,\n               @location(1) uv: vec2f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = mvpMat * vec4(position, 1.0);\n  output.uv = uv;\n  return output;\n}\n\n@group(0) @binding(1) var mySampler: sampler;\n@group(0) @binding(2) var myTexture: texture_2d_array<f32>;\n@group(0) @binding(3) var<uniform> textureId: u32;\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return textureSample(myTexture, mySampler, fragData.uv, textureId);\n}\n"});t.configure({device:r,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const u=new Float32Array([-.5,.5,.5,.5,.5,.5,.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,-.5,.5,.5,-.5,-.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5,.5,.5,-.5,-.5,-.5,-.5,-.5,.5,.5,.5,.5,.5,-.5,.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,.5,-.5,.5,-.5,.5,.5,.5,-.5,.5,.5,.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5]),s=r.createBuffer({size:u.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(s,0,u,0,u.length);const c=new Float32Array([1/4,1/3,.5,1/3,.5,0,1/4,1/3,.5,0,1/4,0,1/4,2/3,1/4,1,.5,1,1/4,2/3,.5,1,.5,2/3,1/4,1/3,0,1/3,0,2/3,1/4,1/3,0,2/3,1/4,2/3,.5,1/3,.5,2/3,3/4,2/3,.5,1/3,3/4,2/3,3/4,1/3,1/4,1/3,1/4,2/3,.5,2/3,1/4,1/3,.5,2/3,.5,1/3,1,1/3,3/4,1/3,3/4,2/3,1,1/3,3/4,2/3,1,2/3]),f=r.createBuffer({size:c.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(f,0,c,0,c.length);const l=yield i("./texture/dice.png"),d=yield i("./texture/dice2.png"),g=r.createBuffer({size:393216,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.MAP_WRITE});yield g.mapAsync(GPUMapMode.WRITE,0,393216);const p=new Uint8Array(g.getMappedRange()),m=document.createElement("canvas");m.width=256,m.height=192;const v=m.getContext("2d");v.drawImage(l,0,0),p.set(v.getImageData(0,0,256,192).data,0),v.drawImage(d,0,0),p.set(v.getImageData(0,0,256,192).data,196608),g.unmap();const h=r.createTexture({size:[256,192,2],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT}),B=r.createSampler({magFilter:"linear",minFilter:"linear"}),y=r.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),x=r.createBuffer({size:4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),P={vertex:{module:a,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x3"}],arrayStride:12,stepMode:"vertex"},{attributes:[{shaderLocation:1,offset:0,format:"float32x2"}],arrayStride:8,stepMode:"vertex"}]},fragment:{module:a,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list",cullMode:"back"},layout:"auto"},C=r.createRenderPipeline(P),w=r.createBindGroup({layout:C.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:y}},{binding:1,resource:B},{binding:2,resource:h.createView()},{binding:3,resource:{buffer:x}}]}),b={r:0,g:0,b:0,a:1};let A=0,G=0;const D=performance.now();requestAnimationFrame((function n(){const a=new o(4,4,[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);A+=.01,G+=.015;const i=new o(4,4,[1,0,0,0,0,Math.cos(A),Math.sin(A),0,0,-Math.sin(A),Math.cos(A),0,0,0,0,1]),u=new o(4,4,[Math.cos(G),0,-Math.sin(G),0,0,1,0,0,Math.sin(G),0,Math.cos(G),0,0,0,0,1]),c=new o(4,4,[1,0,0,0,0,1,0,0,0,0,1,0,0,0,-2,1]),l=70/180*Math.PI,d=e.width/e.height,p=new o(4,4,[1/(d*Math.tan(l/2)),0,0,0,0,1/Math.tan(l/2),0,0,0,0,-100.5/99.5,-1,0,0,-100/99.5,0]),m=new Float32Array(p.mul(c).mul(u).mul(i).mul(a).toArray());r.queue.writeBuffer(y,0,m,0,m.length);const v=(performance.now()-D)/5e3%2;r.queue.writeBuffer(x,0,new Uint32Array([v]),0,1);const B={colorAttachments:[{clearValue:b,loadOp:"clear",storeOp:"store",view:t.getCurrentTexture().createView()}]},P=r.createCommandEncoder();P.copyBufferToTexture({buffer:g,bytesPerRow:1024,rowsPerImage:192},{texture:h},{width:256,height:192,depthOrArrayLayers:2});const U=P.beginRenderPass(B);U.setPipeline(C),U.setVertexBuffer(0,s),U.setVertexBuffer(1,f),U.setBindGroup(0,w),U.draw(36),U.end(),r.queue.submit([P.finish()]),requestAnimationFrame(n)}))},new((n=void 0)||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r},demo09:()=>{return e=void 0,t=void 0,r=function*(){const e=document.body.appendChild(document.createElement("canvas"));e.width=500,e.height=500;const t=e.getContext("webgpu"),n=yield navigator.gpu.requestAdapter(),r=yield n.requestDevice(),a=r.createShaderModule({code:"\nstruct VertexOut {\n  @builtin(position) position : vec4f,\n  @location(0) uv : vec2f\n}\n\n@group(0) @binding(0) var<uniform> mvpMat: mat4x4f;\n\n@vertex\nfn vertex_main(@location(0) position: vec3f,\n               @location(1) uv: vec2f) -> VertexOut\n{\n  var output : VertexOut;\n  output.position = mvpMat * vec4(position, 1.0);\n  output.uv = uv;\n  return output;\n}\n\n@group(0) @binding(1) var mySampler: sampler;\n@group(0) @binding(2) var myTexture: texture_2d_array<f32>;\n@group(0) @binding(3) var<uniform> textureId: u32;\n\n@fragment\nfn fragment_main(fragData: VertexOut) -> @location(0) vec4f\n{\n  return textureSample(myTexture, mySampler, fragData.uv, textureId);\n}\n"});t.configure({device:r,format:navigator.gpu.getPreferredCanvasFormat(),alphaMode:"premultiplied"});const o=new Float32Array([-.5,.5,.5,.5,.5,.5,.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,-.5,.5,.5,-.5,-.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5,.5,.5,-.5,-.5,-.5,-.5,-.5,.5,.5,.5,.5,.5,-.5,.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,.5,-.5,.5,-.5,.5,.5,.5,-.5,.5,.5,.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5]),i=r.createBuffer({size:o.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(i,0,o,0,o.length);const c=new Float32Array([1/4,1/3,.5,1/3,.5,0,1/4,1/3,.5,0,1/4,0,1/4,2/3,1/4,1,.5,1,1/4,2/3,.5,1,.5,2/3,1/4,1/3,0,1/3,0,2/3,1/4,1/3,0,2/3,1/4,2/3,.5,1/3,.5,2/3,3/4,2/3,.5,1/3,3/4,2/3,3/4,1/3,1/4,1/3,1/4,2/3,.5,2/3,1/4,1/3,.5,2/3,.5,1/3,1,1/3,3/4,1/3,3/4,2/3,1,1/3,3/4,2/3,1,2/3]),f=r.createBuffer({size:c.byteLength,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_DST});r.queue.writeBuffer(f,0,c,0,c.length);const l=yield s("./texture/dice.png"),d=yield s("./texture/dice2.png"),g=r.createBuffer({size:393216,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.MAP_WRITE});yield g.mapAsync(GPUMapMode.WRITE,0,393216);const p=new Uint8Array(g.getMappedRange()),m=document.createElement("canvas");m.width=256,m.height=192;const v=m.getContext("2d");v.drawImage(l,0,0),p.set(v.getImageData(0,0,256,192).data,0),v.drawImage(d,0,0),p.set(v.getImageData(0,0,256,192).data,196608),g.unmap();const h=r.createTexture({size:[256,192,2],format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT}),B=r.createSampler({magFilter:"linear",minFilter:"linear"}),y=r.createBuffer({size:64,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),x=r.createBuffer({size:4,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),P={vertex:{module:a,entryPoint:"vertex_main",buffers:[{attributes:[{shaderLocation:0,offset:0,format:"float32x3"}],arrayStride:12,stepMode:"vertex"},{attributes:[{shaderLocation:1,offset:0,format:"float32x2"}],arrayStride:8,stepMode:"vertex"}]},fragment:{module:a,entryPoint:"fragment_main",targets:[{format:navigator.gpu.getPreferredCanvasFormat()}]},primitive:{topology:"triangle-list",cullMode:"back"},layout:"auto"},C=r.createRenderPipeline(P),w=r.createBindGroup({layout:C.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:y}},{binding:1,resource:B},{binding:2,resource:h.createView()},{binding:3,resource:{buffer:x}}]}),b=r.createRenderBundleEncoder({colorFormats:[navigator.gpu.getPreferredCanvasFormat()]});var A;(A=b).setPipeline(C),A.setVertexBuffer(0,i),A.setVertexBuffer(1,f),A.setBindGroup(0,w),A.draw(36);const G=b.finish(),D={r:0,g:0,b:0,a:1};let U=0,X=0;const F=performance.now();requestAnimationFrame((function n(){const a=new u(4,4,[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]);U+=.01,X+=.015;const o=new u(4,4,[1,0,0,0,0,Math.cos(U),Math.sin(U),0,0,-Math.sin(U),Math.cos(U),0,0,0,0,1]),i=new u(4,4,[Math.cos(X),0,-Math.sin(X),0,0,1,0,0,Math.sin(X),0,Math.cos(X),0,0,0,0,1]),s=new u(4,4,[1,0,0,0,0,1,0,0,0,0,1,0,0,0,-2,1]),c=70/180*Math.PI,f=e.width/e.height,l=new u(4,4,[1/(f*Math.tan(c/2)),0,0,0,0,1/Math.tan(c/2),0,0,0,0,-100.5/99.5,-1,0,0,-100/99.5,0]),d=new Float32Array(l.mul(s).mul(i).mul(o).mul(a).toArray());r.queue.writeBuffer(y,0,d,0,d.length);const p=(performance.now()-F)/5e3%2;r.queue.writeBuffer(x,0,new Uint32Array([p]),0,1);const m={colorAttachments:[{clearValue:D,loadOp:"clear",storeOp:"store",view:t.getCurrentTexture().createView()}]},v=r.createCommandEncoder();v.copyBufferToTexture({buffer:g,bytesPerRow:1024,rowsPerImage:192},{texture:h},{width:256,height:192,depthOrArrayLayers:2});const B=v.beginRenderPass(m);B.executeBundles([G]),B.end(),r.queue.submit([v.finish()]),requestAnimationFrame(n)}))},new((n=void 0)||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r}};function f(){const e=document.body.appendChild(document.createElement("ul"));for(const t in c){const n=e.appendChild(document.createElement("li")).appendChild(document.createElement("a"));n.href="./index.html?page="+t,n.textContent=t}}window.onload=()=>{return e=void 0,t=void 0,r=function*(){(c[new URL(window.location.href).searchParams.get("page")]||f)()},new((n=void 0)||(n=Promise))((function(a,o){function i(e){try{s(r.next(e))}catch(e){o(e)}}function u(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,u)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,